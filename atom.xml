<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不落辰</title>
  
  <subtitle>知不可乎骤得,托遗响于悲风</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-29T07:21:49.551Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Cstardust</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vim</title>
    <link href="http://example.com/2022/05/24/vim/"/>
    <id>http://example.com/2022/05/24/vim/</id>
    <published>2022-05-24T02:20:12.000Z</published>
    <updated>2022-05-29T07:21:49.551Z</updated>
    
    <content type="html"><![CDATA[<ul><li>快捷键<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">功能：</span><br><span class="line">    (1) 命令行模式下的文本编辑器。</span><br><span class="line">    (2) 根据文件扩展名自动判别编程语言。支持代码缩进、代码高亮等功能。</span><br><span class="line">    (3) 使用方式：vim filename</span><br><span class="line">        如果已有该文件，则打开它。</span><br><span class="line">        如果没有该文件，则打开个一个新的文件，并命名为filename</span><br><span class="line">模式：</span><br><span class="line">    (1) 一般命令模式</span><br><span class="line">        默认模式。命令输入方式：类似于打游戏放技能，按不同字符，即可进行不同操作。可以复制、粘贴、删除文本等。</span><br><span class="line">    (2) 编辑模式</span><br><span class="line">        在一般命令模式里按下i，会进入编辑模式。</span><br><span class="line">        按下ESC会退出编辑模式，返回到一般命令模式。</span><br><span class="line">    (3) 命令行模式</span><br><span class="line">        在一般命令模式里按下:/?三个字母中的任意一个，会进入命令行模式。命令行在最下面。</span><br><span class="line">        可以查找、替换、保存、退出、配置编辑器等。</span><br><span class="line">操作：</span><br><span class="line">    (1) i：进入编辑模式</span><br><span class="line">    (2) ESC：进入一般命令模式</span><br><span class="line">    (3) h 或 左箭头键：光标向左移动一个字符</span><br><span class="line">    (4) j 或 向下箭头：光标向下移动一个字符</span><br><span class="line">    (5) k 或 向上箭头：光标向上移动一个字符</span><br><span class="line">    (6) l 或 向右箭头：光标向右移动一个字符</span><br><span class="line">    (7) n&lt;Space&gt;：n表示数字，按下数字后再按空格，光标会向右移动这一行的n个字符</span><br><span class="line">    (8) 0 或 功能键[Home]：光标移动到本行开头</span><br><span class="line">    (9) $ 或 功能键[End]：光标移动到本行末尾</span><br><span class="line">    (10) G：光标移动到最后一行</span><br><span class="line">    (11) :n 或 nG：n为数字，光标移动到第n行</span><br><span class="line">    (12) gg：光标移动到第一行，相当于1G</span><br><span class="line">    (13) n&lt;Enter&gt;：n为数字，光标向下移动n行</span><br><span class="line">    (14) /word：向光标之下寻找第一个值为word的字符串。</span><br><span class="line">    (15) ?word：向光标之上寻找第一个值为word的字符串。</span><br><span class="line">    (16) n：重复前一个查找操作</span><br><span class="line">    (17) N：反向重复前一个查找操作</span><br><span class="line">    (18) :n1,n2s/word1/word2/g：n1与n2为数字，在第n1行与n2行之间寻找word1这个字符串，并将该字符串替换为word2</span><br><span class="line">    (19) :1,<span class="variable">$s</span>/word1/word2/g：将全文的word1替换为word2</span><br><span class="line">    (20) :1,<span class="variable">$s</span>/word1/word2/gc：将全文的word1替换为word2，且在替换前要求用户确认。</span><br><span class="line">    (21) v：选中文本</span><br><span class="line">    (22) d：删除选中的文本</span><br><span class="line">    (23) dd: 删除当前行</span><br><span class="line">    (24) y：复制选中的文本</span><br><span class="line">    (25) yy: 复制当前行</span><br><span class="line">    (26) p: 将复制的数据在光标的下一行/下一个位置粘贴</span><br><span class="line">    (27) u：撤销</span><br><span class="line">    (28) Ctrl + r：取消撤销</span><br><span class="line">    (29) 大于号 &gt;：将选中的文本整体向右缩进一次</span><br><span class="line">    (30) 小于号 &lt;：将选中的文本整体向左缩进一次</span><br><span class="line">    (31) :w 保存</span><br><span class="line">    (32) :w! 强制保存</span><br><span class="line">    (33) :q 退出</span><br><span class="line">    (34) :q! 强制退出</span><br><span class="line">    (35) :wq 保存并退出</span><br><span class="line">    (36) :<span class="built_in">set</span> paste 设置成粘贴模式，取消代码自动缩进</span><br><span class="line">    (37) :<span class="built_in">set</span> nopaste 取消粘贴模式，开启代码自动缩进</span><br><span class="line">    (38) :<span class="built_in">set</span> nu 显示行号</span><br><span class="line">    (39) :<span class="built_in">set</span> nonu 隐藏行号</span><br><span class="line">    (40) gg=G：将全文代码格式化</span><br><span class="line">    (41) :noh 关闭查找关键词高亮</span><br><span class="line">    (42) Ctrl + q：当vim卡死时，可以取消当前正在执行的命令</span><br><span class="line">异常处理：</span><br><span class="line">    每次用vim编辑文件时，会自动创建一个.filename.swp的临时文件。</span><br><span class="line">    如果打开某个文件时，该文件的swp文件已存在，则会报错。此时解决办法有两种：</span><br><span class="line">        (1) 找到正在打开该文件的程序，并退出</span><br><span class="line">        (2) 直接删掉该swp文件即可</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;快捷键&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;</summary>
      
    
    
    
    <category term="技能 &amp; 工具" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP_3_程序的机器级表示</title>
    <link href="http://example.com/2022/05/24/csapp_3_%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/"/>
    <id>http://example.com/2022/05/24/csapp_3_%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/</id>
    <published>2022-05-24T00:31:55.000Z</published>
    <updated>2022-05-28T14:42:23.388Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h1><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul><li>architecture（计算机的体系结构，架构）<ul><li>also ISA：instruction set architecture 指令集架构</li><li>当我们谈论指令和指令集，这是编译器的目标，为你提供一系列指令，告诉机器确切第做了什么</li><li>事实证明，关于指令如何实现，硬件的实现者已经想好了。有的速度快，需要很多硬件；有的速度慢，但需要很少的硬件。</li><li>所以，人们创建了instruction set architecture 指令集架构这一抽象概念<ul><li>编译器的目标是他</li><li>如何最好的实现他是硬件研究者需要负责的</li></ul></li></ul></li></ul><p>text c program —Complier—-&gt; text 汇编asm program —–Assembler—–&gt; binary 文本表示的指令转化成了实际的字节object program ——linker—–&gt; binary executable program</p><h2 id="x86常识"><a href="#x86常识" class="headerlink" title="x86常识"></a>x86常识</h2><h3 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h3><ul><li><p>汇编中</p><ul><li>%开头 代表寄存器的实际名称</li><li>句点.开头，表示他们事实上不是指令而是一些别的东西</li><li>他们与一些被需要的东西有关， <ul><li>一些信息提供给调试器，使它能够定位程序的各个部分</li><li>一些信息提供给链接器，告诉他这是一个全局定义的函数</li><li>还有很多其他信息，在一开始的时候不需要考虑他们太多，因此先删掉 </li></ul></li></ul></li><li><p>gcc -Og -S sum.c</p><ul><li>O : Optimize 优化</li><li>S : stop 只做第一阶段的事情</li></ul></li><li><p>objdump 会输出代码反汇编的结果。</p><ul><li>objdump -d</li><li>反汇编程序无法访问源代码，甚至无法访问汇编代码，他只是通过实际代码文件中的字节辨别出来的。</li></ul></li><li><p>gdb</p><ul><li>disassemble 函数名：查看函数二进制代码</li></ul></li></ul><h3 id="寄存器-Register"><a href="#寄存器-Register" class="headerlink" title="寄存器(Register)"></a>寄存器(Register)</h3><ul><li><img src="/2022/05/24/csapp_3_%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/2022-05-26-12-11-00.png"></li><li>%rsp比较特殊，我们不能随意改变，因为这里面存的是栈指针，指向当前栈顶（stack top）</li><li>左边一列是原先就有的，右边一列是新增的</li><li>%rax和%eax的关系<ul><li>%rax是64位寄存器</li><li>%eax是32位寄存器</li><li>操作%eax就是操作%rax的低32位</li></ul></li><li>另一特殊寄存器%rip：instruction pointer。包含当前执行指令的地址。不是我们可以正常访问的寄存器，它只是告诉我们程序执行到了哪里。<h3 id="操作数-Operand"><a href="#操作数-Operand" class="headerlink" title="操作数(Operand)"></a>操作数(Operand)</h3></li><li>立即数（immediate）<ul><li>Example：$0400,$-533</li><li>Like C constant ,but prefixed with $</li><li>encoded with 1,2 or 4 bytes</li></ul></li><li>寄存器（register）：上图十六个整形寄存器之一<ul><li>example：%rax，%r13</li><li>but % rsp reserved for special use</li><li>Others have special uses for particular instructions</li></ul></li><li>内存（memory）:8 consecutive bytes of memory at address given by register<ul><li>example：(%rax)</li><li>various other “address mode”</li></ul></li></ul><h3 id="经典指令"><a href="#经典指令" class="headerlink" title="经典指令"></a>经典指令</h3><ul><li>mov指令<ul><li>mov的src和dst顺序<ul><li><a href="https://stackoverflow.com/questions/2397528/">https://stackoverflow.com/questions/2397528/</a></li><li>mov dest, src称为 Intel syntax 。 (例如mov eax, 123)</li><li>mov src, dest称为 AT&amp;T syntax 。 (例如mov $123, %eax)</li><li>包括GNU汇编器在内的UNIX汇编器使用AT＆T语法，所有其他x86汇编器都使用Intel语法</li></ul></li><li><img src="/2022/05/24/csapp_3_%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/2022-05-24-19-50-55.png"></li></ul></li><li>机器不允许直接将数据从一个内存位置复制到另一个内存位置。需要使用两个指令。<ul><li>先将内存的值移到寄存器中</li><li>再将寄存器中的值移到内存中</li></ul></li></ul><ul><li><p>小问题：movq、leaq、addq、subq…中的q是什么？quad word（Intel术语）：4字=8Bytes=64位</p></li><li><p>addq,subq,imulq,salq，sarq,shrq,xorq,andq,orq等，都是src在前，dest在后。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">addq src dst  dst = dst + src</span><br><span class="line">subq src dst  dst = dst - src</span><br><span class="line">imulq src dst dst = dst * src</span><br><span class="line">salq src dst  dst = dst &lt;&lt; src</span><br><span class="line">sarq src dst  dst = dst &gt;&gt; src  <span class="comment">// 算数右移</span></span><br><span class="line">shrq src dst  dst = dst &gt;&gt; src  <span class="comment">// 逻辑右移</span></span><br><span class="line">xorq src dst  dst = dst ^ src</span><br><span class="line">andq src dst  dst = dst &amp; src</span><br><span class="line">orq  src dst  dst = dst | src  </span><br></pre></td></tr></table></figure></li><li><p>内存地址编码方式</p><ul><li>Simple Memory addressing modes。<ul><li>normal：(R)  —- mem[reg[R]]<ul><li>寄存器R中存的就是内存地址</li><li>movq (%rcx),%rax ：%rax = *(%rcx)</li></ul></li><li>displacement：mem[reg[R]+D]<ul><li>R中存储内存基地址，向高偏移D个Bytes，得到目标地址</li><li>movq 8(%rbp),%rdx ：%rdx = *(%rbp+8)</li></ul></li></ul></li><li>Complete Memory Addressing Modes<ul><li>most genernal form ：D(R) —- mem[reg[Rb] + S*reg[Rb] + D]<ul><li> 数组引用常见形式</li><li>D：偏移量。1 / 2 / 4 Bytes</li><li>Rb：该寄存器存储目标内存基地址   </li><li>Ri：下标寄存器</li><li>Scale：比例。1 / 2 / 4 / 8 Bytes。数组元素的数据类型大小。</li></ul></li><li>special cases<ul><li>(Rb,Ri) —- mem[reg[Rb]+reg[Ri]]。mem[寄存器] 就是寄存器存储的地址对应的存储单元的存储的值</li><li>D(Rb,Ri) —- mem[reg[Rb]+Reg[Ri]+D]</li><li>(Rb,Ri,S) —- mem[reg[Rb]+S*reg[Ri]]</li></ul></li></ul></li></ul></li></ul><ul><li>lea指令：load effective address。将src表达的地址值赋值给Dst<ul><li>leaq Src Dst<ul><li>src is address mode expression</li><li>set dest to address denoted by expression</li></ul></li><li>作用：<ul><li>计算地址 p = &amp;x[i]</li><li>计算数值 x + k*y</li></ul></li><li>例子<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">func</span><span class="params">(<span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x*<span class="number">12</span>;    </span><br><span class="line">  <span class="comment">// convert to asm by complier</span></span><br><span class="line">  <span class="built_in">leaq</span> (%rdi,%rdi,<span class="number">2</span>) , %rax  ：%rax = reg[%rdi]+reg[%rdi]*<span class="number">2</span> = <span class="number">3</span> * %rdi</span><br><span class="line">  salq $<span class="number">2</span> , %rax             ：%rax &lt;&lt; <span class="number">2</span> = %rax * <span class="number">4</span> = <span class="number">12</span> &amp; %rdi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>例子<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">arith</span><span class="params">(<span class="keyword">long</span> x,<span class="keyword">long</span> y,<span class="keyword">long</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">  <span class="keyword">long</span> t1 = x+y;    t1 ：</span><br><span class="line">  <span class="keyword">long</span> t2 = z+t1;   t2 ：</span><br><span class="line">  <span class="keyword">long</span> t3 = x+<span class="number">4</span>;    </span><br><span class="line">  <span class="keyword">long</span> t4 = y*<span class="number">48</span>;</span><br><span class="line">  <span class="keyword">long</span> t5 = t3+t4;</span><br><span class="line">  <span class="keyword">long</span> rval = t2*t5;</span><br><span class="line">  <span class="keyword">return</span> rval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arith：</span><br><span class="line">  <span class="built_in">leaq</span> (%rdi,%rsi),%rax     ---&gt; %rax = %rdi+%rsi   <span class="comment">//  t1</span></span><br><span class="line">  addq %rdx,%rax            ---&gt; %rax += %rdx       <span class="comment">//  t2</span></span><br><span class="line">  <span class="built_in">leaq</span> (%rsi,%rsi,<span class="number">2</span>),%rdx   ---&gt; %rdx = <span class="number">2</span>*rsi + %rsi = <span class="number">3</span>*%rsi   </span><br><span class="line">  salq $<span class="number">4</span> , %rdx            ---&gt; %rdx &lt;&lt;= <span class="number">4</span>         <span class="comment">//  t4</span></span><br><span class="line">  leaq <span class="number">4</span>(%rdi,%rdx),%rcx    ---&gt; %rcx = %rdx + %rdi + <span class="number">4</span> <span class="comment">//  t5   t3 = %rdi + 4</span></span><br><span class="line">  imulq %rdx,%rax           ---&gt; %rax = %rax * %rcx <span class="comment">// rval</span></span><br><span class="line">  ret       </span><br><span class="line"></span><br><span class="line">%rdi x</span><br><span class="line">%rsi y</span><br><span class="line">%rax t1 t2 val</span><br><span class="line">%rdx t4</span><br></pre></td></tr></table></figure></li></ul><h1 id="Control"><a href="#Control" class="headerlink" title="Control"></a>Control</h1><ul><li>与程序运行状态相关的信息</li><li>temproary data（临时量）：<ul><li>%rax…</li></ul></li><li>location of runtime stack：<ul><li>%rsp(栈指针)：指向当前栈顶</li></ul></li><li>location of current code control point<ul><li>%rip（当前程序运行到哪里）：包含当前执行指令的地址。不是我们可以正常访问的寄存器，它只是告诉我们程序执行到了哪里。</li></ul></li><li>status of recent tests<ul><li>condition codes：CF，ZF，SF，OF</li><li><a href="https://blog.csdn.net/zenny_chen/article/details/121829354">https://blog.csdn.net/zenny_chen/article/details/121829354</a></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Basic&quot;&gt;&lt;a href=&quot;#Basic&quot; class=&quot;headerlink&quot; title=&quot;Basic&quot;&gt;&lt;/a&gt;Basic&lt;/h1&gt;&lt;h2 id=&quot;术语&quot;&gt;&lt;a href=&quot;#术语&quot; class=&quot;headerlink&quot; title=&quot;术语&quot;&gt;&lt;/a&gt;术</summary>
      
    
    
    
    <category term="CSAPP" scheme="http://example.com/categories/CSAPP/"/>
    
    
    <category term="计算机基础" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="CSAPP" scheme="http://example.com/tags/CSAPP/"/>
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>pcap解析</title>
    <link href="http://example.com/2022/05/12/pcap%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2022/05/12/pcap%E8%A7%A3%E6%9E%90/</id>
    <published>2022-05-12T04:31:57.000Z</published>
    <updated>2022-05-28T14:19:36.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WireShark抓包结构"><a href="#WireShark抓包结构" class="headerlink" title="WireShark抓包结构"></a>WireShark抓包结构</h1><p><img src="/2022/05/12/pcap%E8%A7%A3%E6%9E%90/2022-05-17-12-43-33.png"></p><h1 id="总体结构"><a href="#总体结构" class="headerlink" title="总体结构"></a>总体结构</h1><ul><li>报文封装结构<ul><li>网络接口层的传输单位是帧（frame），IP 层的传输单位是包（packet），TCP 层的传输单位是段（segment），HTTP 的传输单位则是消息或报文（message）。但这些名词并没有什么本质的区分，可以统称为数据包。</li><li><blockquote><p><img src="/2022/05/12/pcap%E8%A7%A3%E6%9E%90/2022-05-12-16-58-46.png"></p></blockquote></li></ul></li><li>pcap文件结构<ul><li><blockquote><p><img src="/2022/05/12/pcap%E8%A7%A3%E6%9E%90/2022-05-12-16-15-33.png"></p></blockquote></li></ul></li><li>例子<ul><li><img src="/2022/05/12/pcap%E8%A7%A3%E6%9E%90/2022-05-12-17-12-52.png"></li></ul></li></ul><h2 id="Pcap-Header"><a href="#Pcap-Header" class="headerlink" title="Pcap Header"></a>Pcap Header</h2><ul><li>pcap文件头，占24Bytes，分为7个字段。</li><li>Magic(4Bytes)：0x D4 C3 B2 A1代表小端序 0x A1 B2 C3 D4代表大端序</li><li>Major(2Bytes)：当前文件的主要版本号，一般为0x0002</li><li>Minor(2Bytes)：当前文件次要版本号，一般为0x0004</li><li>ThisZone(4Bytes)：当地的标准时间，如果用的GMT为0则全0，一般全0</li><li>SigFigs(4Bytes)：时间戳的精度，一般为全零</li><li>SnapLen(4Bytes)：最大的存储长度，该值设置所抓获的数据包的最大长度。</li><li>LinkType(4Bytes)：链路类型。解析数据包首先要判断它的LinkType，所以这个值很重要。一般的值为1，即以太网</li></ul><p><img src="/2022/05/12/pcap%E8%A7%A3%E6%9E%90/2022-05-12-13-00-07.png"></p><ul><li>本pcap文件中<ul><li>Magic：小端序</li><li>SnapLen：抓获的数据包的最大长度为0x00040000：4*65536 bytes</li><li>LinkTypes ：0x 00000001：以太网类型</li></ul></li></ul><h2 id="Packet-Header"><a href="#Packet-Header" class="headerlink" title="Packet Header"></a>Packet Header</h2><ul><li>数据包头可以有多个，每个数据包头后面都跟着真正的数据包。数据包头则依次为：时间戳（秒）、时间戳（微妙）、抓包长度和实际长度，依次各占4个字节。以下是Packet Header的4个字段含义</li><li>Timestamp(4Bytes)：时间戳高位，精确到seconds，这是Unix时间戳。捕获数据包的时间一般是根据这个值</li><li>Timestamp(4Bytes)：时间戳低位，能够精确到microseconds</li><li>Caplen(4Bytes)：当前数据区的长度，即抓取到的数据帧长度，由此可以得到下一个数据帧的位置。</li><li>Len(4Bytes)：离线数据长度，网路中实际数据帧的长度，一般不大于Caplen，多数情况下和Caplen值一样<br><img src="/2022/05/12/pcap%E8%A7%A3%E6%9E%90/2022-05-12-16-11-18.png"></li><li>本图中<ul><li>Timestamp：<ul><li>Unix 时间戳是从1970年1月1日（UTC/GMT的午夜）开始所经过的秒数</li><li>unix时间戳高位：0x6279C37B<ul><li>1652147067 / 31536000 = 52.389239821156773211567732115677年</li><li>1970+52=2022。零142天</li><li>2022-05-10 09:44:27</li></ul></li><li>unix时间戳低位：0x0009EDB4</li></ul></li><li>抓取到的数据帧Packet长度<ul><li>Caplen：0x00000042。packet data的长度是 4*16+2=66 Bytes</li></ul></li><li>离线数据长度： <ul><li>Len：0x00000042。网络中实际数据帧长度<h2 id="Packet-Data"><a href="#Packet-Data" class="headerlink" title="Packet Data"></a>Packet Data</h2></li></ul></li></ul></li><li>packet header中的caplen就是说得packet data的长度。pcap文件中各个捕获的数据帧之间没有人为写入的间隔标志。packet data部分的格式就是标准的网络协议格式<br><img src="/2022/05/12/pcap%E8%A7%A3%E6%9E%90/2022-05-15-18-47-40.png"></li></ul><h2 id="WireShark对比"><a href="#WireShark对比" class="headerlink" title="WireShark对比"></a>WireShark对比</h2><ul><li>WireShark只留下了packet data。</li><li>直接打开裸的原始pcap文件<ul><li><img src="/2022/05/12/pcap%E8%A7%A3%E6%9E%90/2022-05-12-17-12-52.png"></li></ul></li><li>WireShark解析后的<ul><li><img src="/2022/05/12/pcap%E8%A7%A3%E6%9E%90/2022-05-12-17-38-41.png"></li><li><img src="/2022/05/12/pcap%E8%A7%A3%E6%9E%90/2022-05-12-17-40-46.png"></li><li><img src="/2022/05/12/pcap%E8%A7%A3%E6%9E%90/2022-05-12-17-41-15.png"></li></ul></li></ul><h2 id="静态解析pcap"><a href="#静态解析pcap" class="headerlink" title="静态解析pcap"></a>静态解析pcap</h2><ul><li>解析packet_header ，获取时间<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"><span class="keyword">using</span> std::for_each;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::unordered_map;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  先不用c++异常了。直接assert</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">file</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">file</span>(<span class="keyword">const</span> string &amp; name,<span class="keyword">int</span> flag)</span><br><span class="line">        :_name(name),_flag(flag),<span class="built_in">is_mmap</span>(<span class="literal">false</span>),_ptr(<span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//  打开文件</span></span><br><span class="line">        _fd = <span class="built_in">open</span>(_name.<span class="built_in">c_str</span>(),_flag);</span><br><span class="line">        <span class="keyword">if</span>(_fd==<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">perror</span>(<span class="built_in">strerror</span>(errno));</span><br><span class="line">            <span class="built_in">assert</span>(_fd!=<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  获取文件信息块</span></span><br><span class="line">        <span class="keyword">int</span> ret = <span class="built_in">stat</span>(_name.<span class="built_in">c_str</span>(),&amp;_st);</span><br><span class="line">        <span class="built_in">assert</span>(ret!=<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!is_mmap)&#123;</span><br><span class="line">            <span class="built_in">set_mmap</span>();</span><br><span class="line">            is_mmap = <span class="literal">true</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  获取大小</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _st.st_size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  获取文件信息块</span></span><br><span class="line">    <span class="function">struct stat <span class="title">getStat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _st;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read_file_from_begin</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!is_mmap)&#123;</span><br><span class="line">            <span class="built_in">set_mmap</span>();</span><br><span class="line">            is_mmap = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        for_each(_ptr,_ptr+len,[](<span class="keyword">unsigned</span> <span class="keyword">char</span> x)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>,x);</span><br><span class="line">        &#125;);    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read_file_from_end</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!is_mmap)&#123;</span><br><span class="line">            <span class="built_in">set_mmap</span>();</span><br><span class="line">            is_mmap = <span class="literal">true</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        for_each(_ptr+_st.st_size-len,_ptr+_st.st_size,[](<span class="keyword">unsigned</span> <span class="keyword">char</span> x)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>,x);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  获取相应位置指针</span></span><br><span class="line">    <span class="function">u_char * <span class="title">get_ptr_from_begin</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _ptr + len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">u_char * <span class="title">get_ptr_from_end</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _ptr + _st.st_size - len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  建立文件映射到内存</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_mmap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_flag==O_RDONLY)&#123;</span><br><span class="line">            _ptr = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)<span class="built_in">mmap</span>(<span class="literal">NULL</span>,_st.st_size,PROT_READ,MAP_SHARED,_fd,<span class="number">0</span>);    </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(_flag==O_RDWR)&#123;</span><br><span class="line">            _ptr = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)<span class="built_in">mmap</span>(<span class="literal">NULL</span>,_st.st_size,PROT_READ|PROT_WRITE,MAP_SHARED,_fd,<span class="number">0</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  判断映射成功/失败</span></span><br><span class="line">        <span class="built_in">assert</span>(_ptr!=MAP_FAILED);</span><br><span class="line">        <span class="comment">//  映射之后就是对共享内存操作 而非文件了。所以关闭fd</span></span><br><span class="line">        <span class="keyword">if</span>(_fd!=<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">close</span>(_fd);</span><br><span class="line">            _fd = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">file</span>()&#123;</span><br><span class="line">        <span class="comment">//  关闭文件</span></span><br><span class="line">        <span class="keyword">if</span>(_fd!=<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">close</span>(_fd);</span><br><span class="line">            _fd = <span class="number">-1</span>;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  解除映射</span></span><br><span class="line">        <span class="keyword">if</span>(is_mmap)&#123;</span><br><span class="line">            <span class="built_in">munmap</span>(_ptr,_st.st_size);</span><br><span class="line">            _ptr = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> _fd;            <span class="comment">//  文件描述符</span></span><br><span class="line">    <span class="keyword">const</span> string _name; <span class="comment">//  文件名</span></span><br><span class="line">    <span class="keyword">int</span> _flag;          <span class="comment">//  打开权限</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> _<span class="title">st</span>;</span>    <span class="comment">//  文件信息结构体</span></span><br><span class="line">    <span class="keyword">bool</span> is_mmap;       <span class="comment">//  是否建立了映射</span></span><br><span class="line">    u_char *_ptr;         <span class="comment">//  文件映射到内存指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  pcap文件头、占24个Bytes</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pcap_header</span>&#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> _magic;             <span class="comment">//  大小端序   //  4个字节</span></span><br><span class="line">    <span class="keyword">uint16_t</span> _major;             <span class="comment">//  版本号</span></span><br><span class="line">    <span class="keyword">uint16_t</span> _minor;             <span class="comment">//  版本号</span></span><br><span class="line">    <span class="keyword">uint32_t</span> _this_zone;         <span class="comment">//  当地的标准时间</span></span><br><span class="line">    <span class="keyword">uint32_t</span> _sig_fig;           <span class="comment">//  时间戳精度</span></span><br><span class="line">    <span class="keyword">uint32_t</span> _snap_len;          <span class="comment">//  抓获数据包的最大长度</span></span><br><span class="line">    <span class="keyword">uint32_t</span> _link_type;         <span class="comment">//  链路类型</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">pcap_header</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">pcap_header</span>(u_char* p)</span><br><span class="line">        :_magic(*(<span class="keyword">uint32_t</span>*)p),_major(*(<span class="keyword">uint16_t</span>*)(p+<span class="number">4</span>)),_minor(*(<span class="keyword">uint16_t</span>*)(p+<span class="number">6</span>)),_this_zone(*(<span class="keyword">uint32_t</span>*)(p+<span class="number">8</span>))</span><br><span class="line">        ,_sig_fig(*(<span class="keyword">uint32_t</span>*)(p+<span class="number">12</span>)),_snap_len(*(<span class="keyword">uint32_t</span>*)(p+<span class="number">16</span>)),_link_type(*((<span class="keyword">uint32_t</span>*)(p+<span class="number">20</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">is_little</span>())&#123;</span><br><span class="line">            <span class="built_in">change_to_little</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_little</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _magic == <span class="number">0xa1b2c3d4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  大端转小端</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change_to_little</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _major = <span class="built_in">ntohs</span>(_major);</span><br><span class="line">        _minor = <span class="built_in">ntohs</span>(_minor);</span><br><span class="line">        _this_zone = <span class="built_in">ntohl</span>(_this_zone);</span><br><span class="line">        _sig_fig = <span class="built_in">ntohl</span>(_sig_fig);</span><br><span class="line">        _snap_len = <span class="built_in">ntohl</span>(_snap_len);</span><br><span class="line">        _link_type = <span class="built_in">ntohl</span>(_link_type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  调试代码</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">is_little</span>()&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%08x\n&quot;</span>,_magic);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%04x\n&quot;</span>,_major);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%04x\n&quot;</span>,_minor);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%08x\n&quot;</span>,_this_zone);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%08x\n&quot;</span>,_sig_fig);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%08x\n&quot;</span>,_snap_len);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%08x\n&quot;</span>,_link_type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  packet文件头</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">packet_header</span>&#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> _time_h;            <span class="comment">//  unix时间戳高位</span></span><br><span class="line">    <span class="keyword">uint32_t</span> _time_l;</span><br><span class="line">    <span class="keyword">uint32_t</span> _cap_len;           <span class="comment">//  packet_data长度</span></span><br><span class="line">    <span class="keyword">uint32_t</span> _len;               <span class="comment">//  离线数据长度，网路中实际数据帧的长度。一般等于capture_len</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">packet_header</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">packet_header</span>(u_char *p , <span class="keyword">bool</span> is_little)</span><br><span class="line">        :_time_h(*(<span class="keyword">uint32_t</span>*)(p)),_time_l(*(<span class="keyword">uint32_t</span>*)(p+<span class="number">4</span>)),_cap_len(*(<span class="keyword">uint32_t</span>*)(p+<span class="number">8</span>)),_len(*(<span class="keyword">uint32_t</span>*)(p+<span class="number">12</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!is_little)&#123;</span><br><span class="line">            <span class="built_in">change_to_little</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change_to_little</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _time_h = <span class="built_in">ntohl</span>(_time_h);</span><br><span class="line">        _time_l = <span class="built_in">ntohl</span>(_time_l);</span><br><span class="line">        _cap_len = <span class="built_in">ntohl</span>(_cap_len);</span><br><span class="line">        _len = <span class="built_in">ntohl</span>(_len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  调试代码</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;header&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%08x\n&quot;</span>,_time_h);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%08x\n&quot;</span>,_time_l);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%08x\n&quot;</span>,_cap_len);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%08x\n&quot;</span>,_len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">packet_data</span>&#123;</span></span><br><span class="line">    u_char * _ptr;               <span class="comment">//  指向packet_data内容</span></span><br><span class="line">    <span class="keyword">uint32_t</span> _len;               <span class="comment">//  packet_data长度</span></span><br><span class="line">    <span class="built_in">packet_data</span>(u_char *p,<span class="keyword">uint32_t</span> len,<span class="keyword">bool</span> is_little)</span><br><span class="line">        :_ptr(p),_len(len)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!is_little)&#123;</span><br><span class="line">                <span class="built_in">change_to_little</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">packet_data</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change_to_little</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;change to little&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pcap_file</span></span></span><br><span class="line"><span class="class">    :</span> <span class="keyword">public</span> file&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">pcap_file</span>(<span class="keyword">const</span> string &amp; name,<span class="keyword">int</span> flag)</span><br><span class="line">        :<span class="built_in">file</span>(name,flag),_parse_len(<span class="number">0</span>)</span><br><span class="line">        &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  解析文件</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">parse_file</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">parse_pacp_header</span>();</span><br><span class="line">        <span class="keyword">while</span>(_parse_len &lt; <span class="built_in">getSize</span>())&#123;</span><br><span class="line">            <span class="built_in">parse_packet_header</span>();</span><br><span class="line">            <span class="built_in">parse_packet_data</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> vector&lt;packet_header&gt;&amp; <span class="title">get_packets_header</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _vec_header;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//  解析pcap_header</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">parse_pacp_header</span><span class="params">()</span></span>&#123;</span><br><span class="line">        u_char *p = <span class="built_in">get_ptr_from_begin</span>(_parse_len);</span><br><span class="line">        _pc_header = <span class="built_in">pcap_header</span>(p);                                    <span class="comment">//  记录pcap头</span></span><br><span class="line">        _is_little = _pc_header.<span class="built_in">is_little</span>();                            <span class="comment">//  是否小端</span></span><br><span class="line">        _parse_len += _pcap_header_len;                                 <span class="comment">//  维护长度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  解析packet_header</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">parse_packet_header</span><span class="params">()</span></span>&#123;</span><br><span class="line">        u_char *p = <span class="built_in">get_ptr_from_begin</span>(_parse_len);</span><br><span class="line">        _vec_header.<span class="built_in">emplace_back</span>(<span class="built_in">packet_header</span>(p,_is_little));           <span class="comment">//  记录packet头</span></span><br><span class="line">        _parse_len += _packet_header_len;                                <span class="comment">//  维护长度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  解析packet_data</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">parse_packet_data</span><span class="params">()</span></span>&#123;</span><br><span class="line">        u_char *p = <span class="built_in">get_ptr_from_begin</span>(_parse_len);                      </span><br><span class="line">        <span class="keyword">uint32_t</span> data_len = _vec_header[_vec_header.<span class="built_in">size</span>()<span class="number">-1</span>]._cap_len;</span><br><span class="line">        _vec_data.<span class="built_in">emplace_back</span>(<span class="built_in">packet_data</span>(p,data_len,_is_little));     <span class="comment">//  记录packet data</span></span><br><span class="line">        _parse_len += data_len;                                         <span class="comment">//  维护长度</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//  是否小端</span></span><br><span class="line">    <span class="keyword">bool</span> _is_little;</span><br><span class="line">    <span class="comment">//  pcap_header  , packet_header , packet_data </span></span><br><span class="line">    pcap_header _pc_header;</span><br><span class="line">    vector&lt;packet_header&gt; _vec_header;</span><br><span class="line">    vector&lt;packet_data&gt; _vec_data;</span><br><span class="line">    <span class="comment">//  已经解析完的文件长度</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> _parse_len;</span><br><span class="line">    <span class="comment">//  常量                   </span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> _pcap_header_len = <span class="number">24</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> _packet_header_len = <span class="number">16</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_packet_time</span><span class="params">(<span class="keyword">const</span> vector&lt;packet_header&gt; &amp;vec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">        <span class="keyword">time_t</span> t = vec[i]._time_h;</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;<span class="string">&quot;\t&quot;</span>&lt;&lt;<span class="built_in">ctime</span>(&amp;t)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">pcap_file <span class="title">pf</span><span class="params">(<span class="string">&quot;./day3.pcap&quot;</span>,O_RDONLY)</span></span>;</span><br><span class="line">    pf.<span class="built_in">parse_file</span>();                                                <span class="comment">//  解析文件</span></span><br><span class="line">    <span class="keyword">const</span> vector&lt;packet_header&gt; &amp;vec = pf.<span class="built_in">get_packets_header</span>();     <span class="comment">//  获取packet header</span></span><br><span class="line">    <span class="built_in">show_packet_time</span>(vec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>       Tue May <span class="number">10</span> <span class="number">09</span>:<span class="number">44</span>:<span class="number">27</span> <span class="number">2022</span></span><br><span class="line"><span class="number">1</span>       Tue May <span class="number">10</span> <span class="number">09</span>:<span class="number">44</span>:<span class="number">27</span> <span class="number">2022</span></span><br><span class="line"><span class="number">2</span>       Tue May <span class="number">10</span> <span class="number">09</span>:<span class="number">44</span>:<span class="number">27</span> <span class="number">2022</span></span><br><span class="line"><span class="number">3</span>       Tue May <span class="number">10</span> <span class="number">09</span>:<span class="number">44</span>:<span class="number">27</span> <span class="number">2022</span></span><br><span class="line"><span class="number">4</span>       Tue May <span class="number">10</span> <span class="number">09</span>:<span class="number">44</span>:<span class="number">27</span> <span class="number">2022</span></span><br><span class="line">...</span><br><span class="line"><span class="number">50</span>      Tue May <span class="number">10</span> <span class="number">09</span>:<span class="number">44</span>:<span class="number">28</span> <span class="number">2022</span></span><br><span class="line"><span class="number">51</span>      Tue May <span class="number">10</span> <span class="number">09</span>:<span class="number">44</span>:<span class="number">28</span> <span class="number">2022</span></span><br><span class="line"><span class="number">52</span>      Tue May <span class="number">10</span> <span class="number">09</span>:<span class="number">44</span>:<span class="number">28</span> <span class="number">2022</span></span><br><span class="line"><span class="number">53</span>      Tue May <span class="number">10</span> <span class="number">09</span>:<span class="number">44</span>:<span class="number">28</span> <span class="number">2022</span></span><br><span class="line"><span class="number">54</span>      Tue May <span class="number">10</span> <span class="number">09</span>:<span class="number">44</span>:<span class="number">28</span> <span class="number">2022</span></span><br><span class="line"><span class="number">55</span>      Tue May <span class="number">10</span> <span class="number">09</span>:<span class="number">44</span>:<span class="number">28</span> <span class="number">2022</span></span><br><span class="line"><span class="number">56</span>      Tue May <span class="number">10</span> <span class="number">09</span>:<span class="number">44</span>:<span class="number">28</span> <span class="number">2022</span></span><br><span class="line"><span class="number">57</span>      Tue May <span class="number">10</span> <span class="number">09</span>:<span class="number">44</span>:<span class="number">28</span> <span class="number">2022</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="大小端重申"><a href="#大小端重申" class="headerlink" title="大小端重申"></a>大小端重申</h1><ul><li><p>无论文件本身如何大端小端，程序从文件中识别表示一个变量的字节时 都是按照小端顺序（先识别高地址，再识别低地址）来识别文件中存储的字节序列的。因此，如果文件中的字节序列为大端序列，则程序识别起来就会与预期不符；为小端序列，则相符。</p></li><li><p>unsigned int val = 0x12345678</p><table><thead><tr><th>内存地址</th><th>小端模式</th><th>大端模式</th></tr></thead><tbody><tr><td>0x4000</td><td>0x78</td><td>0x12</td></tr><tr><td>0x4001</td><td>0x56</td><td>0x34</td></tr><tr><td>0x4002</td><td>0x34</td><td>0x56</td></tr><tr><td>0x4003</td><td>0x12</td><td>0x78</td></tr></tbody></table></li><li><p>读入内存的数据为大端模式（文件或者对方发送的字节的存储方式为大端模式），程序则识别为0x78563412，不合预期。</p></li><li><p>读入内存的数据为小端模式（文件或者对方发送的字节的存储方式为小端模式），程序则识别为0x12345678，符合预期。</p></li><li><p>因此，对于大端模式，应当将变量a调转一下字节序列，转化为小端模式。这样程序识别时就可以符合预期。</p></li><li><p>探究读取方式和大小端序列的影响</p></li><li><p>两种读取数据方式（无论a是什么类型）：</p><ul><li>赋值：<ul><li>int a = pSrc-&gt;a;   //  ptr指向文件映射到的内存中的一个结构体。结构体中有变量a。 </li><li>或者 int a = *pSrca;   //  pa指向文件映射到的内存中 a变量字节的位置</li></ul></li><li>memcpy 直接拷贝字节<ul><li>void *memcpy(void *<strong>restrict</strong> __dest, const void *<strong>restrict</strong> __src, size_t __n)</li><li>memcpy(&amp;a,pSrc,4); </li></ul></li></ul></li><li><p>无论什么读取方式，无论变量a是什么类型，如果文件中pSrc处的字节为 d4 c3 b2 a1，那么 局部变量a的值都是 0xa1b2c3d4。</p><ul><li><strong>a变量在内存中的实际字节仍然是 d4 c3 b2 a1，但是程序识别时是按照小端序列进行识别的。实际识别出来是0xa1b2c3d4。所以在输出或者比较或者读的时候，变量a的值都是0xa1b2c3d4</strong>。</li></ul></li><li><p>部分代码</p><ul><li><img src="/2022/05/12/pcap%E8%A7%A3%E6%9E%90/2022-05-26-10-05-35.png"></li><li><img src="/2022/05/12/pcap%E8%A7%A3%E6%9E%90/2022-05-26-09-58-41.png"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  pcap文件头、占24个Bytes</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pcap_header</span>&#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> _magic;             <span class="comment">//  大小端序   //  4个字节</span></span><br><span class="line">    <span class="keyword">char16_t</span> _major;             <span class="comment">//  版本号</span></span><br><span class="line">    <span class="keyword">uint16_t</span> _minor;             <span class="comment">//  版本号</span></span><br><span class="line">    <span class="keyword">uint32_t</span> _this_zone;         <span class="comment">//  当地的标准时间</span></span><br><span class="line">    <span class="keyword">uint32_t</span> _sig_fig;           <span class="comment">//  时间戳精度</span></span><br><span class="line">    <span class="keyword">uint32_t</span> _snap_len;          <span class="comment">//  抓获数据包的最大长度</span></span><br><span class="line">    <span class="keyword">uint32_t</span> _link_type;         <span class="comment">//  链路类型</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> PCAP_HEADER_LEN = <span class="number">24</span>;</span><br><span class="line">    <span class="built_in">pcap_header</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">pcap_header</span>(u_char* p)</span><br><span class="line">        <span class="comment">// :_magic(*(uint32_t*)p),_major(*(char16_t*)(p+4)),_minor(*(uint16_t*)(p+6)),_this_zone(*(uint32_t*)(p+8))</span></span><br><span class="line">        <span class="comment">// ,_sig_fig(*(uint32_t*)(p+12)),_snap_len(*(uint32_t*)(p+16)),_link_type(*((uint32_t*)(p+20)))</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;_magic,p,<span class="number">4</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;memcpy赋值方式（字节拷贝）  magic = %08x\n&quot;</span>,_magic);</span><br><span class="line">        cout&lt;&lt; <span class="string">&quot;magic==0xa1b2c3d4? &quot;</span> &lt;&lt;(_magic==<span class="number">0xa1b2c3d4</span>)&lt;&lt;endl;</span><br><span class="line">        _magic = (*(<span class="keyword">uint32_t</span>*)p);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;=赋值方式（变量赋值）  magic = %08x\n&quot;</span>,_magic);</span><br><span class="line">        cout&lt;&lt; <span class="string">&quot;magic==0xa1b2c3d4? &quot;</span> &lt;&lt;(_magic==<span class="number">0xa1b2c3d4</span>)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;_major,p+<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;memcpy赋值方式（字节拷贝）  _major = %04x\n&quot;</span>,_major);</span><br><span class="line">        cout&lt;&lt; <span class="string">&quot; major==0x0200? &quot;</span> &lt;&lt;(_major==<span class="number">0x0200</span>)&lt;&lt;endl;</span><br><span class="line">        _major = (*(<span class="keyword">char16_t</span>*)(p+<span class="number">4</span>));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;=赋值方式（变量赋值）  _major = %04x\n&quot;</span>,_major);</span><br><span class="line">        cout&lt;&lt; <span class="string">&quot;major==0x0200? &quot;</span> &lt;&lt;(_major==<span class="number">0x0200</span>)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;_minor,p+<span class="number">6</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;memcpy赋值方式（字节拷贝）  _minor = %04x\n&quot;</span>,_minor);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;minor==0x0400? &quot;</span>&lt;&lt;(_minor==<span class="number">0x0400</span>)&lt;&lt;endl;</span><br><span class="line">        _minor = (*(<span class="keyword">uint16_t</span>*)(p+<span class="number">4</span>));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;=赋值方式（变量赋值）  _minor = %04x\n&quot;</span>,_minor);</span><br><span class="line">        cout&lt;&lt; <span class="string">&quot;minor==0x0400? &quot;</span> &lt;&lt;(_minor==<span class="number">0x0400</span>)&lt;&lt;endl;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><h2 id="Ethernet协议"><a href="#Ethernet协议" class="headerlink" title="Ethernet协议"></a>Ethernet协议</h2><ul><li>（yi ther nait）</li><li><a href="https://www.cnblogs.com/cxuanBlog/p/14600398.html">数据链路层</a></li><li>数据链路层协议有：<ul><li>Ethernet以太网协议 </li><li>IEEE802.3协议 </li><li>PPP协议 </li><li>HDLC协议</li></ul></li><li>如今局域网里最常见的以太帧，是Ethernet II。如今大多数的TCP/IP应用（如HTTP、FTP、SMTP、POP3等）都是采用Ethernet II帧承载<h3 id="帧结构"><a href="#帧结构" class="headerlink" title="帧结构"></a>帧结构</h3></li><li><img src="/2022/05/12/pcap%E8%A7%A3%E6%9E%90/2022-05-17-12-38-54.png"></li></ul><table><thead><tr><th>Inter Frame Gap</th><th>前同步码</th><th>帧开始定界符</th><th>目的mac地址（DMac）</th><th>源mac地址 (SMac)</th><th>类型(Type)</th><th>数据(Payload)</th><th>校验（FCS）</th></tr></thead><tbody><tr><td>&gt;=12</td><td>7</td><td>1</td><td>6</td><td>6</td><td>2</td><td>46 ~ 1500</td><td>4</td></tr></tbody></table><ul><li>所以，在使用**Ethernet II协议时，数据链路层中，帧的长度范围为[64bytes , 1518bytes]**（6+6+2+x+4）</li></ul><h4 id="链路层各字段"><a href="#链路层各字段" class="headerlink" title="链路层各字段"></a>链路层各字段</h4><ul><li>DMAC：目的MAC地址，IPV4为6字节，该字段标识帧的接收者</li><li>SMAC：源MAC地址，IPV4为6字节，该字段标识帧的发送者</li><li>Type：协议类型。标识出了链路直接封装的协议类型<ul><li>DMAC，SMAC，TYPE在一些书上被称为以太网帧头</li></ul></li><li>Payload：数据字段<ul><li>Payload的最小长度必须为46 bytes以保证帧长（链路层的帧长）至少为64bytes；如果填入该字段的信息少于46 bytes，该字段须填充为64 bytes。</li><li>Payload的最大长度为1500 bytes。</li><li>以太帧的长度必须为整数字节，因此真的负载长度不足整数字节，需要插入填充字段以保证数据帧的长度为整数字节。</li></ul></li><li>FCS：帧校验序列FCS是为接收者提供判断是否传输错误的一种方法，如果发现错误，丢弃此帧。<ul><li>FCS只是通用叫法，具体的FCS还可以细分多种校验方法。在以太帧中，FCS通常采用循环冗余码校验CRC</li></ul></li><li>各type值对应协议（对应数据链路层的上一层：网络层所采用的协议）<ul><li>0x0800    Internet Protocol (IP) [RFC894]</li><li>0x0801    X.75 Internet</li><li>0x0805    X.25 Level 3</li><li>0x0806    Address Resolution Protocol (ARP)[RFC7042]</li></ul></li><li>发现 Wireshark 展现给我们的帧中没有校验字段：<ul><li>这是因为有时校验和会由网卡计算，这时wireshark抓到的本机发送的数据包的校验和都是错误的，所以默认关闭了WireShark自己的校验。</li></ul></li><li><a href="https://blog.csdn.net/yetugeng/article/details/100514693">wireshark展示的帧去掉了物理层的字段们以及数据链路层的FCS字段</a>：<ul><li>在物理层上网卡要先去掉前导同步码和帧开始定界符，然后对帧进行CRC检验，如果帧校验和错，就丢弃此帧。如果校验和正确，就判断帧的目 的硬件地址是否符合自己的接收条件（目的地址是自己的物理硬件地址、广播地址、可接收的多播硬件地址等），如果符合，就将帧交“设备驱动程序”做进一步处 理。这时我们的抓包软件才能抓到数据，因此，抓包软件抓到的是去掉前导同步码、帧开始分界符、FCS之外的数据，</li></ul></li></ul><h4 id="物理层各字段"><a href="#物理层各字段" class="headerlink" title="物理层各字段"></a>物理层各字段</h4><ul><li>帧间隙：每个以太帧之间都要有帧间隙（Inter Frame Gap），即每发完一个帧后要等待一段时间才能再发另外一个帧，以便让帧接收者对接收的帧做必要的处理（如调整缓存的指针、更新计数、通知对报文进行处理等等）。在以太网标准中规定最小帧间隙是12个字节，其数据为全1。对于个别的接口，可减少到64(GE)或40比特(10GE)，其他的接口都不应该小于12字节。</li><li>前同步码：以太网标准中规定前导码为10101010 10101010 10101010 10101010 10101010 10101010 10101010（二进制），共7字节。</li><li>帧开始定界符：以太网标准中规定帧开始定界符为10101011（二进制），共1字节。</li></ul><h4 id="wireShark"><a href="#wireShark" class="headerlink" title="wireShark"></a>wireShark</h4><ul><li>wireshark抓到的是去除了物理层，以及数据链路层的FCS。只留下了 DMac,SMac,Type，以及Payload<ul><li><img src="/2022/05/12/pcap%E8%A7%A3%E6%9E%90/2022-05-17-13-34-26.png"></li></ul></li><li>pcap文件同上<ul><li><img src="/2022/05/12/pcap%E8%A7%A3%E6%9E%90/2022-05-17-13-39-02.png"></li></ul></li></ul><ul><li><a href="https://blog.csdn.net/weixin_39447690/article/details/100062453">一字节的变量没必要大小端转换</a></li></ul><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><h2 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h2><p><img src="/2022/05/12/pcap%E8%A7%A3%E6%9E%90/2022-05-25-22-27-25.png"><br><a href="https://blog.csdn.net/u010599211/article/details/116696069">https://blog.csdn.net/u010599211/article/details/116696069</a><br><a href="https://www.luhalu.cn/message/network/1052">https://www.luhalu.cn/message/network/1052</a></p><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>ARP是个独立的三层协议，并不需要IP协议封装，而是直接生成自己的报文，到达数据链路层后，由数据链路层协议进行封装，一般是以太网协议。封装的过程，就是在ARP报文的前面加上以太网帧头，再加上4字节的冗余校验码结尾，校验码用于检验数据传输是否出现损坏。<br><a href="https://blog.csdn.net/weixin_46027505/article/details/106440848">https://blog.csdn.net/weixin_46027505/article/details/106440848</a><br><a href="https://zhuanlan.zhihu.com/p/399661455">https://zhuanlan.zhihu.com/p/399661455</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WireShark抓包结构&quot;&gt;&lt;a href=&quot;#WireShark抓包结构&quot; class=&quot;headerlink&quot; title=&quot;WireShark抓包结构&quot;&gt;&lt;/a&gt;WireShark抓包结构&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2022/05/12/pcap</summary>
      
    
    
    
    <category term="计算机基础" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Linux-mmap</title>
    <link href="http://example.com/2022/05/10/Linux-mmap/"/>
    <id>http://example.com/2022/05/10/Linux-mmap/</id>
    <published>2022-05-10T09:52:01.000Z</published>
    <updated>2022-05-28T14:53:48.867Z</updated>
    
    <content type="html"><![CDATA[<p>Memory Mapped Files<br>什么是 mmap<br>mmap 全称 Memory Mapped Files，是一种内存文件映射的方法，将一个文件或者其他对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中的一段虚拟地址的一一映射关系，映射关系生成之后，用户进程可以通过指针操作内存中的文件数据，系统会自动将操作后的数据写入到磁盘中，而不需要调用 read(),write()等系统调用来操作数据。</p><p><a href="https://blog.csdn.net/yetaibing1990/article/details/85008702">mmap共享内存</a><br><a href="https://www.cnblogs.com/huxiao-tee/p/4657851.html">好！从内核文件系统看文件读写过程</a> </p><p><a href="https://www.cnblogs.com/huxiao-tee/p/4660352.html#4008787">mmap共享内存</a></p><p><a href="https://mp.weixin.qq.com/s/HZFbPxaEC0rwA98qp9MZcw">好博客</a></p><p><a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzIyNjMxOTY0NA==&action=getalbum&album_id=1359683016842608641&scene=173&from_msgid=2247487574&from_itemidx=1&count=3&nolastread=1#wechat_redirect">看</a></p><p><a href="https://xie.infoq.cn/article/1b9e202c9210305cc9ba07c39#:~:text=mmap%20%E5%85%A8%E7%A7%B0%20Memory%20Mapped,Files%EF%BC%8C%E6%98%AF%E4%B8%80%E7%A7%8D%E5%86%85%E5%AD%98%E6%96%87%E4%BB%B6%E6%98%A0%E5%B0%84%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%8C%E5%B0%86%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E6%88%96%E8%80%85%E5%85%B6%E4%BB%96%E5%AF%B9%E8%B1%A1%E6%98%A0%E5%B0%84%E5%88%B0%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4%EF%BC%8C%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E7%A3%81%E7%9B%98%E5%9C%B0%E5%9D%80%E5%92%8C%E8%BF%9B%E7%A8%8B%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4%E4%B8%AD%E7%9A%84%E4%B8%80%E6%AE%B5%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E7%9A%84%E4%B8%80%E4%B8%80%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB%EF%BC%8C%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB%E7%94%9F%E6%88%90%E4%B9%8B%E5%90%8E%EF%BC%8C%E7%94%A8%E6%88%B7%E8%BF%9B%E7%A8%8B%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E6%8C%87%E9%92%88%E6%93%8D%E4%BD%9C%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE%EF%BC%8C%E7%B3%BB%E7%BB%9F%E4%BC%9A%E8%87%AA%E5%8A%A8%E5%B0%86%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5%E5%88%B0%E7%A3%81%E7%9B%98%E4%B8%AD%EF%BC%8C%E8%80%8C%E4%B8%8D%E9%9C%80%E8%A6%81%E8%B0%83%E7%94%A8%20read%20%28%29%2Cwrite%20%28%29%E7%AD%89%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%9D%A5%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E3%80%82">博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Memory Mapped Files&lt;br&gt;什么是 mmap&lt;br&gt;mmap 全称 Memory Mapped Files，是一种内存文件映射的方法，将一个文件或者其他对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中的一段虚拟地址的一一映射关系，映射关系生成</summary>
      
    
    
    
    <category term="待做" scheme="http://example.com/categories/%E5%BE%85%E5%81%9A/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP_2_信息的表示和处理</title>
    <link href="http://example.com/2022/05/10/csapp_2_%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86_BitsBytesInteger/"/>
    <id>http://example.com/2022/05/10/csapp_2_%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86_BitsBytesInteger/</id>
    <published>2022-05-10T08:40:13.000Z</published>
    <updated>2022-05-28T14:10:58.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h1><h2 id="补码和无符号数"><a href="#补码和无符号数" class="headerlink" title="补码和无符号数"></a>补码和无符号数</h2><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><ul><li>补码和无符号数关系<ul><li>无符号数和有符号数并列。</li><li>有符号数 的一种表示形式是 补码</li></ul></li><li>转化(位数为[w-1,0])<ul><li>补码 -&gt; 无符号<ul><li><code>T2U(x) = x + 2^w   (x&lt;0)</code></li><li><code>T2U(x) = x         (x&gt;=0)</code></li></ul></li><li>无符号 -&gt; 补码<ul><li><code>U2T(u) = u (u&lt;=TMax)</code></li><li><code>U2T(u) = u-2^w (u&gt;TMax)</code></li></ul></li></ul></li><li><img src="/2022/05/10/csapp_2_%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86_BitsBytesInteger/2022-05-18-09-28-30.png"></li><li>补码表示范围<ul><li>前提：总共有n位。位数分别是[n-1,0]。也即从0开始，最高位是n-1</li><li><code>[-2^(n-1),2^(n-1)-1];</code>（下例中就是<code>[-2^7 , 2^7-1];</code>）</li></ul></li><li>无符号数表示范围<ul><li>前提：总共有n位。位数分别是[n-1,0]。也即从0开始，最高位是n-1</li><li><code>[0,2^n-1]</code>（下例中就是<code>[0 , 2^8-1];</code>）</li></ul></li><li><strong>首位的符号位可以看作是一个带正/负号的数值位。</strong><ul><li>当首位符号位为0时，该补码形式所表示的真值就是[6,0]位的和 + 首位0；首位符号位为1时，该补码形式所表示的真值就是就是 首位-2^7 + [6,0]位的数值位之和。</li><li>补码与原码转化。原码 = ~补码+1。不用记，无所谓。求真值用上面的方法就好。</li></ul></li><li>例子：总共8位。[7,0]<ul><li>有符号数 补码形式。<code>[-2^7 , 2^7-1];</code><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>     <span class="comment">//  2^7 - 1 = 127</span></span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>     </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>     <span class="comment">//  0</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>     <span class="comment">//  -2^7 + 2^6 + 2^5 + ... + 2^0 = -1;</span></span><br><span class="line">...</span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>     <span class="comment">//  -2^7 + 1 = -127（该二进制数据对应的真值）</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>     <span class="comment">//  -2^7 = -128（该二进制数据对应的真值）</span></span><br></pre></td></tr></table></figure></li><li>无符号数。[0,255]<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>     <span class="comment">//  2^8-1=255</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span>     <span class="comment">//  254</span></span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>     <span class="comment">//  2^0 = 1;</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>     <span class="comment">//  0</span></span><br></pre></td></tr></table></figure></li></ul></li><li><strong>从min到max是个循环</strong></li><li>例子<ul><li>无符号  0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 …<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span>   <span class="number">7</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span>   <span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">1</span>   <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span>   <span class="number">4</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span>   <span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span>   <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span>   <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span>   <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li>补码  0 1 2 3 -4 -3 -2 -1 0 1 2 3…<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span>   <span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span>   <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span>   <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span>   <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span>   <span class="number">-1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span>   <span class="number">-2</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">1</span>   <span class="number">-3</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span>   <span class="number">-4</span></span><br></pre></td></tr></table></figure></li><li>有符号数（补码）的溢出：是由正变负，由负变正</li><li>无符号数的溢出：由正变0，由0变正。（无符号数的溢出就是取模）</li></ul></li></ul><ul><li>左移 导致溢出。举例有符号补码<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;  <span class="comment">//  有符号数 补码形式表示</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">33</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        cout&lt;&lt;(x&lt;&lt;i)&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">31</span>;j&gt;=<span class="number">0</span>;--j)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;(((x&lt;&lt;i)&gt;&gt;j)&amp;<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shc@shc-<span class="keyword">virtual</span>-machine:~/code/<span class="keyword">try</span>$ ./test.out</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">00000000000000000000000000000001</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">00000000000000000000000000000010</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">00000000000000000000000000000100</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">00000000000000000000000000001000</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">00000000000000000000000000010000</span></span><br><span class="line"><span class="number">32</span></span><br><span class="line"><span class="number">00000000000000000000000000100000</span></span><br><span class="line"><span class="number">64</span></span><br><span class="line"><span class="number">00000000000000000000000001000000</span></span><br><span class="line"><span class="number">128</span></span><br><span class="line"><span class="number">00000000000000000000000010000000</span></span><br><span class="line"><span class="number">256</span></span><br><span class="line"><span class="number">00000000000000000000000100000000</span></span><br><span class="line"><span class="number">512</span></span><br><span class="line"><span class="number">00000000000000000000001000000000</span></span><br><span class="line"><span class="number">1024</span></span><br><span class="line"><span class="number">00000000000000000000010000000000</span></span><br><span class="line"><span class="number">2048</span></span><br><span class="line"><span class="number">00000000000000000000100000000000</span></span><br><span class="line"><span class="number">4096</span></span><br><span class="line"><span class="number">00000000000000000001000000000000</span></span><br><span class="line"><span class="number">8192</span></span><br><span class="line"><span class="number">00000000000000000010000000000000</span></span><br><span class="line"><span class="number">16384</span></span><br><span class="line"><span class="number">00000000000000000100000000000000</span></span><br><span class="line"><span class="number">32768</span></span><br><span class="line"><span class="number">00000000000000001000000000000000</span></span><br><span class="line"><span class="number">65536</span></span><br><span class="line"><span class="number">00000000000000010000000000000000</span></span><br><span class="line"><span class="number">131072</span></span><br><span class="line"><span class="number">00000000000000100000000000000000</span></span><br><span class="line"><span class="number">262144</span></span><br><span class="line"><span class="number">00000000000001000000000000000000</span></span><br><span class="line"><span class="number">524288</span></span><br><span class="line"><span class="number">00000000000010000000000000000000</span></span><br><span class="line"><span class="number">1048576</span></span><br><span class="line"><span class="number">00000000000100000000000000000000</span></span><br><span class="line"><span class="number">2097152</span></span><br><span class="line"><span class="number">00000000001000000000000000000000</span></span><br><span class="line"><span class="number">4194304</span></span><br><span class="line"><span class="number">00000000010000000000000000000000</span></span><br><span class="line"><span class="number">8388608</span></span><br><span class="line"><span class="number">00000000100000000000000000000000</span></span><br><span class="line"><span class="number">16777216</span></span><br><span class="line"><span class="number">00000001000000000000000000000000</span></span><br><span class="line"><span class="number">335544321</span></span><br><span class="line"><span class="number">00000010000000000000000000000000</span></span><br><span class="line"><span class="number">67108864</span></span><br><span class="line"><span class="number">00000100000000000000000000000000</span></span><br><span class="line"><span class="number">134217728</span></span><br><span class="line"><span class="number">00001000000000000000000000000000</span></span><br><span class="line"><span class="number">268435456</span></span><br><span class="line"><span class="number">00010000000000000000000000000000</span></span><br><span class="line"><span class="number">536870912</span></span><br><span class="line"><span class="number">00100000000000000000000000000000</span></span><br><span class="line"><span class="number">1073741824</span></span><br><span class="line"><span class="number">01000000000000000000000000000000</span></span><br><span class="line"><span class="number">-2147483648</span></span><br><span class="line"><span class="number">10000000000000000000000000000000</span></span><br><span class="line"></span><br><span class="line">如果x是<span class="keyword">unsigned</span> <span class="keyword">int</span>的话 那么就是</span><br><span class="line"><span class="number">2147483648</span></span><br><span class="line"><span class="number">10000000000000000000000000000000</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="转化"><a href="#转化" class="headerlink" title="转化"></a>转化</h3><ul><li>有符号数与无符号数发生比较/运算时，<strong>有符号数会先被转化为无符号数</strong><ul><li>signed(two’s complement) -&gt; unsigned</li></ul></li><li>例子 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DELTA sizeof(char)</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  死循环</span></span><br><span class="line">i-<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>) 得到一个<span class="keyword">unsigned</span></span><br><span class="line"><span class="comment">// 因为sizeof 返回 size_t ，是unsigned</span></span><br><span class="line"><span class="keyword">for</span>(i=CNT;i-DELTA&gt;=<span class="number">0</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>例子。错把无符号数当作有符号数。递减得到INT_MAX<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  死循环。不会终止。</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">unsigned</span> i = <span class="number">4</span> ; i&gt;=<span class="number">0</span> ; --i )</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">00000000000000000000000000000100</span>  <span class="number">4</span></span><br><span class="line">...</span><br><span class="line"><span class="number">00000000000000000000000000000001</span>  <span class="number">1</span></span><br><span class="line"><span class="number">00000000000000000000000000000000</span>  <span class="number">0</span></span><br><span class="line"><span class="number">11111111111111111111111111111111</span>  <span class="keyword">signed</span> : <span class="number">-1</span> / <span class="keyword">unsigned</span> : <span class="number">2</span>^<span class="number">32</span><span class="number">-1</span></span><br><span class="line"><span class="number">11111111111111111111111111111110</span>  <span class="keyword">signed</span> : <span class="number">-2</span> / <span class="keyword">unsigned</span> : <span class="number">2</span>^<span class="number">32</span><span class="number">-2</span></span><br><span class="line">...</span><br><span class="line"><span class="number">10000000000000000000000000000000</span>  <span class="keyword">signed</span> : <span class="number">-2</span>^<span class="number">31</span> / <span class="keyword">unsigned</span> : <span class="number">2</span>^<span class="number">32</span></span><br><span class="line"><span class="number">01111111111111111111111111111111</span>  <span class="keyword">signed</span> : <span class="number">2</span>^<span class="number">31</span><span class="number">-1</span> / <span class="keyword">unsigned</span> : <span class="number">2</span>^<span class="number">31</span><span class="number">-1</span></span><br><span class="line"><span class="number">01111111111111111111111111111110</span>  <span class="keyword">signed</span> : <span class="number">2</span>^<span class="number">31</span><span class="number">-2</span> / <span class="keyword">unsigned</span> : <span class="number">2</span>^<span class="number">31</span><span class="number">-2</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>printf并没用使用变量的任何类型信息，只是根据%d %u %x这样的指示符来按照指示将变量底下的字节以相应形式输出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  32位</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">-1</span>;                   <span class="number">11111.</span>.<span class="number">.1111</span></span><br><span class="line"><span class="keyword">unsigned</span> u = <span class="number">2147483648</span>;      <span class="number">10000.</span>.<span class="number">.0000</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x=%u=%d\n&quot;</span>,x,x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;u=%u=%d\n&quot;</span>,u,u);</span><br><span class="line"></span><br><span class="line">x = <span class="number">4294967295</span> = <span class="number">-1</span>;</span><br><span class="line">u = <span class="number">2147836848</span> = <span class="number">-2147836848</span></span><br></pre></td></tr></table></figure></li><li><p>有符号数转无符号数对于标准的算数运算并无多大差异，但对于&lt;&gt;比较运算开输送，就会导致非直观的结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表达式                              类型             结果</span></span><br><span class="line"><span class="number">-2147483647</span><span class="number">-1</span> == <span class="number">2147836848U</span>         <span class="keyword">unsigned</span>            <span class="number">1</span></span><br><span class="line"><span class="number">-2147483647</span><span class="number">-1U</span> &lt; <span class="number">2147836847</span>          <span class="keyword">unsigned</span>            <span class="number">0</span>      </span><br><span class="line"><span class="comment">// 1000...0000 U &lt; 0111...1111  </span></span><br><span class="line"><span class="number">-2147483647</span><span class="number">-1U</span> &lt; <span class="number">-2147483647</span>         <span class="keyword">unsigned</span>            <span class="number">1</span></span><br><span class="line"><span class="comment">// 1000...0000 U &lt; 1000...0001       </span></span><br></pre></td></tr></table></figure></li></ul><h3 id="符号扩展"><a href="#符号扩展" class="headerlink" title="符号扩展"></a>符号扩展</h3><ul><li><p><strong>符号的扩展发生了什么</strong>（符号扩展在由小类型到大类型时发生）</p></li><li><p>有符号数：补码的符号扩展。</p><ul><li><strong>复制符号位</strong>：向高位拿了一个新位用作符号位，<strong>新符号位的权重是原符号位的2倍，把这个原先的符号位用作正的数值位</strong>。</li><li>这样并不改变这些数值位的总和；也即并不改变数（真值）的大小</li><li>将各个权值位相加，可得补码对应的真值。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line">    <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span>   : <span class="number">-8</span> + <span class="number">4</span> + <span class="number">2</span> = <span class="number">-2</span></span><br><span class="line">  <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span>   : <span class="number">-16</span> + <span class="number">8</span> + <span class="number">4</span> + <span class="number">2</span> = <span class="number">-2</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>无符号数：0扩展</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line">    <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span>   : <span class="number">8</span> + <span class="number">4</span> + <span class="number">2</span> = <span class="number">14</span></span><br><span class="line">  <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span>   : <span class="number">8</span> + <span class="number">4</span> + <span class="number">2</span> = <span class="number">14</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="截断"><a href="#截断" class="headerlink" title="截断"></a>截断</h3><ul><li>截断会导致数变化很大。例如补码被截断就有可能一正一负，无符号数被截断就是取模。</li><li>无符号数。直接模<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1011</span>  <span class="comment">//  8+2+1=11</span></span><br><span class="line"><span class="number">011</span>   <span class="comment">//  3 = 11%8</span></span><br></pre></td></tr></table></figure></li><li>有符号数。补码形式。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11011</span>   <span class="comment">//  -16+8+2+1=-5</span></span><br><span class="line">-&gt;</span><br><span class="line"><span class="number">1011</span>   <span class="comment">//  -8+2+1=5</span></span><br><span class="line">没变。是因为从<span class="number">1011</span>到<span class="number">11011</span>可以看作是符号位拓展。</span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="number">10011</span>   <span class="comment">//  -16+2+1=-13</span></span><br><span class="line">-&gt;</span><br><span class="line"><span class="number">0011</span>   <span class="comment">//  2+1=3</span></span><br><span class="line"><span class="number">3</span> != <span class="number">-13</span>%<span class="number">16</span></span><br></pre></td></tr></table></figure></li><li>无论溢出的那个下一个高位有什么，我们都假装看不到并舍弃。只拿低位的[n-1,0]位当作我获得的结果，编译器对这个过程也不会有任何warning</li></ul><ul><li>乘法指令（3个周期）比移位指令（1个周期）花的时间周期多</li><li>现代计算机除法仍然很慢 30个周期</li></ul><h3 id="移位"><a href="#移位" class="headerlink" title="移位"></a>移位</h3><ul><li><p>补码右移：算数移位。copy符号位</p></li><li><p>补码左移：直接移，低位补0</p></li><li><p>无符号数右移：逻辑右移。高位补0</p></li><li><p>无符号数左移：逻辑左移。低位补0</p></li><li><p>总共w位，如果右移k位，且k&gt;=w位，那么结果是:</p><ul><li>大多数机器中都是这样做：实际位移量是 k mod w。</li><li>C标准中规避了说明这种情况下如何做，因此这种行为对C程序来说没有保证。</li></ul></li><li><p>习题</p><ul><li>六进制中从8到F的最高有效位为1，记住这一点就会发现十六进制表示二进制更方便<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun1</span><span class="params">(<span class="keyword">unsigned</span> word)</span></span>&#123;</span><br><span class="line">              <span class="comment">//  逻辑左移 低位补0</span></span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">int</span>)( (word&lt;&lt;<span class="number">24</span>) &gt;&gt; <span class="number">24</span> );</span><br><span class="line">                        <span class="comment">//  逻辑右移 高位补0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun2</span><span class="params">(<span class="keyword">unsigned</span> word)</span></span>&#123;</span><br><span class="line">              <span class="comment">//  算数左移 低位补0</span></span><br><span class="line">  <span class="keyword">return</span> ( (<span class="keyword">int</span>)word&lt;&lt;<span class="number">24</span> ) &gt;&gt; <span class="number">24</span>;</span><br><span class="line">                        <span class="comment">//  算数右移 高位补x[w-1]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">w                   <span class="title">fun1</span><span class="params">(w)</span>                 <span class="title">fun2</span><span class="params">(<span class="number">2</span>)</span></span></span><br><span class="line"><span class="function">0x00000076        0x00000076              0x00000076    </span></span><br><span class="line"><span class="function">0x87654321        0x00000021              0x00000021</span></span><br><span class="line"><span class="function">0x000000c9        0x000000c9              0xffffffc9</span></span><br><span class="line"><span class="function">0xEDCBA987        0x00000087              0xffffff87</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 左移24/4=6个十六进制位：只留下最低两位十六进制位</span></span></span><br><span class="line"><span class="function"><span class="comment">// 右移24/4=6个十六进制位：逻辑移位补0，算数移位补x[w-1]</span></span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="对一个数取负"><a href="#对一个数取负" class="headerlink" title="对一个数取负"></a>对一个数取负</h3><ul><li><p><strong>对补码的所有位（包括符号位）取反 ，再 + 1</strong></p></li><li><p><strong>[-x]补 = ~[x]补 + 1</strong></p></li><li><p>例子。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x     <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span>    <span class="number">-8</span>+<span class="number">2</span>=<span class="number">-6</span></span><br><span class="line">~x    <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span>   </span><br><span class="line">~x+<span class="number">1</span>  <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span>    <span class="number">2</span>+<span class="number">4</span>=<span class="number">6</span>     </span><br></pre></td></tr></table></figure></li><li><p>很巧啊，类似，从补码转到原码/从原码转到补码。都是取反+1，不过原码&lt;-&gt;补码不涉及符号位。</p></li><li><p><strong>原码补码转化公式：[x]补 =  ~[x]原+1</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x     <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span>   <span class="number">-2</span>  这是原码  </span><br><span class="line">~x    <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line">~x+<span class="number">1</span>  <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span>   <span class="number">-8</span>+<span class="number">4</span>+<span class="number">2</span>=<span class="number">-2</span>   这是x原码对应的补码</span><br></pre></td></tr></table></figure></li><li><p>所以啊，为什么说 在程序中求 -x 就是在求 ~x+1?</p><ul><li>因为补码及其相反数的转化公式为：**[-x]补 = ~[x]补 + 1**</li><li>可不是因为原码补码的转化公式是：[x]补 =  ~[x]原+1。大一做算法题的时候还误以为是这个原因。</li></ul></li></ul><h3 id="特别的-TMin的相反数是什么？"><a href="#特别的-TMin的相反数是什么？" class="headerlink" title="特别的 TMin的相反数是什么？"></a>特别的 TMin的相反数是什么？</h3><ul><li>T Min的相反数还是 T Min</li><li>应用公式：[-x]补 = ~[x]补 + 1</li><li>假设n=4<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>   : T MAX</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>   : T MIN</span><br><span class="line"></span><br><span class="line">~ T MIN</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> </span><br><span class="line">+<span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>   = -TMIN</span><br></pre></td></tr></table></figure></li><li>所以<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  1.</span></span><br><span class="line">x &gt; y 不一定有 -x &lt; -y</span><br><span class="line">当y=T MIN时 y和-y都是最小的</span><br><span class="line"></span><br><span class="line"><span class="comment">//  2.</span></span><br><span class="line">x &gt;=<span class="number">0</span>  =&gt;   -x&lt;=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  3.</span></span><br><span class="line">x&lt;=<span class="number">0</span>  !=&gt;   -x&gt;=<span class="number">0</span></span><br><span class="line">当x=T min时，x=-x=Tmin</span><br></pre></td></tr></table></figure></li></ul><h3 id="如何编写unsigned"><a href="#如何编写unsigned" class="headerlink" title="如何编写unsigned"></a>如何编写unsigned</h3><ul><li>该用unsigned吗？<ul><li>Java等语言抹去了unsigned，只保留了补码。<ul><li>但Java中&gt;&gt;是算数右移，&gt;&gt;&gt;是逻辑右移</li></ul></li></ul></li><li>C标准并没有明确规定有符号溢出会发生什么。我们知识假设是按照补码。但严格意义上我们不能假设C标准以外的东西</li><li>提出<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> i=...;  <span class="comment">//size_t : unsigned value of word size</span></span><br><span class="line"><span class="keyword">for</span>(i=cnt<span class="number">-2</span>;i&lt;cnt;--i)</span><br><span class="line">&#123;</span><br><span class="line">  a[i]=a[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>最终：自己谨慎点吧</li></ul><h3 id="所以unsigned这么不好用，什么时候用？"><a href="#所以unsigned这么不好用，什么时候用？" class="headerlink" title="所以unsigned这么不好用，什么时候用？"></a>所以unsigned这么不好用，什么时候用？</h3><ul><li>加密算法（需要取模）</li><li>仅仅把字看作位的集合，而没有任何数学意义。</li></ul><h3 id="无符号数加法"><a href="#无符号数加法" class="headerlink" title="无符号数加法"></a>无符号数加法</h3><ul><li><p>阿贝尔群</p></li><li><p>无符号加法公式</p><ul><li>x + w位的无符号数y (写作uwy) <ul><li> = x + y  (x+y &lt; 2^w)</li><li> = x + y - 2^w  (2^w &lt;= x+y &lt; 2^w+1)</li></ul></li></ul></li><li><p>整数加法和无符号数加法关系。当x+y &gt; 2^w - 1时，和溢出<br><img src="/2022/05/10/csapp_2_%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86_BitsBytesInteger/2022-05-20-09-42-42.png"></p></li></ul><h3 id="有符号数（补码）加法"><a href="#有符号数（补码）加法" class="headerlink" title="有符号数（补码）加法"></a>有符号数（补码）加法</h3><ul><li>阿贝尔群</li><li>补码加法公式<ul><li>x + w位的补码y（写作twy）<ul><li>x + y - 2^w     （2^(w-1) &lt;= x + y）</li><li>x + y             （ -2^(w-1) &lt;= x + y &lt; 2^(w-1)）</li><li>x + y + 2^w     （ x + y &lt; -2^(w-1)）</li></ul></li></ul></li><li>整数加法和无符号数加法之间的关系。x + y &lt; 2^(w-1) 时,负溢出 ； x + y &gt; 2^(w-1)-1时,正溢出<br><img src="/2022/05/10/csapp_2_%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86_BitsBytesInteger/2022-05-20-19-46-45.png"></li></ul><h3 id="无符号乘法"><a href="#无符号乘法" class="headerlink" title="无符号乘法"></a>无符号乘法</h3><ul><li>两个w位的无符号数相乘，结果应当用2w位保存，但是c语言中无符号乘法被定义成产生w位的值，也就是说会截断低位的w位。</li><li>将一个无符号数截断为w位 ，等价于计算该值模2^w</li><li>-&gt;得到公式： x * uwy = (x*y) mod (2^w)</li></ul><h3 id="补码乘法"><a href="#补码乘法" class="headerlink" title="补码乘法"></a>补码乘法</h3><ul><li>两个w位的有符号数相乘，结果应当用2w位保存，但是c语言中有符号乘法被定义成产生w位的值，也就是说会截断低位的w位。</li><li>将一个无符号数截断为w位，相当于 先计算该值模2^w , 再把无符号数转换为补码。</li><li>-&gt;得到公式：x * twy = U2T ( (x*y) mod (2^w) )</li></ul><ul><li>补码乘法和无符号乘法的位级表示是一样的（位级等价性）</li></ul><h2 id="字长"><a href="#字长" class="headerlink" title="字长"></a><strong>字长</strong></h2><h3 id="信息存储"><a href="#信息存储" class="headerlink" title="信息存储"></a>信息存储</h3><ul><li><p>64位机器，寻址是2^64。 这是逻辑上的。实际上最大是2^47。可也正常人没钱买这么大内存。</p></li><li><p>运行程序时，程序认为他有这么大内存，实际上没有。操作系统只允许他访问能够访问的区域。</p></li><li><p>机器级程序将内存视为一个非常大的字节数组，称为<strong>虚拟内存</strong>。</p></li><li><p>内存的每一个字节都由唯一的数字来标识，称为它的地址。</p></li><li><p>所有可能地址的集合就称为<strong>虚拟地址空间</strong>。</p><ul><li>顾名思义，虚拟地址空间只是一个展现给机器级程序的概念性映像。实际的实现是将动态随机访问存储器(DRAM)、闪存、磁盘存储器、特殊硬件和操作系统软件结合起来，为程序提供一个看上去统一的字节数组。</li></ul></li><li><p>程序对象：程序数据、指令、控制信息。</p><ul><li>编译器和运行时系统是如何将存储器空间划分为更可管理的单元，来存放不同的程序对象，即程序数据、指令和控制信息。可以用各种机制来分配和管理程序不同部分的存储。这种管理完全是在虚拟地址空间里完成的。</li><li>每个程序对象可以简单的视为一个字节快，而程序本身就是一个字节序列</li></ul></li><li><p>字节顺序：</p><ul><li>几乎在所有的机器上，多字节对象被存储为连续的字节序列；<strong>对象地址</strong>为所使用字节的<strong>最小地址</strong>。<blockquote><p><img src="/2022/05/10/csapp_2_%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86_BitsBytesInteger/2022-05-11-20-42-03.png"></p></blockquote></li><li>大端机器较少，x86机器都是小端，arm处理器既可处理大端也可处理小端，但一般都是小端。</li><li>基本上只有互联网是唯一一个有大端序的地方。当向网络发送数据包时，会以大端序接收<blockquote><p><img src="/2022/05/10/csapp_2_%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86_BitsBytesInteger/2022-05-11-21-01-15.png"></p></blockquote></li></ul></li><li><p><strong>按字节，将信息以16进制打印</strong>（这不是我昨天刚写过类似的吗哈哈哈）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>* byte_pointer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_bytes</span><span class="params">(byte_pointer start,<span class="keyword">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> i;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\t0x%.2x\n&quot;</span>,start+i,start[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">9</span>;</span><br><span class="line">    <span class="built_in">show_bytes</span>((byte_pointer)&amp;a,<span class="keyword">sizeof</span> a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shc@shc-<span class="keyword">virtual</span>-machine:~/code/<span class="keyword">try</span>$ ./a.out </span><br><span class="line"><span class="number">0x7ffc93b80294</span>  <span class="number">0x09</span></span><br><span class="line"><span class="number">0x7ffc93b80295</span>  <span class="number">0x00</span></span><br><span class="line"><span class="number">0x7ffc93b80296</span>  <span class="number">0x00</span></span><br><span class="line"><span class="number">0x7ffc93b80297</span>  <span class="number">0x00</span></span><br></pre></td></tr></table></figure></li><li><p>单位转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">KB MB GB TB</span><br><span class="line">K、M、G、T是数字大小的进制，单位(<span class="number">1</span>)</span><br><span class="line">B是物理意义上的单位，指Bytes</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>^<span class="number">10</span> = <span class="number">1024</span> ==<span class="number">10</span>^<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>KB = <span class="number">1024B</span> = <span class="number">2</span>^<span class="number">10</span> Bytes;</span><br><span class="line"><span class="number">1</span>MB = <span class="number">1024</span>KB = <span class="number">1024</span>*<span class="number">1024</span>KB = <span class="number">2</span>^<span class="number">20</span> Bytes</span><br><span class="line"><span class="number">1</span>GB = <span class="number">1024</span>MB = <span class="number">2</span>^<span class="number">30</span> Bytes = <span class="number">10</span>^<span class="number">9</span> Bytes</span><br><span class="line"><span class="number">1</span>TB = <span class="number">1024</span>GB</span><br><span class="line"><span class="number">1</span>PB = <span class="number">1024</span>TB = <span class="number">1125899906842624</span> Bytes</span><br><span class="line"><span class="number">1</span>EB = <span class="number">1024</span>PB = <span class="number">1152921504606846976</span> Bytes</span><br><span class="line"><span class="number">1</span>MM = <span class="number">2</span>^<span class="number">20</span> * <span class="number">2</span>^<span class="number">20</span> = <span class="number">2</span>^<span class="number">40</span> Bytes = <span class="number">10</span>^<span class="number">12</span> Bytes</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>^<span class="number">47</span> 估算：</span><br><span class="line"><span class="number">2</span>^<span class="number">40</span> * <span class="number">2</span>^<span class="number">7</span> = <span class="number">128</span> * <span class="number">10</span>^<span class="number">12</span> Bytes = <span class="number">128</span> MM Bytes = <span class="number">128</span>*<span class="number">10</span>^<span class="number">3</span> G Bytes</span><br></pre></td></tr></table></figure></li></ul><h3 id="什么是字长"><a href="#什么是字长" class="headerlink" title="什么是字长"></a><strong>什么是字长</strong></h3><ul><li><p>每台计算机都有一个字长，<strong>指明指针数据的标称大小</strong>。因为虚拟地址是以这样的一个字来编码的，所有字长决定的最重要的系统参数就是<strong>虚拟地址空间的最大大小</strong>。也就是说，对于一个字长为w位的机器而言，虚拟地址的范围是[0,2^w-1]。程序最多访问2 ^w 个字节。（一个地址背后是1Bytes、8bits的存储空间）</p></li><li><p>大多数64位机器也可以运行32位机器编译的程序，这是一种向后兼容。我们将程序称为“32位程序”或“64位程序”时，区别在于该程序是如何编译的，而不是其运行的机器类型。</p><ul><li>生成32位程序，该程序可以在32位/64位机器上运行<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -m32 prog.c</span><br></pre></td></tr></table></figure></li><li>生成64位程序，只能在64位机器上运行<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -m64 prog.c</span><br></pre></td></tr></table></figure></li></ul></li><li><p>困扰我好久了！这些话解决了大半。</p></li><li><p>Whatever the largest number is that or the range that sort of signifies how big a pointer is in this language , Or hardware wise the largest sort of chunkof hardware for which.<br>无论最大数是多少，或者指针表的范围是多少，或者硬件的一个chunk块是多大<br>There’s a standard support for storing it for arithmetic operations and so forth<br>有一个标准确定如何存储值和进行算数运算等<br>So when we say it’s a 64-bit machine<br>所以当我们说他是64位机器时<br>What we mean is that it regular and routinely manipulate 64-bit and operations<br>意思是他惯常处理64位值和算数运算<br>And also it has a pointer or the values of addresses are 64-bit<br>并且他的指针和地址的值是64位<br>Even if for right now only 47 of those bits are usable , it’s still considered a 64-bit machine<br>即便只有47位是有效的，我们也认为他是64位机器</p></li><li><p>我们的机器有个奇怪的特性，当我们用gcc作为编译器时，我们可以指定是32位还是64位编译，并且32位和64位会生成两种不同类型的代码。但就目前而言，重点是硬件本身并不一定决定字长的大小，it’s a combination of the hardware and the complier that determines，是由硬件和编译器一起决定的。</p><ul><li>And that code can be run on the point is a 64-bit machine，and can insert of a backward compatibiltiy a style also excutes 32-bit code</li></ul></li><li><p>And we also saw one of the other feature is<br>并且我们可以看到另一个特性<br>Even though it’s a 64-bit word size machine ,  the data type int without any other qualifiers<br>即使它是个64位机器：对于数据类型int来说，如果没有任何其他的修饰符<br>it is jusy 32-bit<br>它就是32位的<br>so the sort of this mixture of how big things are<br>所以这种数据类型大小的定义是混合的</p></li><li><p>So when people just say word or word size ，<br>所以当人们说字或者字长时<br>let’s must say give a precise definition that’s not a very meaningful term<br>我们必须说。从精确的定义来说，这不是个有意义的术语/措辞<br>And we’ll sort of throw  it around when we mean sort of generic chunk of bits<br>我们说他的时候一般是泛指一个比特块，<br>without trying to assume that it has a particular number of bits to it<br>而不去假设他具有特定数量的bit</p></li></ul><ul><li>64bit的标准int仍然是32位，64位与32位相比，主要特征是<strong>64bit的指针是64位的</strong>，或者说是8字节的。<ul><li><blockquote><p><img src="/2022/05/10/csapp_2_%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86_BitsBytesInteger/2022-05-11-20-45-53.png"></p></blockquote></li></ul></li></ul><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><ul><li><blockquote><p><img src="/2022/05/10/csapp_2_%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86_BitsBytesInteger/2022-05-11-21-44-55.png"></p></blockquote></li><li><p>p75 <strong>经典</strong></p><ul><li>记住 <strong>无符号数 和 补码的位级表示相同！！哪怕经过加减乘除计算之后，也仍是这样。</strong>（位级别相同的两组补码和无符号数，各自经历相同的加减乘除计算之后，<strong>得到的结果的位级表示仍然相同</strong>）</li><li>记住 -Tmin = Tmin</li><li>记住第a位的数 在 左(右)移b位后，会移动到a+(-)b位上。（数的位数范围[w-1,0]）<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 已知</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="built_in">foo</span>();</span><br><span class="line"><span class="keyword">int</span> y = <span class="built_in">bar</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> ux = x;</span><br><span class="line"><span class="keyword">unsigned</span> uy = y;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(x&gt;<span class="number">0</span>) || (x<span class="number">-1</span>&lt;<span class="number">0</span>)      </span><br><span class="line"><span class="comment">//  FALSE</span></span><br><span class="line">x = Tmin = <span class="number">-2147483648</span> </span><br><span class="line">则 x&lt;<span class="number">0</span> , x<span class="number">-1</span>&gt;<span class="number">0</span></span><br><span class="line"></span><br><span class="line">(x&amp;<span class="number">7</span>)!=<span class="number">7</span> || (x&lt;&lt;<span class="number">29</span> &lt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">//  TRUE</span></span><br><span class="line"><span class="comment">//  x&amp;7 != 7 ok</span></span><br><span class="line"><span class="comment">//  x&amp;7 == 7 则 x = aaaa...0111</span></span><br><span class="line"><span class="comment">//  则 x&lt;&lt;29 = 111000...0001</span></span><br><span class="line"></span><br><span class="line">(x*x) &gt;= <span class="number">0</span></span><br><span class="line"><span class="comment">//  FALSE</span></span><br><span class="line">x = <span class="number">0xffff</span></span><br><span class="line"><span class="number">0xffff</span> * <span class="number">0xffff</span>  = <span class="number">-131071</span></span><br><span class="line"></span><br><span class="line">x&lt;<span class="number">0</span> || -x&lt;=<span class="number">0</span></span><br><span class="line"><span class="comment">//  TRUE</span></span><br><span class="line">x = Tmin = <span class="number">-2147483648</span></span><br><span class="line">-x = Tmin &lt;=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x&gt;<span class="number">0</span> || -x&gt;=<span class="number">0</span></span><br><span class="line"><span class="comment">// FALSE</span></span><br><span class="line">x = Tmin = <span class="number">-2147483648</span></span><br><span class="line">-x = Tmin &lt;=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">x+y == uy + ux</span><br><span class="line"><span class="comment">//  TRUE</span></span><br><span class="line">补码和无符号数的位级行为相同</span><br><span class="line">也就是说 x + y 与 ux + uy 的位级表示相同</span><br><span class="line">且 在 == 比较时 会将补码转化成无符号数</span><br><span class="line">故 x + y == ux + uy</span><br><span class="line"></span><br><span class="line">x*(~y) + uy*ux == -x</span><br><span class="line"><span class="comment">// TRUE</span></span><br><span class="line">~y = -y<span class="number">-1</span>;</span><br><span class="line">x*(-y<span class="number">-1</span>) + uy*ux = -xy -x + uy * ux = -x</span><br><span class="line">补码和无符号数的位级行为相同</span><br><span class="line">也就是说 uy*ux 与 -xy的位级表示相同 。（也许完整的乘积的位级表示可能不同，但是按照C语言标准，截断之后的乘积的位级表示是相同的）（C标准规定截断位w位）</span><br><span class="line">因此 -xy可以和uy*ux相抵消</span><br><span class="line">故 剩下-x</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><ul><li>csapp p59</li><li>习题<ul><li>当length = 0时，会访问非法内存。<ul><li>length = 0，length - 1 = -1 -&gt; UMAX。</li><li>i先转化成unsigned，然后从0增至UMAX</li></ul></li><li>改正：<ul><li>length 类型改为 int。（即便length想要&gt;INT_MAX也没关系，想想就知道了）</li><li>i &lt;= length - 1 ——&gt; i &lt; length<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">sum_eles</span><span class="params">(<span class="keyword">float</span> a[],<span class="keyword">unsigned</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">float</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;=length<span class="number">-1</span> ; ++i)</span><br><span class="line">    result += a[i];</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h1 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h1><h2 id="IEEE浮点数表示（比唐书说得清楚些）"><a href="#IEEE浮点数表示（比唐书说得清楚些）" class="headerlink" title="IEEE浮点数表示（比唐书说得清楚些）"></a>IEEE浮点数表示（比唐书说得清楚些）</h2><h3 id="基本规则说明"><a href="#基本规则说明" class="headerlink" title="基本规则说明"></a>基本规则说明</h3><ul><li>IEEE浮点标准用 V = (-1)^s * M * 2^E来表示一个数。<ul><li>符号（sign）：1负0正</li><li>尾数（significand）：M为一二进制小数。范围是 1<del>2-无穷小 （2^(-n)） 或者 0</del>1 - 无穷小 （2^(-n)）</li><li>阶码（exponent）：E的作用是对浮点数加权</li></ul></li><li>将浮点数的位表示为三个字段，分别对这三个值进行编码：<ul><li>一个单独的符号位s 直接编码符号s</li><li>k位的阶码字段 <code>exp=ek-1...e1e0</code> 编码阶码E</li><li>n位的小数字段<code>frac=fn-1...f1f0</code>编码尾数M，但是编码出来的值也依赖于阶码字段的值是否等于0</li></ul></li><li>图示<ul><li><img src="/2022/05/10/csapp_2_%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86_BitsBytesInteger/2022-05-22-12-34-53.png"></li><li>阶码的值决定了一个浮点数是否是规格化的<img src="/2022/05/10/csapp_2_%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86_BitsBytesInteger/2022-05-22-12-35-18.png"></li></ul></li></ul><h3 id="是否规格化（三种情况）"><a href="#是否规格化（三种情况）" class="headerlink" title="是否规格化（三种情况）"></a>是否规格化（三种情况）</h3><ul><li>规格化的值：exp的位模式 既不全为0，也不全为1。<ul><li>E = e-Bias。其中e是无符号数。偏置值Bias=2^(k-1) - 1。<ul><li>因此，指数的取值范围：单精度 [-126,127] ；双精度 [-1022,+1023]</li></ul></li><li>M = 1+f。称为隐含的以1开头的表示。<ul><li>其中f属于[0,1)，f的二进制表示为<code>0.fn-1...f1f0</code>（即小数点在最高位有效位的左边）。因此M可以看为二进制：<code>1.fn-1...f1f0</code>。（可以通过调整E，使得M属于[1,2)。通过M=1+f，使得f不必显示写出那个1。这样，就获得了一个额外的精度位）</li></ul></li></ul></li><li>非规格化的值：exp的位模式全部为0<ul><li>E = 1-Bias</li><li>M = f。即小数字段的值，不包含隐含的开头的1。也即f的值的小数点左侧实际上为0。</li><li>非规格化数用途<ul><li>提供了一种表示数值0的方法<ul><li>+0.0：位模式全部为0。s = 0，exp = 0，frac = 0.</li><li>-0.0：s=1，exp=0，frac=0.</li></ul></li><li>还可用于表示那些非常接近0.0的数</li></ul></li></ul></li><li>特殊值：exp的位模式全部为1.<ul><li>s=0，frac=0，表示正无穷</li><li>s=1，frac=0，表示负无穷</li><li>frac!=0时，其结果表示为 NaN （Not a number）。可用作表示未初始化的数值，或计算结果不能是实数或者无穷。</li></ul></li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul><li><p>假设6位浮点格式（3位阶码2位尾数）。可表示的数不是均匀分布的，越靠近远点越稠密<br><img src="/2022/05/10/csapp_2_%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86_BitsBytesInteger/2022-05-22-13-09-51.png"></p></li><li><p>8位浮点格式的非负值示例<br><img src="/2022/05/10/csapp_2_%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86_BitsBytesInteger/2022-05-22-12-25-43.png"></p></li><li><p>最靠近0：非规格化数。</p><ul><li>E = 1-7 = -6 。权 = 2^E = 1/64</li><li><code>f = 0，1/8，...，7/8</code></li><li>所以V [0,1/64 * 7/8]。（非连续）</li><li>最小为0</li></ul></li><li><p>规格化数</p><ul><li>最小规格化数：<ul><li>E = 1-7 = -6</li><li><code>frac = 0,1/8...7/8 -&gt; M = 1+f = 1...15/8</code></li><li>所以V [8/512 , 15/512]</li><li>最小为8/512。</li></ul></li><li>逐渐增大</li><li>最大规格化数<ul><li>E = 7 </li><li><code>frac = 0,1/8...7/8 -&gt; M = 1+f = 1...15/8</code></li><li>所以，最大规格化值 V = 15/8*2^7 = 240</li></ul></li></ul></li><li><p>无穷大</p><ul><li>超过最大规格化数，溢出到正无穷</li></ul></li><li><p>k位阶码，n位小数的一般规律</p><ul><li><img src="/2022/05/10/csapp_2_%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86_BitsBytesInteger/2022-05-22-15-09-28.png"></li><li><img src="/2022/05/10/csapp_2_%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86_BitsBytesInteger/2022-05-22-15-39-17.png"></li></ul></li></ul><ul><li>整数转化成IEEE规格化表示<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12345</span></span><br><span class="line">二进制：<span class="number">11000000111001</span></span><br><span class="line"><span class="number">12345</span> = (<span class="number">1.1000000111001</span>)<span class="number">2</span> * <span class="number">2</span>^<span class="number">13</span></span><br><span class="line">为了用IEEE单精度形式编码，</span><br><span class="line">构造小数字段：应该丢弃开头的<span class="number">1</span>（作为隐含的<span class="number">1</span>），并在末尾+<span class="number">10</span>个<span class="number">0</span>，来构造小数字段：<span class="number">10000001110010000000000</span></span><br><span class="line">构造阶码字段：<span class="number">13</span> + bias（<span class="number">2</span>^(<span class="number">8</span><span class="number">-1</span>)<span class="number">-1</span> = <span class="number">127</span>） = <span class="number">140</span>。二进制表示为 <span class="number">10001100</span></span><br><span class="line">再加上符号位<span class="number">0</span></span><br><span class="line">得到二进制的浮点数表示</span><br><span class="line">s   exp       frac</span><br><span class="line"><span class="number">0</span> <span class="number">10001100</span> <span class="number">10000001110010000000000</span></span><br></pre></td></tr></table></figure></li><li>比较<ul><li>12345整形（0x00003039）：</li><li>12345.0单精度浮点数：（0x4640E400）：</li><li><img src="/2022/05/10/csapp_2_%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86_BitsBytesInteger/2022-05-22-15-49-44.png"></li></ul></li></ul><h2 id="舍入"><a href="#舍入" class="headerlink" title="舍入"></a>舍入</h2><ul><li>向上舍入</li><li>向下舍入</li><li>向0舍入</li><li><strong>向偶数舍入</strong><ul><li>向偶数舍入原则有2个</li><li>当要舍入到的位的 之后的位 不等于中间值（半值）时，向最靠近的数舍入。也即&lt;半值就向下舍入，大于半值就向上舍入</li><li>当要舍入到的位的 之后的位 等于中间值（半值）时，向偶数舍入<ul><li>如果要舍入到的位，现在是偶数，那么向下舍入，直接舍去后面的位，原先要舍入到的位的数就是舍入的结果。</li><li>如果要舍入到的位，现在是奇数，那么向上舍入。</li></ul></li><li>例子：舍入到小数点后一位<ul><li>10.010(2) -&gt; 10.0 <ul><li>因为 小数点右边一位的0之后的10 = 0.25 = 0.5/2 ，也即等于半值，所以向偶数舍入，又因小数点后一位为偶数0，所以结果为10.0</li></ul></li><li>10.011(2) -&gt; 10.1<ul><li>因为 0之后的11 = 0.375 &gt; 0.5/2 ，也即&gt;半值，所以向上舍入，故10.1</li></ul></li><li>10.110(2) -&gt; 11.0<ul><li>因为 小数点右边一位的1之后的10 = 0.25 = 0.5/2 ，也即等于半值，所以向偶数舍入，又因小数点后一位为偶数1，所以(+1向上舍入)结果为11.0</li></ul></li><li>11.001(2) -&gt; 11.0<ul><li>因为 0之后的01 = 0.125 &lt; 0.5/2 ，也即&lt;半值，所以向下舍入，故10.0</li></ul></li></ul></li></ul></li></ul><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><ul><li><p>不是阿贝尔群</p><ul><li>具备交换律 但 不具备 结合律</li></ul></li><li><p>赶作业去了</p></li><li><p><a href="https://zh.m.wikipedia.org/zh-hans/%E9%98%BF%E8%B4%9D%E5%B0%94%E7%BE%A4">阿贝尔群</a>（近世代数里讲过）<br><img src="/2022/05/10/csapp_2_%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86_BitsBytesInteger/2022-05-23-09-14-31.png"></p></li></ul><h2 id="习题-1"><a href="#习题-1" class="headerlink" title="习题"></a>习题</h2><p><img src="/2022/05/10/csapp_2_%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86_BitsBytesInteger/2022-05-23-09-11-15.png"></p><h1 id="摘要（csapp）"><a href="#摘要（csapp）" class="headerlink" title="摘要（csapp）"></a>摘要（csapp）</h1><p><img src="/2022/05/10/csapp_2_%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86_BitsBytesInteger/2022-05-23-09-17-51.png"><br><img src="/2022/05/10/csapp_2_%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86_BitsBytesInteger/2022-05-23-09-17-58.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;整形&quot;&gt;&lt;a href=&quot;#整形&quot; class=&quot;headerlink&quot; title=&quot;整形&quot;&gt;&lt;/a&gt;整形&lt;/h1&gt;&lt;h2 id=&quot;补码和无符号数&quot;&gt;&lt;a href=&quot;#补码和无符号数&quot; class=&quot;headerlink&quot; title=&quot;补码和无符号数&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="CSAPP" scheme="http://example.com/categories/CSAPP/"/>
    
    
    <category term="计算机基础" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="CSAPP" scheme="http://example.com/tags/CSAPP/"/>
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>c++_文件操作</title>
    <link href="http://example.com/2022/05/09/c++_%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2022/05/09/c++_%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</id>
    <published>2022-05-09T10:49:11.000Z</published>
    <updated>2022-05-28T14:19:06.964Z</updated>
    
    <content type="html"><![CDATA[<ul><li>感想：c++的流感觉不如linux 系统级的API。好难受。<h1 id="c-流的文件操作（感觉不好用）"><a href="#c-流的文件操作（感觉不好用）" class="headerlink" title="c++ 流的文件操作（感觉不好用）"></a>c++ 流的文件操作（感觉不好用）</h1><h2 id="输出十六进制"><a href="#输出十六进制" class="headerlink" title="输出十六进制"></a>输出十六进制</h2><h3 id="各类大小"><a href="#各类大小" class="headerlink" title="各类大小"></a>各类大小</h3></li><li>一个字节8bit 一个字节对应两个十六进制</li><li>各类大小<ul><li>大小无区别；区别仅在首位是否为符号位。</li><li>unsigned char：1 bytes</li><li>char：1 bytes</li><li>int：4 bytes</li><li>unsigned int：4 bytes</li></ul></li><li>cout&lt;&lt;变量x。<ul><li>就是根据变量x的类别，按照他的输出格式符来将二进制数据转化成输出的数据</li></ul></li><li>cout&lt;&lt;hex&lt;&lt;x&lt;&lt;endl;<ul><li>前提x必须是整形。不能是char。如果x是char，还要再进行几步强转，有些麻烦。</li></ul></li><li>printf(“%02x”,c); <ul><li><strong>将变量c的底层补码形式的二进制数据以十六进制输出</strong>，（我喜欢，够直接），无论c的类型是什么，都可以输出（因为在输出时会发生<strong>类型强转</strong>，转为int）。<ul><li>举例：平常的printf(“%d\n”,x); （x为int）。根据x的底层的二进制数据，输出表示的相应的十进制数据。（就是把2进制转换成十进制）</li><li>举例：平常的printf(“%c\n”,x); （x为char）。根据x的底层的二进制数据，输出表示的相应字符。（根据ASCII表，一个二进制数据对应一个相应的字符）</li></ul></li><li>02：至少输出两位。少于两位用0补位。<h3 id="ffff问题-符号位扩展"><a href="#ffff问题-符号位扩展" class="headerlink" title="ffff问题 符号位扩展"></a><strong>ffff问题 符号位扩展</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> c = <span class="number">128</span>;  <span class="comment">//  10000000</span></span><br><span class="line">    <span class="keyword">int</span> x = c;              <span class="comment">//  00000000000000000000000010000000</span></span><br><span class="line">    <span class="keyword">char</span> d = <span class="number">128</span>;           <span class="comment">//  10000000</span></span><br><span class="line">    <span class="keyword">int</span> y = d;              <span class="comment">//  11111111111111111111111110000000</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c %02x\n&quot;</span>,c,c); <span class="comment">//  至少2个十六进制位 不够用0补    cout&lt;&lt;c 就是 printf(&quot;%c&quot;,c) cout&lt;&lt;c的输出取决于c的类型。是char就按照char %c输出；是int就按照int %d输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %08x\n&quot;</span>,x,x); <span class="comment">//  至少8个十六进制位 不够用0补    cout&lt;&lt;x 就是 printf(&quot;%d&quot;,x)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %02x\n&quot;</span>,d,d); <span class="comment">//  至少2个十六进制位 不够用0补</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %08x\n&quot;</span>,y,y); <span class="comment">//  至少8个十六进制位 不够用0补</span></span><br><span class="line"></span><br><span class="line">$   € <span class="number">80</span>            </span><br><span class="line">    <span class="number">128</span> <span class="number">0000</span> <span class="number">0080</span>       <span class="comment">//  一般来讲前面多余的0会舍去。但是我们要求了%08x</span></span><br><span class="line">    <span class="number">-128</span> ffff ff80</span><br><span class="line">    <span class="number">-128</span> ffff ff80</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>为什么会有很多fffff</strong>？</li><li><strong>关键点1</strong>：<ul><li>当<strong>有符号类型向更大类型转换</strong>时，如果首位为1，则将前面全部补1；如果首位为0，那么将前面全部补0。也即，通过扩展首位符号位，将符号保存下来。</li><li>当<strong>无符号类型向更大类型转换</strong>时，只需简单地在开头补0，称为0扩展</li></ul></li><li><strong>关键点2</strong><ul><li>学过计组的都知道，计算机内部用采用补码表示形式。我们在程序中把一个数拆成一个个bit输出时，就是输出这个变量的真值在计算机内部的补码表示形式。如下<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> q = <span class="number">-9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">31</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;((q&gt;&gt;i)&amp;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">$ <span class="number">11111111111111111111111111110111</span></span><br><span class="line">这就是<span class="number">-9</span>的补码表示形式，也就是说<span class="number">-9</span>在计算机内部的存储的二进制数据就是这些。</span><br><span class="line">为了方便愚蠢的人类阅读，可以将其转为原码：就是取反+<span class="number">1.</span></span><br><span class="line">得到原码：<span class="number">1000000000000000000000001000</span>。也是我们预知的<span class="number">-9</span>。</span><br></pre></td></tr></table></figure></li></ul></li><li>在printf(“%02x”)时，也即在输出十六进制时，会首先将要输出的变量转化为int</li><li><strong>问题解释</strong><ul><li>所以在本例中<ul><li>c输出的是80，因为printf(“%x”)，会发生从unsigned char转到int，此时发生的是0扩展，补0而非f。int本为8位十六进制，但是因为前面都是0，被省略。</li><li>x输出是128 0000 0080。因为由c到x的符号扩展为0扩展。从二进制和十六进制都可以看出，没有多出fffff。</li><li>d输出的是-128 ffff fff80。因为printf(“%x”)，会发生从char转到int，此时发生的是0扩展，由于首位符号位为1，所以扩展补1而非0。呈现为十六进制就是很多f。f不能省略。</li><li>y输出是-128 ffff fff80。因为由d到y的符号扩展为有符号扩展。从二进制和十六进制都可以看出，二进制前面补了很多1，也就是十六进制多出fffff。</li></ul></li></ul></li><li>查看cxdy二进制  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">c</span><br><span class="line"><span class="number">10000000</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">7</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;((c&gt;&gt;i)&amp;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">x</span><br><span class="line"><span class="number">00000000000000000000000010000000</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">31</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;((x&gt;&gt;i)&amp;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">d</span><br><span class="line"><span class="number">10000000</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">7</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;((d&gt;&gt;i)&amp;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">y</span><br><span class="line"><span class="number">11111111111111111111111110000000</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">31</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;((y&gt;&gt;i)&amp;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br></pre></td></tr></table></figure></li></ul><h2 id="从文件中读取一定字节并以十六进制输出"><a href="#从文件中读取一定字节并以十六进制输出" class="headerlink" title="从文件中读取一定字节并以十六进制输出"></a>从文件中读取<strong>一定字节</strong>并以十六进制输出</h2><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul><li>read</li><li>从一个文件中读取n个字节。并以<strong>十六进制输出底层二进制信息</strong>。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fileRead</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">fileRead</span>(<span class="keyword">const</span> string&amp; fileName)</span><br><span class="line">    &#123;</span><br><span class="line">        ifs.<span class="built_in">open</span>(fileName,ios::binary|ios::in);</span><br><span class="line">        <span class="keyword">if</span>(!ifs)&#123;</span><br><span class="line">            ifs.<span class="built_in">close</span>();</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">invalid_argument</span>(<span class="string">&quot;file not found&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fileRead&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> fileRead&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="built_in">fileRead</span>(<span class="keyword">const</span> fileRead&amp; ) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">readAsHexFromBegin</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> *ptr = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[len];</span><br><span class="line">        ifs.<span class="built_in">seekg</span>(<span class="number">0</span>,ios::beg);</span><br><span class="line">        ifs.<span class="built_in">read</span>((<span class="keyword">char</span>*)ptr,len);</span><br><span class="line">        for_each(ptr,ptr+len,[](<span class="keyword">unsigned</span> <span class="keyword">char</span> x)-&gt;<span class="keyword">void</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>,x);</span><br><span class="line">        &#125;);</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">delete</span> ptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">readAsHexFromEnd</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> *ptr = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[len];</span><br><span class="line">        ifs.<span class="built_in">seekg</span>(-len,ios::end);</span><br><span class="line">        ifs.<span class="built_in">read</span>((<span class="keyword">char</span>*)ptr,len);</span><br><span class="line">        for_each(ptr,ptr+len,[](<span class="keyword">unsigned</span> <span class="keyword">char</span> x)-&gt;<span class="keyword">void</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>,x);</span><br><span class="line">        &#125;);</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">delete</span> ptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ifs.<span class="built_in">seekg</span>(<span class="number">0</span>,ios::end);</span><br><span class="line">        <span class="keyword">int</span> len = ifs.<span class="built_in">tellg</span>();</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">fileRead</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        ifs.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ifstream ifs;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">fileRead <span class="title">fr</span><span class="params">(<span class="string">&quot;../task01.png&quot;</span>)</span></span>;</span><br><span class="line">    cout&lt;&lt;fr.<span class="built_in">getSize</span>()&lt;&lt;<span class="string">&quot; Bytes&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;The first 60 bytes&quot;</span>&lt;&lt;endl;</span><br><span class="line">    fr.<span class="built_in">readAsHexFromBegin</span>(<span class="number">60</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;The last 60 bytes&quot;</span>&lt;&lt;endl;</span><br><span class="line">    fr.<span class="built_in">readAsHexFromEnd</span>(<span class="number">60</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><blockquote><p><img src="/2022/05/09/c++_%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/2022-05-09-22-43-51.png"><br><img src="/2022/05/09/c++_%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/2022-05-09-22-44-01.png"></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">556002</span> Bytes</span><br><span class="line">The first <span class="number">60</span> bytes</span><br><span class="line"><span class="number">89</span> <span class="number">50</span> <span class="number">4</span>e <span class="number">47</span> <span class="number">0</span>d <span class="number">0</span>a <span class="number">1</span>a <span class="number">0</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">0</span>d <span class="number">49</span> <span class="number">48</span> <span class="number">44</span> <span class="number">52</span> <span class="number">00</span> <span class="number">00</span> <span class="number">04</span> <span class="number">38</span> <span class="number">00</span> <span class="number">00</span> <span class="number">05</span> f7 <span class="number">08</span> <span class="number">06</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> aa d9 cb <span class="number">5</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">04</span> <span class="number">67</span> <span class="number">41</span> <span class="number">4</span>d</span><br><span class="line"><span class="number">41</span> <span class="number">00</span> <span class="number">00</span> b1 <span class="number">8f</span> <span class="number">0b</span> fc <span class="number">61</span> <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">20</span> <span class="number">63</span> <span class="number">48</span> <span class="number">52</span> <span class="number">4</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">7</span>a</span><br><span class="line">The last <span class="number">60</span> bytes</span><br><span class="line"><span class="number">3</span>a <span class="number">71</span> <span class="number">85</span> <span class="number">3</span>c d4 <span class="number">8</span>a c6 a0 f8 eb <span class="number">4</span>d <span class="number">82</span> <span class="number">83</span> db cb <span class="number">38</span> <span class="number">68</span> <span class="number">44</span> <span class="number">9f</span> c3 ba <span class="number">22</span> a5 <span class="number">90</span> d6 <span class="number">1</span>c <span class="number">2b</span> <span class="number">50</span> d5 <span class="number">44</span> <span class="number">27</span> d6 <span class="number">33</span> d4 <span class="number">30</span> a8 <span class="number">9</span>d bd fe <span class="number">02</span></span><br><span class="line"><span class="number">36</span> <span class="number">83</span> a3 c8 <span class="number">10</span> <span class="number">57</span> <span class="number">8</span>c <span class="number">76</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">49</span> <span class="number">45</span> <span class="number">4</span>e <span class="number">44</span> ae <span class="number">42</span> <span class="number">60</span> <span class="number">82</span></span><br></pre></td></tr></table></figure><h3 id="极简-get-不用类型转换。直接取得二进制"><a href="#极简-get-不用类型转换。直接取得二进制" class="headerlink" title="极简 get() 不用类型转换。直接取得二进制"></a><strong>极简</strong> get() 不用类型转换。直接取得二进制</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;../task01.png&quot;</span>,std::ios::binary|std::ios::in)</span></span>;</span><br><span class="line">    ifs.<span class="built_in">seekg</span>(<span class="number">0</span>,ios::beg);</span><br><span class="line">    <span class="comment">//  f一个字节一个字节的走</span></span><br><span class="line">    <span class="comment">//  f.get(): 返回一个字节的二进制内容，然后指针向后移动一个字节。</span></span><br><span class="line">    function&lt;<span class="built_in"><span class="keyword">void</span></span>(ifstream&amp;)&gt; _print = [](ifstream&amp; f)-&gt;<span class="keyword">void</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">64</span>&amp;&amp;!f.<span class="built_in">eof</span>();++i)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>,f.<span class="built_in">get</span>());    <span class="comment">//  无需类型转换。f.get()读出来的就是一个字节里的内容！！！！</span></span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;;</span><br><span class="line">    _print(ifs);</span><br><span class="line"></span><br><span class="line">    ifs.<span class="built_in">seekg</span>(<span class="number">-64</span>,ios::end);</span><br><span class="line">    _print(ifs);</span><br><span class="line"></span><br><span class="line"><span class="number">89</span> <span class="number">50</span> <span class="number">4</span>e <span class="number">47</span> <span class="number">0</span>d <span class="number">0</span>a <span class="number">1</span>a <span class="number">0</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">0</span>d <span class="number">49</span> <span class="number">48</span> <span class="number">44</span> <span class="number">52</span> <span class="number">00</span> <span class="number">00</span> <span class="number">04</span> <span class="number">38</span> <span class="number">00</span> <span class="number">00</span> <span class="number">05</span> f7 <span class="number">08</span> <span class="number">06</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> aa d9 cb <span class="number">5</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">04</span> <span class="number">67</span> <span class="number">41</span> <span class="number">4</span>d</span><br><span class="line"><span class="number">41</span> <span class="number">00</span> <span class="number">00</span> b1 <span class="number">8f</span> <span class="number">0b</span> fc <span class="number">61</span> <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">20</span> <span class="number">63</span> <span class="number">48</span> <span class="number">52</span> <span class="number">4</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">7</span>a <span class="number">26</span> <span class="number">00</span> <span class="number">00</span> <span class="number">80</span></span><br><span class="line">d1 <span class="number">99</span> d6 <span class="number">13</span> <span class="number">3</span>a <span class="number">71</span> <span class="number">85</span> <span class="number">3</span>c d4 <span class="number">8</span>a c6 a0 f8 eb <span class="number">4</span>d <span class="number">82</span> <span class="number">83</span> db cb <span class="number">38</span> <span class="number">68</span> <span class="number">44</span> <span class="number">9f</span> c3 ba <span class="number">22</span> a5 <span class="number">90</span> d6 <span class="number">1</span>c <span class="number">2b</span> <span class="number">50</span> d5 <span class="number">44</span> <span class="number">27</span> d6 <span class="number">33</span> d4 <span class="number">30</span> a8</span><br><span class="line"><span class="number">9</span>d bd fe <span class="number">02</span> <span class="number">36</span> <span class="number">83</span> a3 c8 <span class="number">10</span> <span class="number">57</span> <span class="number">8</span>c <span class="number">76</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">49</span> <span class="number">45</span> <span class="number">4</span>e <span class="number">44</span> ae <span class="number">42</span> <span class="number">60</span> <span class="number">82</span></span><br></pre></td></tr></table></figure><h2 id="输入流ifstream-API说明"><a href="#输入流ifstream-API说明" class="headerlink" title="输入流ifstream API说明"></a>输入流ifstream API说明</h2><ul><li><a href="https://www.cplusplus.com/reference/fstream/ifstream/">cppreference</a></li><li><a href="https://www.apiref.com/cpp-zh/cpp/io/basic_ifstream.html">汉译</a></li><li><a href="http://c.biancheng.net/view/1541.html">ofstream seekp &amp; seekg</a></li><li><a href="http://c.biancheng.net/view/1541.html">ofstream tellp &amp; tellg</a></li><li>常用<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(filename,mode);    <span class="comment">//  打开文件</span></span><br><span class="line">ifs.<span class="built_in">close</span>();                <span class="comment">//  关闭绑定的文件</span></span><br><span class="line">ifs.<span class="built_in">get</span>();  <span class="comment">//  获取一个字节的二进制内容，并且将文件指针向后移动一个字节。</span></span><br><span class="line">ifs.<span class="built_in">seekg</span>(x,std::ios::beg); <span class="comment">//  将文件指针从文件开始向后移动多少个字节</span></span><br><span class="line">ifs.<span class="built_in">seekg</span>(-x,std::ios::end);    <span class="comment">//  将文件指针从文件末尾向前移动多少个字节</span></span><br><span class="line">ifs.<span class="built_in">tellg</span>();      <span class="comment">//  用于获取文件指针的位置（距离开头多少字节）  </span></span><br><span class="line">ifs.<span class="built_in">read</span>((<span class="keyword">char</span>*)ptr,len);   <span class="comment">//  从文件指针开始读取len个字节，到ptr中。接口为char*    </span></span><br><span class="line">ifs.<span class="built_in">eof</span>();      <span class="comment">//  到文件末尾，则</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>Kib kb ; Mib mb<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1KB=10^3=1000，1MB=10^6B=1000000B=1000KB;</span><br><span class="line">1KiB=2^10=1024，1MiB=2^20=1048576=1024KiB</span><br></pre></td></tr></table></figure></li></ul><h1 id="Linux下"><a href="#Linux下" class="headerlink" title="Linux下"></a>Linux下</h1><h2 id="使用Linux基本API"><a href="#使用Linux基本API" class="headerlink" title="使用Linux基本API"></a>使用Linux基本API</h2><ul><li>未封装<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = <span class="built_in">open</span>(<span class="string">&quot;./task01.png&quot;</span>,O_RDWR);    </span><br><span class="line">    <span class="keyword">if</span>(fd==<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">invalid_argument</span>(<span class="string">&quot;file not found&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> buf[<span class="number">64</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  指针从文件开始向后偏移0Byte</span></span><br><span class="line">    <span class="comment">//  读前64bytes</span></span><br><span class="line">    <span class="keyword">int</span> ret = <span class="built_in">lseek</span>(fd,<span class="number">0</span>,SEEK_SET);</span><br><span class="line">    <span class="built_in">assert</span>(ret!=<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">read</span>(fd,buf,<span class="number">64</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">64</span>;++i)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>,buf[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  读后64bytes</span></span><br><span class="line">    ret = <span class="built_in">lseek</span>(fd,<span class="number">-64</span>,SEEK_END);</span><br><span class="line">    <span class="built_in">assert</span>(ret!=<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="keyword">sizeof</span> buf);</span><br><span class="line">    <span class="built_in">read</span>(fd,buf,<span class="number">64</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">64</span>;++i)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>,buf[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shc@shc-<span class="keyword">virtual</span>-machine:~/code/<span class="keyword">try</span>$ ./day02.out </span><br><span class="line"><span class="number">89</span> <span class="number">50</span> <span class="number">4</span>e <span class="number">47</span> <span class="number">0</span>d <span class="number">0</span>a <span class="number">1</span>a <span class="number">0</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">0</span>d <span class="number">49</span> <span class="number">48</span> <span class="number">44</span> <span class="number">52</span> <span class="number">00</span> <span class="number">00</span> <span class="number">04</span> <span class="number">38</span> <span class="number">00</span> <span class="number">00</span> <span class="number">05</span> f7 <span class="number">08</span> <span class="number">06</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> aa d9 cb <span class="number">5</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">04</span> <span class="number">67</span> <span class="number">41</span> <span class="number">4</span>d <span class="number">41</span> <span class="number">00</span> <span class="number">00</span> b1 <span class="number">8f</span> <span class="number">0b</span> fc <span class="number">61</span> <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">20</span> <span class="number">63</span> <span class="number">48</span> <span class="number">52</span> <span class="number">4</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">7</span>a <span class="number">26</span> <span class="number">00</span> <span class="number">00</span> <span class="number">80</span> </span><br><span class="line">d1 <span class="number">99</span> d6 <span class="number">13</span> <span class="number">3</span>a <span class="number">71</span> <span class="number">85</span> <span class="number">3</span>c d4 <span class="number">8</span>a c6 a0 f8 eb <span class="number">4</span>d <span class="number">82</span> <span class="number">83</span> db cb <span class="number">38</span> <span class="number">68</span> <span class="number">44</span> <span class="number">9f</span> c3 ba <span class="number">22</span> a5 <span class="number">90</span> d6 <span class="number">1</span>c <span class="number">2b</span> <span class="number">50</span> d5 <span class="number">44</span> <span class="number">27</span> d6 <span class="number">33</span> d4 <span class="number">30</span> a8 <span class="number">9</span>d bd fe <span class="number">02</span> <span class="number">36</span> <span class="number">83</span> a3 c8 <span class="number">10</span> <span class="number">57</span> <span class="number">8</span>c <span class="number">76</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">49</span> <span class="number">45</span> <span class="number">4</span>e <span class="number">44</span> ae <span class="number">42</span> <span class="number">60</span> <span class="number">82</span> </span><br></pre></td></tr></table></figure></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> _<span class="title">print</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(T x)</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fileRead</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">fileRead</span>(<span class="keyword">const</span> string &amp;fp):<span class="built_in">file_path</span>(fp)</span><br><span class="line">    &#123;</span><br><span class="line">        fd = <span class="built_in">open</span>(file_path.<span class="built_in">c_str</span>(),O_RDONLY);</span><br><span class="line">        <span class="keyword">if</span>(fd==<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">close</span>(fd);</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">invalid_argument</span>(<span class="string">&quot;file not found&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        file_len = <span class="built_in">lseek</span>(fd,<span class="number">0</span>,SEEK_END);        </span><br><span class="line">        <span class="keyword">if</span>(file_len==<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">close</span>(fd);</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">invalid_argument</span>(<span class="string">&quot;file not found&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fileRead&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> fileRead&amp;)=<span class="keyword">delete</span>;</span><br><span class="line">    <span class="built_in">fileRead</span>(<span class="keyword">const</span> fileRead&amp;)=<span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">bool</span> <span class="title">readAsHexFromBegin</span><span class="params">(<span class="keyword">int</span> bytes_to_get)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">lseek</span>(fd,<span class="number">0</span>,SEEK_SET);</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[bytes_to_get];       <span class="comment">//  或许可以用内存池优化</span></span><br><span class="line">        <span class="keyword">int</span> ret = <span class="built_in">read</span>(fd,buf,bytes_to_get);</span><br><span class="line">        <span class="keyword">if</span>(ret==<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">perror</span>(<span class="built_in">strerror</span>(ret));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        for_each(buf,buf+bytes_to_get,_print&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt;());</span><br><span class="line">        <span class="keyword">delete</span> buf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">readAsHexFromEnd</span><span class="params">(<span class="keyword">int</span> bytes_to_get)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">lseek</span>(fd,-bytes_to_get,SEEK_END);</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[bytes_to_get];</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="built_in">read</span>(fd,buf,bytes_to_get);</span><br><span class="line">        <span class="keyword">if</span>(ret==<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">perror</span>(<span class="built_in">strerror</span>(ret));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        for_each(buf,buf+bytes_to_get,_print&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt;());</span><br><span class="line">        <span class="keyword">delete</span> buf;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">fileRead</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//  关闭文件</span></span><br><span class="line">        <span class="built_in">close</span>(fd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">const</span> string file_path;</span><br><span class="line">    <span class="keyword">int</span> file_len;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">fileRead <span class="title">fr</span><span class="params">(<span class="string">&quot;./task01.png&quot;</span>)</span></span>;</span><br><span class="line">    cout&lt;&lt;fr.<span class="built_in">getSize</span>()&lt;&lt;endl;</span><br><span class="line">    fr.<span class="built_in">readAsHexFromBegin</span>(<span class="number">64</span>);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    fr.<span class="built_in">readAsHexFromEnd</span>(<span class="number">64</span>);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">shc@shc-<span class="keyword">virtual</span>-machine:~/code/<span class="keyword">try</span>$ ./day02.out </span><br><span class="line"><span class="number">556002</span></span><br><span class="line"><span class="number">89</span> <span class="number">50</span> <span class="number">4</span>e <span class="number">47</span> <span class="number">0</span>d <span class="number">0</span>a <span class="number">1</span>a <span class="number">0</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">0</span>d <span class="number">49</span> <span class="number">48</span> <span class="number">44</span> <span class="number">52</span> <span class="number">00</span> <span class="number">00</span> <span class="number">04</span> <span class="number">38</span> <span class="number">00</span> <span class="number">00</span> <span class="number">05</span> f7 <span class="number">08</span> <span class="number">06</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> aa d9 cb <span class="number">5</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">04</span> <span class="number">67</span> <span class="number">41</span> <span class="number">4</span>d <span class="number">41</span> <span class="number">00</span> <span class="number">00</span> b1 <span class="number">8f</span> <span class="number">0b</span> fc <span class="number">61</span> <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">20</span> <span class="number">63</span> <span class="number">48</span> <span class="number">52</span> <span class="number">4</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">7</span>a <span class="number">26</span> <span class="number">00</span> <span class="number">00</span> <span class="number">80</span> </span><br><span class="line">d1 <span class="number">99</span> d6 <span class="number">13</span> <span class="number">3</span>a <span class="number">71</span> <span class="number">85</span> <span class="number">3</span>c d4 <span class="number">8</span>a c6 a0 f8 eb <span class="number">4</span>d <span class="number">82</span> <span class="number">83</span> db cb <span class="number">38</span> <span class="number">68</span> <span class="number">44</span> <span class="number">9f</span> c3 ba <span class="number">22</span> a5 <span class="number">90</span> d6 <span class="number">1</span>c <span class="number">2b</span> <span class="number">50</span> d5 <span class="number">44</span> <span class="number">27</span> d6 <span class="number">33</span> d4 <span class="number">30</span> a8 <span class="number">9</span>d bd fe <span class="number">02</span> <span class="number">36</span> <span class="number">83</span> a3 c8 <span class="number">10</span> <span class="number">57</span> <span class="number">8</span>c <span class="number">76</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">49</span> <span class="number">45</span> <span class="number">4</span>e <span class="number">44</span> ae <span class="number">42</span> <span class="number">60</span> <span class="number">82</span> </span><br></pre></td></tr></table></figure><h2 id="使用mmap文件映射"><a href="#使用mmap文件映射" class="headerlink" title="使用mmap文件映射"></a>使用mmap文件映射</h2><ul><li>将文件映射到内存，之后就操作那块内存的指针就可以。不用再读文件。省了两次拷贝。正常要read读文件，也就是先从磁盘读到内核，在从内核读到用户区内存。而现在映射之后直接操作内存即可。<ul><li>所以建立映射之后就可以关闭fd了。</li></ul></li><li>注意建立映射的权限要和打开文件的权限保持一致</li><li>注意不用的时候就解除映射。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"><span class="keyword">using</span> std::for_each;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  先不用c++异常了。直接assert</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">file</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">file</span>(<span class="keyword">const</span> string &amp; name,<span class="keyword">int</span> flag)</span><br><span class="line">        :_name(name),_flag(flag),<span class="built_in">is_mmap</span>(<span class="literal">false</span>),_ptr(<span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//  打开文件</span></span><br><span class="line">        _fd = <span class="built_in">open</span>(_name.<span class="built_in">c_str</span>(),_flag);</span><br><span class="line">        <span class="keyword">if</span>(_fd==<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="comment">// perror(strerror(errno));</span></span><br><span class="line">            <span class="comment">// assert(fd!=-1);</span></span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(<span class="built_in">strerror</span>(errno));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  获取文件信息块</span></span><br><span class="line">        <span class="keyword">int</span> ret = <span class="built_in">stat</span>(_name.<span class="built_in">c_str</span>(),&amp;_st);</span><br><span class="line">        <span class="built_in">assert</span>(ret!=<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  获取大小</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _st.st_size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  获取文件信息块</span></span><br><span class="line">    <span class="function">struct stat <span class="title">getStat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _st;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read_file_from_begin</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!is_mmap)&#123;</span><br><span class="line">            <span class="built_in">set_mmap</span>();</span><br><span class="line">            is_mmap = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        for_each(_ptr,_ptr+len,[](<span class="keyword">unsigned</span> <span class="keyword">char</span> x)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>,x);</span><br><span class="line">        &#125;);    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read_file_from_end</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!is_mmap)&#123;</span><br><span class="line">            <span class="built_in">set_mmap</span>();</span><br><span class="line">            is_mmap = <span class="literal">true</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        for_each(_ptr+_st.st_size-len,_ptr+_st.st_size,[](<span class="keyword">unsigned</span> <span class="keyword">char</span> x)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>,x);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  建立文件映射到内存</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_mmap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_flag==O_RDONLY)&#123;</span><br><span class="line">            _ptr = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)<span class="built_in">mmap</span>(<span class="literal">NULL</span>,_st.st_size,PROT_READ,MAP_SHARED,_fd,<span class="number">0</span>);    </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(_flag==O_RDWR)&#123;</span><br><span class="line">            _ptr = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)<span class="built_in">mmap</span>(<span class="literal">NULL</span>,_st.st_size,PROT_READ|PROT_WRITE,MAP_SHARED,_fd,<span class="number">0</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  判断映射成功/失败</span></span><br><span class="line">        <span class="built_in">assert</span>(_ptr!=MAP_FAILED);</span><br><span class="line">        <span class="comment">//  映射之后就是对共享内存操作 而非文件了。所以关闭fd</span></span><br><span class="line">        <span class="keyword">if</span>(_fd!=<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">close</span>(_fd);</span><br><span class="line">            _fd = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">file</span>()&#123;</span><br><span class="line">        <span class="comment">//  关闭文件</span></span><br><span class="line">        <span class="keyword">if</span>(_fd==<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">close</span>(_fd);</span><br><span class="line">            _fd = <span class="number">-1</span>;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  解除映射</span></span><br><span class="line">        <span class="keyword">if</span>(is_mmap)&#123;</span><br><span class="line">            <span class="built_in">munmap</span>(_ptr,_st.st_size);</span><br><span class="line">            _ptr = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> _fd;            <span class="comment">//  文件描述符</span></span><br><span class="line">    <span class="keyword">int</span> _flag;          <span class="comment">//  打开权限</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> _<span class="title">st</span>;</span>    <span class="comment">//  文件信息结构体</span></span><br><span class="line">    <span class="keyword">const</span> string _name; <span class="comment">//  文件名</span></span><br><span class="line">    <span class="keyword">bool</span> is_mmap;       <span class="comment">//  是否建立了映射</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *_ptr;         <span class="comment">//  文件映射到内存指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// int fd = open(&quot;./task01.png&quot;,O_RDONLY);</span></span><br><span class="line">    <span class="function">file <span class="title">f</span><span class="params">(<span class="string">&quot;./task01.png&quot;</span>,O_RDONLY)</span></span>;</span><br><span class="line">    cout&lt;&lt;f.<span class="built_in">getSize</span>()&lt;&lt;endl;   </span><br><span class="line">    f.<span class="built_in">read_file_from_begin</span>(<span class="number">64</span>);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    f.<span class="built_in">read_file_from_end</span>(<span class="number">64</span>);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">556002</span></span><br><span class="line"><span class="number">89</span> <span class="number">50</span> <span class="number">4</span>e <span class="number">47</span> <span class="number">0</span>d <span class="number">0</span>a <span class="number">1</span>a <span class="number">0</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">0</span>d <span class="number">49</span> <span class="number">48</span> <span class="number">44</span> <span class="number">52</span> <span class="number">00</span> <span class="number">00</span> <span class="number">04</span> <span class="number">38</span> <span class="number">00</span> <span class="number">00</span> <span class="number">05</span> f7 <span class="number">08</span> <span class="number">06</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> aa d9 cb <span class="number">5</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">04</span> <span class="number">67</span> <span class="number">41</span> <span class="number">4</span>d <span class="number">41</span> <span class="number">00</span> <span class="number">00</span> b1 <span class="number">8f</span> <span class="number">0b</span> fc <span class="number">61</span> <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">20</span> <span class="number">63</span> <span class="number">48</span> <span class="number">52</span> <span class="number">4</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">7</span>a <span class="number">26</span> <span class="number">00</span> <span class="number">00</span> <span class="number">80</span> </span><br><span class="line">d1 <span class="number">99</span> d6 <span class="number">13</span> <span class="number">3</span>a <span class="number">71</span> <span class="number">85</span> <span class="number">3</span>c d4 <span class="number">8</span>a c6 a0 f8 eb <span class="number">4</span>d <span class="number">82</span> <span class="number">83</span> db cb <span class="number">38</span> <span class="number">68</span> <span class="number">44</span> <span class="number">9f</span> c3 ba <span class="number">22</span> a5 <span class="number">90</span> d6 <span class="number">1</span>c <span class="number">2b</span> <span class="number">50</span> d5 <span class="number">44</span> <span class="number">27</span> d6 <span class="number">33</span> d4 <span class="number">30</span> a8 <span class="number">9</span>d bd fe <span class="number">02</span> <span class="number">36</span> <span class="number">83</span> a3 c8 <span class="number">10</span> <span class="number">57</span> <span class="number">8</span>c <span class="number">76</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">49</span> <span class="number">45</span> <span class="number">4</span>e <span class="number">44</span> ae <span class="number">42</span> <span class="number">60</span> <span class="number">82</span> </span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;感想：c++的流感觉不如linux 系统级的API。好难受。&lt;h1 id=&quot;c-流的文件操作（感觉不好用）&quot;&gt;&lt;a href=&quot;#c-流的文件操作（感觉不好用）&quot; class=&quot;headerlink&quot; title=&quot;c++ 流的文件操作（感觉不好用）&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>c++_make_shared</title>
    <link href="http://example.com/2022/05/08/c++_make_shared/"/>
    <id>http://example.com/2022/05/08/c++_make_shared/</id>
    <published>2022-05-08T13:47:14.000Z</published>
    <updated>2022-05-28T14:19:04.895Z</updated>
    
    <content type="html"><![CDATA[<ul><li>shared_ptr成员<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">shared_ptr</span> :</span> <span class="keyword">public</span> _Ptr_base&lt;_Ty&gt; &#123; <span class="comment">// class for reference counted resource management</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Ty</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> _<span class="title">Ptr_base</span> &#123;</span> <span class="comment">// base class for shared_ptr and weak_ptr</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    element_type* _Ptr&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">    _Ref_count_base* _Rep&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  计数类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> __<span class="title">declspec</span>(<span class="title">novtable</span>) _<span class="title">Ref_count_base</span> &#123;</span> <span class="comment">// common code for reference counting</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    _Atomic_counter_t _Uses  = <span class="number">1</span>;</span><br><span class="line">    _Atomic_counter_t _Weaks = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="make-shared-替代-shared-ptr-来创建智能指针对象"><a href="#make-shared-替代-shared-ptr-来创建智能指针对象" class="headerlink" title="make_shared 替代 shared_ptr 来创建智能指针对象"></a>make_shared 替代 shared_ptr 来创建智能指针对象</h1><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ul><li><p><code>shared_ptr&lt;int&gt; sp(new int(10))</code></p><ul><li>如果在new计数类时失败。那么会造成内存泄漏，ptr指向的资源不会被释放。</li><li>也即，shared_ptr对象构造失败，不会释放已经new出的资源。</li><li><img src="/2022/05/08/c++_make_shared/2022-05-08-22-31-12.png"></li></ul></li><li><p><code>make_shared&lt;int&gt; sp = make_shared&lt;int&gt;(10);</code></p><ul><li>将托管资源和引用计数类的内存整合到一起，由shared_ptr开辟。</li><li><img src="/2022/05/08/c++_make_shared/2022-05-08-23-31-18.png"></li><li>源码<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Ty</span>, <span class="title">class</span>... _<span class="title">Types</span>&gt;</span></span><br><span class="line"><span class="function">_NODISCARD</span></span><br><span class="line"><span class="function">    shared_ptr&lt;_Ty&gt; <span class="title">make_shared</span><span class="params">(_Types&amp;&amp;... _Args)</span> </span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// make a shared_ptr to non-array object</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> _Rx = <span class="keyword">new</span> _Ref_count_obj2&lt;_Ty&gt;(_STD forward&lt;_Types&gt;(_Args)...);</span><br><span class="line">    shared_ptr&lt;_Ty&gt; _Ret;</span><br><span class="line">    _Ret._Set_ptr_rep_and_enable_shared(_STD <span class="built_in">addressof</span>(_Rx-&gt;_Storage._Value), _Rx);</span><br><span class="line">    <span class="keyword">return</span> _Ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>例子<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  int(10) 这块内存由用户自己开辟。这就会使得计数ref类内存和资源类int(10)内存是分开的。两次new。可能会第一次用户new资源成功了，shared_ptr类new计数类ref时失败、</span></span><br><span class="line"><span class="function">shared_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>))</span></span>;</span><br><span class="line"><span class="comment">//  int(10) 这块内存由make_shared负责开辟。会将计数ref类内存和资源类int(10)内存整合到一起开辟，不会出现有一部分new失败的情况。要么都成功，要么都失败。</span></span><br><span class="line">shared_ptr&lt;<span class="keyword">int</span>&gt; ssp = make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">10</span>);</span><br><span class="line">cout&lt;&lt;*sp&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;*ssp&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&gt; <span class="number">10</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;Test&gt; <span class="title">sp1</span><span class="params">(<span class="keyword">new</span> Test(<span class="number">10</span>))</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">sp2</span><span class="params">(make_shared&lt;Test&gt;(<span class="number">10</span>))</span></span>; <span class="comment">//  new Test(int);</span></span><br><span class="line">    <span class="function">shared_ptr&lt;Test&gt; <span class="title">sp3</span><span class="params">(make_shared&lt;Test&gt;(<span class="number">1</span>,<span class="number">2</span>))</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&gt; <span class="built_in">Test</span>(<span class="keyword">int</span>)</span><br><span class="line"><span class="built_in">Test</span>(<span class="keyword">int</span>)</span><br><span class="line"><span class="built_in">Test</span>(<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line">~Test</span><br><span class="line">~Test</span><br><span class="line">~Test</span><br></pre></td></tr></table></figure></li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>make_shared new一次，内存分配效率高。（shared_ptr 用户new一次资源，类里new一次计数类）</li><li>防止内存泄漏</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>make_shared无法自定义删除器！！</li><li>托管资源的延迟释放！！<ul><li>因为make_shared下，计数ref类和资源ptr类必须一起释放。而shared_ptr下，计数ref类和资源类ptr可以分开释放。<ul><li>因为make_shared下，计数ref类和资源ptr类是一起new的。</li><li>因为shared_ptr下，计数ref类和资源ptr类是两次分开new的。</li></ul></li><li>计数类什么时候释放<ul><li>当uses减少至0时，weaks也为0。那么计数类内存和资源内存都释放。如果users=0但是weaks不等于0，则不释放计数类内存，只释放资源内存。因为此时还有weak_ptr在观察这块资源。</li></ul></li><li><img src="/2022/05/08/c++_make_shared/2022-05-08-23-58-41.png"></li><li><img src="/2022/05/08/c++_make_shared/2022-05-08-23-53-31.png"></li><li>也即，<strong>shared_ptr</strong>方式中，<strong>没有shared_ptr指向内存了</strong>（uses=0），无论weaks是否等于0（是否有weak_ptr观察），就会<strong>释放</strong>掉资源。（资源内存可以先于计数类内存释放）</li><li>可是，<strong>make_shared</strong>方式中，没有shared_ptr指向内存了（uses=0），只有weaks=0时–<strong>无weak_ptr观察</strong>，也即只有计数类ref可以释放时，才能将资源内存和计数类内存一起<strong>释放</strong>。</li></ul></li></ul><ul><li>使用时注意下make_shared里面的参数是要传给对象的构造函数，不是要申请的内存长度。shared_ptr里面的形参是要申请的内存长度。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;shared_ptr成员&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s</summary>
      
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>查表</title>
    <link href="http://example.com/2022/05/08/%E6%9F%A5%E8%A1%A8/"/>
    <id>http://example.com/2022/05/08/%E6%9F%A5%E8%A1%A8/</id>
    <published>2022-05-08T06:31:39.000Z</published>
    <updated>2022-05-28T14:15:00.226Z</updated>
    
    <content type="html"><![CDATA[<ul><li>2次幂表 （因为我懒）<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>^<span class="number">0</span>=<span class="number">1</span></span><br><span class="line"><span class="number">2</span>^<span class="number">1</span>=<span class="number">2</span></span><br><span class="line"><span class="number">2</span>^<span class="number">2</span>=<span class="number">4</span></span><br><span class="line"><span class="number">2</span>^<span class="number">3</span>=<span class="number">8</span></span><br><span class="line"><span class="number">2</span>^<span class="number">4</span>=<span class="number">16</span></span><br><span class="line"><span class="number">2</span>^<span class="number">5</span>=<span class="number">32</span></span><br><span class="line"><span class="number">2</span>^<span class="number">6</span>=<span class="number">64</span></span><br><span class="line"><span class="number">2</span>^<span class="number">7</span>=<span class="number">128</span></span><br><span class="line"><span class="number">2</span>^<span class="number">8</span>=<span class="number">256</span></span><br><span class="line"><span class="number">2</span>^<span class="number">9</span>=<span class="number">512</span></span><br><span class="line"><span class="number">2</span>^<span class="number">10</span>=<span class="number">1024</span></span><br><span class="line"><span class="number">2</span>^<span class="number">11</span>=<span class="number">2048</span></span><br><span class="line"><span class="number">2</span>^<span class="number">12</span>=<span class="number">4096</span></span><br><span class="line"><span class="number">2</span>^<span class="number">13</span>=<span class="number">8192</span></span><br><span class="line"><span class="number">2</span>^<span class="number">14</span>=<span class="number">16384</span></span><br><span class="line"><span class="number">2</span>^<span class="number">15</span>=<span class="number">32768</span></span><br><span class="line"><span class="number">2</span>^<span class="number">16</span>=<span class="number">65536</span></span><br><span class="line"><span class="number">2</span>^<span class="number">17</span>=<span class="number">131072</span></span><br><span class="line"><span class="number">2</span>^<span class="number">18</span>=<span class="number">262144</span></span><br><span class="line"><span class="number">2</span>^<span class="number">19</span>=<span class="number">524288</span></span><br><span class="line"><span class="number">2</span>^<span class="number">20</span>=<span class="number">1048576</span></span><br><span class="line"><span class="number">2</span>^<span class="number">21</span>=<span class="number">2097152</span></span><br><span class="line"><span class="number">2</span>^<span class="number">22</span>=<span class="number">4194304</span></span><br><span class="line"><span class="number">2</span>^<span class="number">23</span>=<span class="number">8388608</span></span><br><span class="line"><span class="number">2</span>^<span class="number">24</span>=<span class="number">16777216</span></span><br><span class="line"><span class="number">2</span>^<span class="number">25</span>=<span class="number">33554432</span></span><br><span class="line"><span class="number">2</span>^<span class="number">26</span>=<span class="number">67108864</span></span><br><span class="line"><span class="number">2</span>^<span class="number">27</span>=<span class="number">134217728</span></span><br><span class="line"><span class="number">2</span>^<span class="number">28</span>=<span class="number">268435456</span></span><br><span class="line"><span class="number">2</span>^<span class="number">29</span>=<span class="number">536870912</span></span><br><span class="line"><span class="number">2</span>^<span class="number">30</span>=<span class="number">1073741824</span></span><br><span class="line"><span class="number">2</span>^<span class="number">31</span>=<span class="number">2147483648</span></span><br><span class="line"><span class="number">2</span>^<span class="number">32</span>=<span class="number">4294967296</span></span><br><span class="line"><span class="number">2</span>^<span class="number">33</span>=<span class="number">8589934592</span></span><br><span class="line"><span class="number">2</span>^<span class="number">34</span>=<span class="number">17179869184</span></span><br><span class="line"><span class="number">2</span>^<span class="number">35</span>=<span class="number">34359738368</span></span><br><span class="line"><span class="number">2</span>^<span class="number">36</span>=<span class="number">68719476736</span></span><br><span class="line"><span class="number">2</span>^<span class="number">37</span>=<span class="number">137438953472</span></span><br><span class="line"><span class="number">2</span>^<span class="number">38</span>=<span class="number">274877906944</span></span><br><span class="line"><span class="number">2</span>^<span class="number">39</span>=<span class="number">549755813888</span></span><br><span class="line"><span class="number">2</span>^<span class="number">40</span>=<span class="number">1099511627776</span></span><br><span class="line"><span class="number">2</span>^<span class="number">41</span>=<span class="number">2199023255552</span></span><br><span class="line"><span class="number">2</span>^<span class="number">42</span>=<span class="number">4398046511104</span></span><br><span class="line"><span class="number">2</span>^<span class="number">43</span>=<span class="number">8796093022208</span></span><br><span class="line"><span class="number">2</span>^<span class="number">44</span>=<span class="number">17592186044416</span></span><br><span class="line"><span class="number">2</span>^<span class="number">45</span>=<span class="number">35184372088832</span></span><br><span class="line"><span class="number">2</span>^<span class="number">46</span>=<span class="number">70368744177664</span></span><br><span class="line"><span class="number">2</span>^<span class="number">47</span>=<span class="number">140737488355328</span></span><br><span class="line"><span class="number">2</span>^<span class="number">48</span>=<span class="number">281474976710656</span></span><br><span class="line"><span class="number">2</span>^<span class="number">49</span>=<span class="number">562949953421312</span></span><br><span class="line"><span class="number">2</span>^<span class="number">50</span>=<span class="number">1125899906842624</span></span><br><span class="line"><span class="number">2</span>^<span class="number">51</span>=<span class="number">2251799813685248</span></span><br><span class="line"><span class="number">2</span>^<span class="number">52</span>=<span class="number">4503599627370496</span></span><br><span class="line"><span class="number">2</span>^<span class="number">53</span>=<span class="number">9007199254740992</span></span><br><span class="line"><span class="number">2</span>^<span class="number">54</span>=<span class="number">18014398509481984</span></span><br><span class="line"><span class="number">2</span>^<span class="number">55</span>=<span class="number">36028797018963968</span></span><br><span class="line"><span class="number">2</span>^<span class="number">56</span>=<span class="number">72057594037927936</span></span><br><span class="line"><span class="number">2</span>^<span class="number">57</span>=<span class="number">144115188075855872</span></span><br><span class="line"><span class="number">2</span>^<span class="number">58</span>=<span class="number">288230376151711744</span></span><br><span class="line"><span class="number">2</span>^<span class="number">59</span>=<span class="number">576460752303423488</span></span><br><span class="line"><span class="number">2</span>^<span class="number">60</span>=<span class="number">1152921504606846976</span></span><br><span class="line"><span class="number">2</span>^<span class="number">61</span>=<span class="number">2305843009213693952</span></span><br><span class="line"><span class="number">2</span>^<span class="number">62</span>=<span class="number">4611686018427387904</span></span><br><span class="line"><span class="number">2</span>^<span class="number">63</span>=<span class="number">9223372036854775808</span></span><br><span class="line"><span class="number">2</span>^<span class="number">64</span>=<span class="number">18446744073709551616</span></span><br><span class="line"><span class="number">2</span>^<span class="number">65</span>=<span class="number">36893488147419103232</span></span><br><span class="line"><span class="number">2</span>^<span class="number">66</span>=<span class="number">73786976294838206464</span></span><br><span class="line"><span class="number">2</span>^<span class="number">67</span>=<span class="number">147573952589676412928</span></span><br><span class="line"><span class="number">2</span>^<span class="number">68</span>=<span class="number">295147905179352825856</span></span><br><span class="line"><span class="number">2</span>^<span class="number">69</span>=<span class="number">590295810358705651712</span></span><br><span class="line"><span class="number">2</span>^<span class="number">70</span>=<span class="number">1180591620717411303424</span></span><br><span class="line"><span class="number">2</span>^<span class="number">71</span>=<span class="number">2361183241434822606848</span></span><br><span class="line"><span class="number">2</span>^<span class="number">72</span>=<span class="number">4722366482869645213696</span></span><br><span class="line"><span class="number">2</span>^<span class="number">73</span>=<span class="number">9444732965739290427392</span></span><br><span class="line"><span class="number">2</span>^<span class="number">74</span>=<span class="number">18889465931478580854784</span></span><br><span class="line"><span class="number">2</span>^<span class="number">75</span>=<span class="number">37778931862957161709568</span></span><br><span class="line"><span class="number">2</span>^<span class="number">76</span>=<span class="number">75557863725914323419136</span></span><br><span class="line"><span class="number">2</span>^<span class="number">77</span>=<span class="number">151115727451828646838272</span></span><br><span class="line"><span class="number">2</span>^<span class="number">78</span>=<span class="number">302231454903657293676544</span></span><br><span class="line"><span class="number">2</span>^<span class="number">79</span>=<span class="number">604462909807314587353088</span></span><br><span class="line"><span class="number">2</span>^<span class="number">80</span>=<span class="number">1208925819614629174706176</span></span><br><span class="line"><span class="number">2</span>^<span class="number">81</span>=<span class="number">2417851639229258349412352</span></span><br><span class="line"><span class="number">2</span>^<span class="number">82</span>=<span class="number">4835703278458516698824704</span></span><br><span class="line"><span class="number">2</span>^<span class="number">83</span>=<span class="number">9671406556917033397649408</span></span><br><span class="line"><span class="number">2</span>^<span class="number">84</span>=<span class="number">19342813113834066795298816</span></span><br><span class="line"><span class="number">2</span>^<span class="number">85</span>=<span class="number">38685626227668133590597632</span></span><br><span class="line"><span class="number">2</span>^<span class="number">86</span>=<span class="number">77371252455336267181195264</span></span><br><span class="line"><span class="number">2</span>^<span class="number">87</span>=<span class="number">154742504910672534362390528</span></span><br><span class="line"><span class="number">2</span>^<span class="number">88</span>=<span class="number">309485009821345068724781056</span></span><br><span class="line"><span class="number">2</span>^<span class="number">89</span>=<span class="number">618970019642690137449562112</span></span><br><span class="line"><span class="number">2</span>^<span class="number">90</span>=<span class="number">1237940039285380274899124224</span></span><br><span class="line"><span class="number">2</span>^<span class="number">91</span>=<span class="number">2475880078570760549798248448</span></span><br><span class="line"><span class="number">2</span>^<span class="number">92</span>=<span class="number">4951760157141521099596496896</span></span><br><span class="line"><span class="number">2</span>^<span class="number">93</span>=<span class="number">9903520314283042199192993792</span></span><br><span class="line"><span class="number">2</span>^<span class="number">94</span>=<span class="number">19807040628566084398385987584</span></span><br><span class="line"><span class="number">2</span>^<span class="number">95</span>=<span class="number">39614081257132168796771975168</span></span><br><span class="line"><span class="number">2</span>^<span class="number">96</span>=<span class="number">79228162514264337593543950336</span></span><br><span class="line"><span class="number">2</span>^<span class="number">97</span>=<span class="number">158456325028528675187087900672</span></span><br><span class="line"><span class="number">2</span>^<span class="number">98</span>=<span class="number">316912650057057350374175801344</span></span><br><span class="line"><span class="number">2</span>^<span class="number">99</span>=<span class="number">633825300114114700748351602688</span></span><br><span class="line"><span class="number">2</span>^<span class="number">100</span>=<span class="number">1267650600228229401496703205376</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;2次幂表 （因为我懒）&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp</summary>
      
    
    
    
    <category term="技能 &amp; 工具" scheme="http://example.com/categories/%E6%8A%80%E8%83%BD-%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>单核cpu_多线程</title>
    <link href="http://example.com/2022/05/06/%E5%8D%95%E6%A0%B8cpu-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://example.com/2022/05/06/%E5%8D%95%E6%A0%B8cpu-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2022-05-06T11:07:25.000Z</published>
    <updated>2022-05-28T14:46:28.980Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xueyijin/article/details/114272164">https://blog.csdn.net/xueyijin/article/details/114272164</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/xueyijin/article/details/114272164&quot;&gt;https://blog.csdn.net/xueyijin/article/details/114272164&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="待做" scheme="http://example.com/categories/%E5%BE%85%E5%81%9A/"/>
    
    
  </entry>
  
  <entry>
    <title>函数对象</title>
    <link href="http://example.com/2022/05/06/c++_%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/"/>
    <id>http://example.com/2022/05/06/c++_%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/</id>
    <published>2022-05-06T03:04:54.000Z</published>
    <updated>2022-05-28T14:19:11.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h1><ul><li>一个类，重载了<code>operator()</code>小括号运算符。如<code>class xx&#123;bool operator()(int a,int b);&#125;</code>。把这个类的对象称为函数对象或者仿函数。</li><li>函数对象好处（代替函数指针）：<ul><li>通过函数对象调用<code>operator()</code>，可以省略函数的调用开销，比通过函数指针调用函数（不能够<code>inline</code>内联调用）效率高</li><li>因为函数对象是用类生成的，所以可以添加相关的成员变量，用来记录函数对象使用时更多的信息</li></ul></li><li><code>sort(vec.begin(),vec.end(),greater&lt;int&gt;())</code><ul><li>传入函数对象：<code>greater&lt;int&gt;()</code>。</li></ul></li><li><code>priority_queue&lt;int,vector&lt;int&gt;,less&lt;int&gt;&gt; q;</code><ul><li>传入函数对象的类类型<code>:less&lt;int&gt;</code>，将来会在<code>priority_queue</code>的类中造函数对象<code>less&lt;int&gt; comp</code>;<h2 id="仿函数和函数指针对比"><a href="#仿函数和函数指针对比" class="headerlink" title="仿函数和函数指针对比"></a>仿函数和函数指针对比</h2></li></ul></li><li>函数对象示例<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  Compare：函数对象的类类型</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> Compare&gt;  </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(T a, T b, Compare cmp)</span>    <span class="comment">//  cmp是个函数对象</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cmp</span>(a,b);    <span class="comment">//  通过函数对象 调用的是operator()(a,b);</span></span><br><span class="line">    <span class="comment">//  内联inline！</span></span><br><span class="line">    <span class="comment">//  因为cmp是函数对象。也就是()是类内的函数。那么这个函数就是内联的.</span></span><br><span class="line">    <span class="comment">//  因为通过对象调用，那么</span></span><br><span class="line">    <span class="comment">//  编译器看到指定模板参数类型调用compare时，会实例化compare模板函数，而在这时Compare类型已经指定。也就是说对象cmp确定是什么类型的了。</span></span><br><span class="line">    <span class="comment">//  那么我们就可以知道调用哪个函数了。那么编译器就可以将他内联了，</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  mygreater类的对象称为 仿函数 / 函数对象</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mygreater</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(T a, T b)</span></span>&#123;  <span class="comment">//  二元函数对象</span></span><br><span class="line">        <span class="keyword">return</span> a &gt; b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  myless类的对象称为 仿函数 / 函数对象</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myless</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &lt; b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;myless&lt;<span class="keyword">int</span>&gt;()(<span class="number">1</span>,<span class="number">2</span>)&lt;&lt;endl;   <span class="comment">//  myless&lt;int&gt;()：仿函数 / 函数对象</span></span><br><span class="line">cout&lt;&lt; <span class="built_in">compare</span>(<span class="number">1</span>,<span class="number">2</span>,myless&lt;<span class="keyword">int</span>&gt;()) &lt;&lt;endl;  <span class="comment">//  传入函数对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cout&lt;&lt;compare&lt;int,myless&lt;int&gt;&gt;(1,2,myless&lt;int&gt;())&lt;&lt;endl; </span></span><br><span class="line">    <span class="comment">//  &lt;myless&lt;int&gt;&gt; 显示传入函数对象的类型 </span></span><br><span class="line">    <span class="comment">//  (myless&lt;int&gt;()) 传入函数对象 </span></span><br><span class="line"><span class="comment">//  myless&lt;int&gt;：模板名 + 类型参数列表 = 类名。这是myless&lt;int&gt;()这个对象的类类型。</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>函数指针示例<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Compare 函数指针类型</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> Compare&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(T a, T b, Compare cmp)</span><span class="comment">//  cmp是一个函数指针</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cmp</span>(a,b);    <span class="comment">//  通过函数指针调用</span></span><br><span class="line">    <span class="comment">//  通过函数指针调用缺点：！！！</span></span><br><span class="line">    <span class="comment">//  无法inline、开销大！因为有函数调用的开销！</span></span><br><span class="line">    <span class="comment">//  为什么无法内联？</span></span><br><span class="line">    <span class="comment">//  内联是在编译时期做的。而这里我们通过函数指针调用，是在运行时调用，在运行时传入地址，通过地址调用。</span></span><br><span class="line">    <span class="comment">//  而在编译时，编译器当然不知道调用的是那个函数。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  这俩不是仿函数，是函数模板</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">greater</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myless</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;myless&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span>,<span class="number">2</span>)&lt;&lt;endl;      <span class="comment">//  myless&lt;int&gt;:函数指针。</span></span><br><span class="line">    cout&lt;&lt;<span class="built_in">compare</span>(<span class="number">1</span>,<span class="number">2</span>,myless&lt;<span class="keyword">int</span>&gt;)&lt;&lt;endl;  <span class="comment">//  myless&lt;int&gt;的类型是一个函数指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="STL示例"><a href="#STL示例" class="headerlink" title="STL示例"></a>STL示例</h2><ul><li>STL模板参数指定函数对象类型<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * template&lt;typename _Tp, typename _Sequence = vector&lt;_Tp&gt;,</span></span><br><span class="line"><span class="comment">   typename _Compare  = less&lt;typename _Sequence::value_type&gt; &gt;</span></span><br><span class="line"><span class="comment">    class priority_queue</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">    ...</span></span><br><span class="line"><span class="comment">    protected:</span></span><br><span class="line"><span class="comment">      //  See queue::c for notes on these names.</span></span><br><span class="line"><span class="comment">      _Sequence  c;</span></span><br><span class="line"><span class="comment">      _Compare   comp;用类型_Compare定义了一个函数对象</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//    priority_queue&lt;int&gt; q;  //  使用默认底层容器类型vector&lt;int&gt; 使用默认仿函数类型_Compare = less&lt;..&gt;</span></span><br><span class="line"><span class="comment">//    priority_queue&lt;int,vector&lt;int&gt;&gt; q;  //  使用默认 _Compare模板参数类型</span></span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>,vector&lt;<span class="keyword">int</span>&gt;,less&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;++i)    q.<span class="built_in">push</span>(<span class="built_in">rand</span>()%<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;q.<span class="built_in">top</span>()&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;函数对象&quot;&gt;&lt;a href=&quot;#函数对象&quot; class=&quot;headerlink&quot; title=&quot;函数对象&quot;&gt;&lt;/a&gt;函数对象&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;一个类，重载了&lt;code&gt;operator()&lt;/code&gt;小括号运算符。如&lt;code&gt;class xx&amp;#12</summary>
      
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>c++_11特性概述</title>
    <link href="http://example.com/2022/05/06/c++11_%E7%89%B9%E6%80%A7%E6%A6%82%E8%BF%B0/"/>
    <id>http://example.com/2022/05/06/c++11_%E7%89%B9%E6%80%A7%E6%A6%82%E8%BF%B0/</id>
    <published>2022-05-06T01:21:23.000Z</published>
    <updated>2022-05-28T14:19:02.150Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-11-标准相关的内容-总结一下"><a href="#C-11-标准相关的内容-总结一下" class="headerlink" title="C++11 标准相关的内容 总结一下"></a>C++11 标准相关的内容 总结一下</h1><h2 id="一：关键字和语法"><a href="#一：关键字和语法" class="headerlink" title="一：关键字和语法"></a>一：关键字和语法</h2><p>auto：可以根据右值，推导出右值的类型，然后左边变量的类型也就已知了<br>nullptr：给指针专用（能够和整数进行区别） #define NULL 0<br>foreach：可以遍历数组，容器等<br>for(Type val : container) =&gt; 底层就是通过指针或者迭代器来实现的<br>{<br>    cout&lt;&lt;val&lt;&lt;” “;<br>}<br>右值引用：move移动语义函数和forward类型完美转发函数<br>模板的一个新特性：typename… A  表示可变参（类型参数）</p><h2 id="二：绑定器和函数对象"><a href="#二：绑定器和函数对象" class="headerlink" title="二：绑定器和函数对象"></a>二：绑定器和函数对象</h2><p>function：函数对象<br>bind：绑定器  bind1st和bind2nd+二元函数对象 =》 一元函数对象<br>lambda表达式</p><h2 id="三：智能指针"><a href="#三：智能指针" class="headerlink" title="三：智能指针"></a>三：智能指针</h2><p>shared_ptr和weak_ptr</p><h2 id="四：容器"><a href="#四：容器" class="headerlink" title="四：容器"></a>四：容器</h2><p>set和map：红黑树 O(lgn)<br>unordered_set和unordered_map：哈希表 O(1)<br>array：数组   vector<br>forward_list：前向链表   list</p><h2 id="五：C-语言级别支持的多线程编程"><a href="#五：C-语言级别支持的多线程编程" class="headerlink" title="五：C++语言级别支持的多线程编程"></a>五：C++语言级别支持的多线程编程</h2><p>window：createThread<br>linux：pthread_create<br>clone</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-11-标准相关的内容-总结一下&quot;&gt;&lt;a href=&quot;#C-11-标准相关的内容-总结一下&quot; class=&quot;headerlink&quot; title=&quot;C++11 标准相关的内容 总结一下&quot;&gt;&lt;/a&gt;C++11 标准相关的内容 总结一下&lt;/h1&gt;&lt;h2 id=&quot;一：关</summary>
      
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>哈希</title>
    <link href="http://example.com/2022/05/06/%E5%93%88%E5%B8%8C/"/>
    <id>http://example.com/2022/05/06/%E5%93%88%E5%B8%8C/</id>
    <published>2022-05-06T00:27:53.000Z</published>
    <updated>2022-05-28T14:45:31.129Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xiaolincoding.com/os/8_network_system/hash.html#%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E8%99%9A%E6%8B%9F%E8%8A%82%E7%82%B9%E6%8F%90%E9%AB%98%E5%9D%87%E8%A1%A1%E5%BA%A6">哈希和一致性哈希</a></p><p>nginx的一致性哈希</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://xiaolincoding.com/os/8_network_system/hash.html#%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E8%99%9A%E6%8B%9F%E8%8A%82%E7%82%B9</summary>
      
    
    
    
    <category term="待做" scheme="http://example.com/categories/%E5%BE%85%E5%81%9A/"/>
    
    
    <category term="哈希" scheme="http://example.com/tags/%E5%93%88%E5%B8%8C/"/>
    
  </entry>
  
  <entry>
    <title>存储器</title>
    <link href="http://example.com/2022/05/05/%E5%AD%98%E5%82%A8%E5%99%A8/"/>
    <id>http://example.com/2022/05/05/%E5%AD%98%E5%82%A8%E5%99%A8/</id>
    <published>2022-05-05T01:19:27.000Z</published>
    <updated>2022-05-28T14:46:44.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="存储器分类"><a href="#存储器分类" class="headerlink" title="存储器分类"></a>存储器分类</h2><ul><li>按存取方式分类<ul><li>存取时间与物理地址无关（随机访问）<ul><li>随机存取存储器：在程序的执行过程中  可读可写</li><li>只读存储器：在程序的执行过程中  只读</li></ul></li><li>存取时间与物理地址有关（串行访问）<ul><li>顺序存取存储器，如磁带</li><li>直接存取存储器，如磁盘</li></ul></li></ul></li><li>按在计算机中的作用分类<ul><li>主存储器<ul><li>RAM：Random Access Memory。随机存取存储器<ul><li>静态RAM</li><li>动态RAM</li></ul></li><li>ROM：Read-Only Memory。只读存储器<ul><li>MROM</li><li>PROM</li><li>EPROM</li><li>EEPROM</li></ul></li></ul></li><li>闪存存储器（Flash Memory）<ul><li>U盘、固态硬盘（SSD）</li></ul></li><li>高速缓冲存储器 / 缓存（Cache）<ul><li>CPU寄存器和主存储器之间</li></ul></li><li>辅存<ul><li>磁盘、磁带、光盘</li></ul></li></ul></li></ul><h2 id="存储器的层次结构"><a href="#存储器的层次结构" class="headerlink" title="存储器的层次结构"></a>存储器的层次结构</h2><blockquote><p><img src="/2022/05/05/%E5%AD%98%E5%82%A8%E5%99%A8/2022-05-05-09-22-31.png"><br><img src="/2022/05/05/%E5%AD%98%E5%82%A8%E5%99%A8/2022-05-05-10-36-10.png"></p></blockquote><ul><li>程序运行的局部性原理<ul><li>在一小段时间内，最近被访问过的程序和数据很可能再次被访问.</li><li>在空间上这些被访问的程序和数据往往集中在一小片存储区</li><li>在访问顺序上，指令顺序执行比转移执行的可能性大(大约5:1)</li><li>合理地把程序和数据分配在不同存储介质中<ul><li>可以将最近被访问过的程序或数据放入高速缓存中，当CPU再次访问这些程序或数据时，访问速度就可以大大提高</li></ul></li></ul></li></ul><h2 id="主存储器"><a href="#主存储器" class="headerlink" title="主存储器"></a>主存储器</h2><h3 id="大小端"><a href="#大小端" class="headerlink" title="大小端"></a>大小端</h3><ul><li>大端模式：低地址放高位</li><li>小端模式：低地址放低位</li><li>x86是小端模式</li><li>unsigned int val = 0x12345678</li></ul><table><thead><tr><th>内存地址</th><th>小端模式</th><th>大端模式</th></tr></thead><tbody><tr><td>0x4000</td><td>0x78</td><td>0x12</td></tr><tr><td>0x4001</td><td>0x56</td><td>0x34</td></tr><tr><td>0x4002</td><td>0x34</td><td>0x56</td></tr><tr><td>0x4003</td><td>0x12</td><td>0x78</td></tr></tbody></table><h3 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h3><ul><li>寻址方式不同（存储单元的大小不同），寻址范围也即不同，总容量一致。</li><li>16MB存储器。（16MB = 16*1024*1024*8bit = 2^27bit)</li><li>按字节寻址<ul><li>寻址范围：2^24个地址；</li><li>容量：2^24 * 2^3 = 2^27bit</li></ul></li><li>按字(16位)寻址<ul><li>寻址范围：2^23个地址；</li><li>容量：2^23 * 2^4 = 2^27bit</li></ul></li><li>按字(32位)寻址<ul><li>寻址范围：2^22个地址；</li><li>容量：2^22 * 2^5 = 2^27bit</li></ul></li></ul><p><img src="/2022/05/05/%E5%AD%98%E5%82%A8%E5%99%A8/2022-05-05-10-46-25.png"></p><ul><li>例子<ul><li>地址线10条，即能寻2^10个地址</li><li>数据线4条，即一个地址一次可以读写4位</li><li>所以，芯片容量为 2^10 * 4 bit = 1K * 4 位</li></ul></li></ul><h3 id="静态RAM"><a href="#静态RAM" class="headerlink" title="静态RAM"></a>静态RAM</h3><h3 id="动态RAM"><a href="#动态RAM" class="headerlink" title="动态RAM"></a>动态RAM</h3><ul><li><a href="https://blog.csdn.net/qq_43610614/article/details/105660357">动态RAM刷新</a></li></ul><h3 id="只读存储器-ROM"><a href="#只读存储器-ROM" class="headerlink" title="只读存储器 ROM"></a>只读存储器 ROM</h3><h2 id="存储器和cpu相连"><a href="#存储器和cpu相连" class="headerlink" title="存储器和cpu相连"></a>存储器和cpu相连</h2><p><img src="/2022/05/05/%E5%AD%98%E5%82%A8%E5%99%A8/2022-05-10-10-00-53.png"></p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>计组里考试的寻址范围：是指存储器的寻址范围,是指按照字长/字节编址，能够实际找到地址(存储单元)的个数。<ul><li>计算方法 ： 用存储器的容量 / 按字长/字节寻址的单元大小</li></ul></li><li>csapp里提及的寻址范围，也即我们写代码经常认为的寻址范围：是指虚拟地址的范围。<ul><li>计算方法 ： 每台计算机都有一个字长。字长即为指针数据的位数.也因此,字长决定了虚拟地址空间的最大大小.因为,对于一个字长为w位的机器来说,虚拟地址范围是 : [0,2^w-1] . 程序最多方位 2^w个字节</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;存储器分类&quot;&gt;&lt;a href=&quot;#存储器分类&quot; class=&quot;headerlink&quot; title=&quot;存储器分类&quot;&gt;&lt;/a&gt;存储器分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;按存取方式分类&lt;ul&gt;
&lt;li&gt;存取时间与物理地址无关（随机访问）&lt;ul&gt;
&lt;li&gt;随机存取存储器：在程</summary>
      
    
    
    
    <category term="计算机组成原理" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="计算机基础" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="学校考试" scheme="http://example.com/tags/%E5%AD%A6%E6%A0%A1%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>dns(预习)</title>
    <link href="http://example.com/2022/05/04/%E7%BD%91%E7%BB%9C_dns/"/>
    <id>http://example.com/2022/05/04/%E7%BD%91%E7%BB%9C_dns/</id>
    <published>2022-05-04T10:37:49.000Z</published>
    <updated>2022-05-28T14:29:07.431Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://www.zhihu.com/question/35862960">知乎图片挂掉</a><ul><li>dns原因，改host文件</li></ul></li></ul><p><a href="https://zhuanlan.zhihu.com/p/106002231">https://zhuanlan.zhihu.com/p/106002231</a></p><ul><li>站长之家<br><img src="/2022/05/04/%E7%BD%91%E7%BB%9C_dns/2022-05-04-19-20-30.png"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/35862960&quot;&gt;知乎图片挂掉&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;dns原因，改host文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuan</summary>
      
    
    
    
    <category term="计算机基础" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="小白问题" scheme="http://example.com/tags/%E5%B0%8F%E7%99%BD%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>动态库/静态库</title>
    <link href="http://example.com/2022/05/04/%E5%8A%A8%E6%80%81%E5%BA%93_%E9%9D%99%E6%80%81%E5%BA%93/"/>
    <id>http://example.com/2022/05/04/%E5%8A%A8%E6%80%81%E5%BA%93_%E9%9D%99%E6%80%81%E5%BA%93/</id>
    <published>2022-05-04T10:24:24.000Z</published>
    <updated>2022-05-28T14:45:48.394Z</updated>
    
    <content type="html"><![CDATA[<ul><li>请看程序员自我修养</li></ul><p><a href="https://www.cnblogs.com/TenosDoIt/p/3203137.html">window</a><br><a href="https://blog.csdn.net/weixin_45157820/article/details/115789297">linux</a><br>linux 静态库和动态库都需要头文件.h</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;请看程序员自我修养&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/TenosDoIt/p/3203137.html&quot;&gt;window&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/wei</summary>
      
    
    
    
    
    <category term="基础知识" scheme="http://example.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>MySQL学习杂记(预习)</title>
    <link href="http://example.com/2022/05/04/MySQL%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%AE%B0/"/>
    <id>http://example.com/2022/05/04/MySQL%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%AE%B0/</id>
    <published>2022-05-04T03:38:50.000Z</published>
    <updated>2022-05-28T14:50:14.719Z</updated>
    
    <content type="html"><![CDATA[<ul><li>MySQL client和 MySQL server的区别<ul><li><code>用户登录MySQL Client &lt;---&gt; MySQL Server &lt;---&gt; MySQL数据库（一种文件）</code></li><li>Client 面向用户；Server 面向数据库。   </li><li>用户登录Client，通过Client向Server发送请求。</li><li>Server接收Client发送的请求，并根据请求，通过相应接口操作MySQL数据库（一种文件）。然后将得到的结果作为响应返回给Client。</li></ul></li><li>所以所谓的”MySQL”一般就是包括上面两个东西。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;MySQL client和 MySQL server的区别&lt;ul&gt;
&lt;li&gt;&lt;code&gt;用户登录MySQL Client &amp;lt;---&amp;gt; MySQL Server &amp;lt;---&amp;gt; MySQL数据库（一种文件）&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Cl</summary>
      
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="杂记" scheme="http://example.com/tags/%E6%9D%82%E8%AE%B0/"/>
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库连接池</title>
    <link href="http://example.com/2022/05/04/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>http://example.com/2022/05/04/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</id>
    <published>2022-05-04T02:37:03.000Z</published>
    <updated>2022-05-28T14:04:31.292Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>为了提高MySQL数据库（基于C/S设计）的访问瓶颈<ul><li>除了在服务器端增加缓存服务器缓（redis）存常用的数据之外。（减少磁盘IO）</li><li>还可以增加连接池，来提高MySQL Server的访问效率，在高并发情况下，大量的<br>TCP三次握手、MySQL Server连接认证、MySQL Server关闭连接回收资源和TCP四次挥手所耗费的性能时间也是很明显的，增加连接池就是为了减少这一部分的性能损耗。 </li></ul></li><li>本项目就是为了在C/C++项目中，提高MySQL Server的访问效率，实现基于C++代码的数据库连接池模块。</li></ul><h2 id="ConnectionPool"><a href="#ConnectionPool" class="headerlink" title="ConnectionPool"></a>ConnectionPool</h2><h3 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h3><ul><li>这里的MySQL数据库编程直接采用oracle公司提供的MySQL C/C++客户端开发包，在VS上需要进行相应的头文件和库文件的配置，如下：<ul><li>头文件目录。<ul><li>右键项目 - C/C++ - 常规 - 附加包含目录，填写mysql.h头文件的路径</li></ul></li><li>库目录。<ul><li>右键项目 - 链接器 - 常规 - 附加库目录，填写libmysql.lib的路径</li></ul></li><li>静态库名字<ul><li>右键项目 - 链接器 - 输入 - 附加依赖项，填写libmysql.lib库的名字</li></ul></li><li>动态库<ul><li>把libmysql.dll动态链接库（Linux下后缀名是.so库）放在工程目录下</li></ul></li></ul></li></ul><h3 id="功能点"><a href="#功能点" class="headerlink" title="功能点"></a>功能点</h3><blockquote><p><img src="/2022/05/04/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/2022-05-04-11-49-07.png"></p></blockquote><ul><li>连接池一般包含了数据库连接所用的ip地址、port端口号、用户名和密码以及其它的性能参数，例如初始连接量，最大连接量，最大空闲时间、连接超时时间等，该项目是基于C++语言实现的连接池，主要也是实现以上几个所有连接池都支持的通用基础功能。</li><li>初始连接量（initSize）<ul><li>表示连接池事先会和MySQL Server创建initSize个数的connection连接，当应用发起MySQL访问时，不用再创建和MySQL Server新的连接，直接从连接池中获取一个可用的连接就可以，使用完成后，并不去释放connection，而是把当前connection再归还到连接池当中。</li></ul></li><li>最大连接量（maxSize）<ul><li>当并发访问MySQL Server的请求增多时，初始连接量已经不够使用了，此时会根据新的请求数量去创建更多的连接给应用去使用，但是新创建的连接数量上限是maxSize，不能无限制的创建连接，因为每一个连接都会占用一个socket资源，一般连接池和服务器程序是部署在一台主机上的，如果连接池占用过多的socket资源，那么服务器就不能接收太多的客户端请求了。当这些连接使用完成后，再次归还到连接池当中来维护</li></ul></li><li>最大空闲时间（maxIdleTime）<ul><li>当访问MySQL的并发请求多了以后，连接池里面的连接数量会动态<br>增加，上限是maxSize个，当这些连接用完再次归还到连接池当中。如果在指定的maxIdleTime里面，这些新增加的连接都没有被再次使用过，那么新增加的这些连接资源就要被回收掉，只需要保持初始连接量initSize个连接就可以了</li></ul></li><li>连接超时时间（connectionTimeout）<ul><li>当MySQL的并发请求量过大，连接池中的连接数量已经到达<br>maxSize了，而此时没有空闲的连接可供使用，那么此时应用从连接池获取连接无法成功，它通过阻塞的方式获取连接的时间如果超过connectionTimeout时间，那么获取连接失败，无法访问数据库。</li></ul></li><li>该项目主要实现上述的连接池四大基本功能</li></ul><h3 id="功能实现设计"><a href="#功能实现设计" class="headerlink" title="功能实现设计"></a>功能实现设计</h3><ul><li>ConnectionPool.cpp和ConnectionPool.h：连接池代码实现</li><li>Connection.cpp和Connection.h：数据库操作代码、增删改查代码实现</li><li>连接池主要包含了以下功能点：<ul><li>连接池只需要一个实例，所以ConnectionPool以单例模式进行设计</li><li>从ConnectionPool中可以获取和MySQL的连接Connection</li><li>空闲连接Connection全部维护在一个线程安全的Connection队列中，使用线程互斥锁保证队列的线程安全</li><li>如果Connection队列为空，还需要再获取连接，此时需要动态创建连接，上限数量是maxSize</li><li>队列中空闲连接时间超过maxIdleTime的就要被释放掉，只保留初始的initSize个连接就可以了，这个功能点肯定需要放在独立的线程中去做</li><li>如果Connection队列为空，而此时连接的数量已达上限maxSize，那么等待connectionTimeout时间<ul><li>如果还获取不到空闲的连接，那么获取连接失败，此处从Connection队列获取空闲连接，可以使用带s超时时间的mutex互斥锁来实现连接超时时间</li></ul></li><li>用户获取的连接用shared_ptr智能指针来管理，用lambda表达式定制连接释放的功能（不真正释放连接，而是把连接归还到连接池中）</li><li>连接的生产和连接的消费采用生产者-消费者线程模型来设计，使用了线程间的同步通信机制条件变量和互斥锁</li></ul></li></ul><h3 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h3><ul><li><p>没用连接池<br><img src="/2022/05/04/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/2022-05-07-13-34-28.png"></p></li><li><p>用连接池<br><img src="/2022/05/04/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/2022-05-07-13-34-13.png"></p></li><li><p>connectionPool：管理连接的发起、存储、调用<br><img src="/2022/05/04/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/2022-05-06-23-25-27.png"></p></li><li><p>connection：具体连接的操作：增删改查等<br><img src="/2022/05/04/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/2022-05-06-23-25-53.png"></p></li></ul><h2 id="压测"><a href="#压测" class="headerlink" title="压测"></a>压测</h2><table><thead><tr><th>连接量</th><th>无连接池</th><th>有连接池</th></tr></thead><tbody><tr><td></td><td>单线程 / 四线程</td><td>单线程 / 四线程</td></tr><tr><td>1000</td><td>3676ms / 3850ms</td><td>809ms / 410ms</td></tr><tr><td>5000</td><td>70142ms / 19898ms</td><td>3391ms /1478ms</td></tr><tr><td>10000</td><td>140369ms / 41888ms</td><td>6756ms / 2716ms</td></tr></tbody></table><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li>了解MySQL数据库编程、熟练单例模式、queue队列容器、C++11多线程编程、线程互斥、线程同步通信、unique_lock、基于CAS的原子整形、智能指针shared_ptr、lambda表达式、生产者-消费者线程模型。</li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>测试代码中没有用到生产者线程<ul><li>因为空闲连接队列始终不为空，所以没有唤醒生产者线程的机会。</li><li>为什么空闲连接队列不为空？因为for循环，每个连接的生命周期就是一个循环内，过了这个循环，这个连接的生命周期就没了。我们重写了shared_ptr的析构器，析构器里做得事情是把连接放回连接池queue。所以连接池始终不为空。始终用的是一开始的那initSize个连接。</li></ul></li><li>那么生产者线程害有必要吗？<ul><li>很有必要。因为实际连接中，一个用户很有可能对这个连接进行长时间增删改查操作，所以放不回连接池。所以需要生产者造新线程，放入连接池。</li></ul></li></ul><ul><li>vector里面放裸指针导致内存泄漏<ul><li>无法在一开始定义时就在queu中放shared_ptr，因为我们在返还给用户时需要删除器是放回pool的queue；而在pool生命周期结束时我们需要的是delete这些Connection指针。只能在定义智能指针时设定删除器，无法后来改变。</li><li>所以只能在pool的析构函数里delete掉queue中的裸指针。</li></ul></li></ul><ul><li>共享资源queue的连接增加减少操作<ul><li>queue<ul><li>加入空闲连接：<ul><li>初始化</li><li>pool的生产者线程：生产空闲连接</li><li>client拿到的连接已过作用域/生命周期</li></ul></li><li>减少空闲连接：<ul><li>getConnection消费者线程：拿出空闲连接给用户</li><li>scann扫描线程：拿出多余空闲连接释放</li></ul></li></ul></li></ul></li></ul><ul><li><strong>为什么多线程就比单线程快？因为cpu是多核？</strong><ul><li>首先多线程还是有必要的：为了让用户体验好，不然第100个用户要等到前面99个用户都处理完才能做事。</li><li>为什么总体时间也变短了？是因为多核吗。</li></ul></li></ul><ul><li>线程分离后<ul><li>主线程main结束后，分离的线程也立刻结束</li><li>但是我记得APUE上好像没明确说。待验证。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">windows c++跨平台库</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">milliseconds</span>(<span class="number">1000</span>));</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;running&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t</span><span class="params">(work)</span></span>;</span><br><span class="line">    t.<span class="built_in">detach</span>();</span><br><span class="line">    this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">milliseconds</span>(<span class="number">5000</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">running</span><br><span class="line">running</span><br><span class="line">running</span><br><span class="line">running</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line">==============================================</span><br><span class="line">linux C</span><br><span class="line"><span class="keyword">void</span> *<span class="built_in">work</span>(<span class="keyword">void</span> *arg)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;running&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> id;</span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;id,<span class="literal">NULL</span>,work,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">pthread_detach</span>(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shc@shc-<span class="keyword">virtual</span>-machine:~/code/<span class="keyword">try</span>$ ./test.out </span><br><span class="line">running</span><br><span class="line">running</span><br><span class="line">running</span><br><span class="line">running</span><br><span class="line">shc@shc-<span class="keyword">virtual</span>-machine:~/code/<span class="keyword">try</span>$ </span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li><a href="https://github.com/Cstardust/ConnectionPool/edit/main/README.md">仓库地址</a></li><li>CommonConnectionPool.h<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _COMMONCONNECTIONPOOL_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _COMMONCONNECTIONPOOL_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;public.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Connection.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::<span class="keyword">atomic_int</span>;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::queue;</span><br><span class="line"><span class="keyword">using</span> std::mutex;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 线程池</span></span><br><span class="line"><span class="comment">* 单例模式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonConnectionPool</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//  static函数：为了在还没有对象时就可调用</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> CommonConnectionPool* <span class="title">getCommonConnectionPool</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//  消费者线程</span></span><br><span class="line"><span class="comment">//  给外部提供接口，从连接池重获取一个可用的空闲连接 </span></span><br><span class="line"><span class="comment">//  我们需要重定义shared_ptr的析构器</span></span><br><span class="line"><span class="function">shared_ptr&lt;Connection&gt; <span class="title">getConnection</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CommonConnectionPool</span>(<span class="keyword">const</span> CommonConnectionPool&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">CommonConnectionPool&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> CommonConnectionPool&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">~<span class="built_in">CommonConnectionPool</span>() &#123;<span class="comment">//  释放资源</span></span><br><span class="line"><span class="keyword">while</span> (!_connectionQueue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">Connection * p = _connectionQueue.<span class="built_in">front</span>();</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">_connectionQueue.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//  构造函数私有</span></span><br><span class="line"><span class="built_in">CommonConnectionPool</span>();</span><br><span class="line"><span class="comment">//  加载配置文件</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">loadConfigFile</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//  生产者线程</span></span><br><span class="line"><span class="comment">//  运行在独立的线程中，专门负责生产新连接</span></span><br><span class="line"><span class="comment">//  设置为成员函数而非全局函数的好处：可以方便的访问连接池中的成员</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">produceConnectionTask</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  定时检测线程</span></span><br><span class="line"><span class="comment">//  定时检测并释放空闲连接</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scannConnectionTask</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  mysql信息</span></span><br><span class="line">string _ip;<span class="comment">//  mysql server ip</span></span><br><span class="line"><span class="keyword">unsigned</span>  _port;<span class="comment">//  mysql server port</span></span><br><span class="line">string _name;<span class="comment">//  mysql server 登录用户名</span></span><br><span class="line">string _password;<span class="comment">//  mysql server 登录密码</span></span><br><span class="line">string _dbname;<span class="comment">//  要访问的数据库名称</span></span><br><span class="line"><span class="comment">//  配置连接池</span></span><br><span class="line"><span class="keyword">int</span> _initSize;<span class="comment">//  连接池的初始连接量    </span></span><br><span class="line"><span class="keyword">int</span> _maxSize;<span class="comment">//  连接池空闲连接的最大连接量       1024个  queue里最多只能有1024个空闲连接。</span></span><br><span class="line"><span class="keyword">int</span> _maxIdleTime;<span class="comment">//  连接池中空闲连接的最大空闲时间   60s  (在queue里待的最长时间）超过则释放。scan线程里用到。本压测代码不会触发。</span></span><br><span class="line"><span class="keyword">int</span> _connectionTimeout;<span class="comment">//  用户从连接池获取连接的超时时间     100ms  超时后则放弃获取连接。在getConnection线程里用到。本压测代码不会被触发。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  连接池自己的成员</span></span><br><span class="line">queue&lt;Connection*&gt; _connectionQueue;<span class="comment">//  存储mysql连接的队列</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">atomic_int</span> _cntOfconns;    <span class="comment">//  连接数目</span></span><br><span class="line">condition_variable _cv;<span class="comment">//  条件变量 （应用生产者消费者模型）</span></span><br><span class="line">mutex _queueMtx;<span class="comment">//  锁</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !_COMMONCONNECTIONPOOL_H_</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>CommonConnectionPool.cpp<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;CommonConnectionPool.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  atomic_int reuse_cnt = 0;</span></span><br><span class="line"><span class="comment">//  atomic_int produce_cnt = 0;</span></span><br><span class="line"></span><br><span class="line"><span class="function">CommonConnectionPool* <span class="title">CommonConnectionPool::getCommonConnectionPool</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> CommonConnectionPool pool;</span><br><span class="line"><span class="keyword">return</span> &amp;pool;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CommonConnectionPool::loadConfigFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//  以下应该可以用c++的文件流替换。整体写完再改</span></span><br><span class="line">FILE* pf = <span class="built_in">fopen</span>(<span class="string">&quot;mysql.ini&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pf == <span class="literal">nullptr</span>) &#123;</span><br><span class="line"><span class="built_in">LOG</span>(<span class="string">&quot;mysql.ini file is not existed&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">feof</span>(pf))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> line[<span class="number">512</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">fgets</span>(line, <span class="number">512</span>, pf) == <span class="literal">nullptr</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">str</span><span class="params">(line)</span></span>;</span><br><span class="line"><span class="keyword">int</span> idx = str.<span class="built_in">find</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (idx == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">// username=root</span></span><br><span class="line"><span class="keyword">int</span> end_idx = str.<span class="built_in">find</span>(<span class="string">&#x27;\n&#x27;</span>,idx);<span class="comment">//  find(char,pos)。从pos开始招char</span></span><br><span class="line"><span class="keyword">if</span> (end_idx == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="function">string <span class="title">key</span><span class="params">(str.substr(<span class="number">0</span>, idx))</span></span>;<span class="comment">//  substr(pos,len)。从pos开始，截取长度为len的字符串</span></span><br><span class="line"><span class="function">string <span class="title">val</span><span class="params">(str.substr(idx + <span class="number">1</span>, end_idx - <span class="number">1</span> - (idx + <span class="number">1</span>) + <span class="number">1</span>))</span></span>;</span><br><span class="line"><span class="comment">//  以下是否可以用bind function替换？ 待研究</span></span><br><span class="line"><span class="keyword">if</span> (key == <span class="string">&quot;ip&quot;</span>) &#123;</span><br><span class="line">_ip = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">&quot;port&quot;</span>) &#123;</span><br><span class="line">_port = <span class="built_in">atoi</span>(val.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">&quot;username&quot;</span>) &#123;</span><br><span class="line">_name = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">&quot;password&quot;</span>) &#123;</span><br><span class="line">_password = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">&quot;dbname&quot;</span>) &#123;</span><br><span class="line">_dbname = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">&quot;initSize&quot;</span>) &#123;</span><br><span class="line">_initSize = <span class="built_in">atoi</span>(val.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">&quot;maxSize&quot;</span>) &#123;</span><br><span class="line">_maxSize = <span class="built_in">atoi</span>(val.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">&quot;maxIdleTime&quot;</span>) &#123;</span><br><span class="line">_maxIdleTime = <span class="built_in">atoi</span>(val.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">&quot;maxConnectionTimeout&quot;</span>) &#123;</span><br><span class="line">_connectionTimeout = <span class="built_in">atoi</span>(val.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  初始化</span></span><br><span class="line">CommonConnectionPool::<span class="built_in">CommonConnectionPool</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//  加载配置</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">loadConfigFile</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//   throw吧</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  创建初始数量的连接</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _initSize; ++i) &#123;</span><br><span class="line">Connection* p = <span class="keyword">new</span> <span class="built_in">Connection</span>();</span><br><span class="line">p-&gt;<span class="built_in">connect</span>(_ip, _port,_name, _password, _dbname);</span><br><span class="line">_connectionQueue.<span class="built_in">push</span>(p);<span class="comment">//  空闲连接加入队列</span></span><br><span class="line">p-&gt;<span class="built_in">refreshAliveTime</span>();<span class="comment">//  更新时间</span></span><br><span class="line">++_cntOfconns;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  启动一个新的线程，作为连接的生产者。</span></span><br><span class="line"><span class="comment">//  因为是成员函数，所以要传一个this</span></span><br><span class="line"><span class="function">thread <span class="title">produce</span><span class="params">(&amp;CommonConnectionPool::produceConnectionTask, <span class="keyword">this</span>)</span></span>;</span><br><span class="line">produce.<span class="built_in">detach</span>();<span class="comment">//  线程分离 </span></span><br><span class="line"><span class="comment">//  扫描线程</span></span><br><span class="line"><span class="function">thread <span class="title">scanner</span><span class="params">(&amp;CommonConnectionPool::scannConnectionTask, <span class="keyword">this</span>)</span></span>;</span><br><span class="line">scanner.<span class="built_in">detach</span>();<span class="comment">//  线程分离</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  生产者-消费者模型 </span></span><br><span class="line"><span class="comment">//  生产Connection。在队列不为空时不占cpu</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CommonConnectionPool::produceConnectionTask</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//  上锁</span></span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">uni_lck</span><span class="params">(_queueMtx)</span></span>;</span><br><span class="line"><span class="comment">//  为空时再生产 其余时候阻塞 不占cpu</span></span><br><span class="line"><span class="keyword">while</span> (!_connectionQueue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">_cv.<span class="built_in">wait</span>(uni_lck);<span class="comment">//  1.释放锁 2.阻塞等待条件变量 3.条件变量符合后被唤醒 再次lock</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (_cntOfconns &lt; _maxSize) &#123;</span><br><span class="line"><span class="comment">//  生产</span></span><br><span class="line">Connection* pc = <span class="keyword">new</span> <span class="built_in">Connection</span>();</span><br><span class="line"><span class="keyword">if</span> (!pc-&gt;<span class="built_in">connect</span>(_ip, _port, _name, _password, _dbname)) &#123;</span><br><span class="line"><span class="built_in">LOG</span>(<span class="string">&quot;MySQL connection failed&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">++_cntOfconns;</span><br><span class="line">_connectionQueue.<span class="built_in">push</span>(pc);</span><br><span class="line">pc-&gt;<span class="built_in">refreshAliveTime</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  cout&lt;&lt;&quot;produce_cnt &quot;&lt;&lt;produce_cnt++&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//  唤醒其他阻塞在条件变量上的线程（消费者线程）</span></span><br><span class="line">_cv.<span class="built_in">notify_all</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  消费者线程</span></span><br><span class="line"><span class="comment">//  给外部提供接口，从连接池中获取一个可用的空闲连接</span></span><br><span class="line"><span class="function">shared_ptr&lt;Connection&gt; <span class="title">CommonConnectionPool::getConnection</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//  上锁</span></span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">uni_lck</span><span class="params">(_queueMtx)</span></span>;</span><br><span class="line"><span class="comment">//  等待</span></span><br><span class="line"><span class="keyword">while</span> (_connectionQueue.<span class="built_in">empty</span>()) &#123;<span class="comment">//  有可能两个消费者同时在等待条件变量，然后生产者生产了一个。有一个消费者先拿到，另一个没拿到。但是这种情况另一个虽然没拿到，可是生产者仍有能力再生产。所以要while循环。</span></span><br><span class="line"><span class="comment">//  为空、通知生产</span></span><br><span class="line"> _cv.<span class="built_in">notify_all</span>();</span><br><span class="line"><span class="comment">//  等待_connectionTimeout ms</span></span><br><span class="line">cv_status st = _cv.<span class="built_in">wait_for</span>(uni_lck,chrono::<span class="built_in">milliseconds</span>(_connectionTimeout));</span><br><span class="line"><span class="keyword">if</span> (st == cv_status::timeout &amp;&amp; _connectionQueue.<span class="built_in">empty</span>()) &#123;<span class="comment">//  超时且队列为空，则无法再获取新连接</span></span><br><span class="line"><span class="built_in">LOG</span>(<span class="string">&quot;获取空闲连接超时，获取连接失败！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  消费 返回给用户一个封装好的Connection智能指针。</span></span><br><span class="line"><span class="comment">//  shared_ptr智能指针析构时，connection就被close掉了</span></span><br><span class="line"><span class="comment">//  我们需要重定义shared_ptr释放资源的方式 使用lambda表达式</span></span><br><span class="line"><span class="function">shared_ptr&lt;Connection&gt; <span class="title">sp</span><span class="params">(_connectionQueue.front(), [&amp;](Connection* pcon)-&gt;<span class="keyword">void</span> &#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="comment">//  cout&lt;&lt;&quot;reuse_cnt &quot;&lt;&lt;++reuse_cnt &lt;&lt; endl;</span></span></span></span><br><span class="line"><span class="params"><span class="function">lock_guard&lt;mutex&gt; guard(_queueMtx);<span class="comment">//  线程安全</span></span></span></span><br><span class="line"><span class="params"><span class="function">_connectionQueue.push(pcon);</span></span></span><br><span class="line"><span class="params"><span class="function">pcon-&gt;refreshAliveTime();</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;)</span></span>;</span><br><span class="line">_connectionQueue.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//  队列为空，则通知生产</span></span><br><span class="line"><span class="keyword">if</span> (_connectionQueue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">_cv.<span class="built_in">notify_all</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  返回</span></span><br><span class="line"><span class="keyword">return</span> sp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CommonConnectionPool::scannConnectionTask</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//  定时检查</span></span><br><span class="line">this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">seconds</span>(_maxIdleTime));<span class="comment">//  60s</span></span><br><span class="line"><span class="comment">//  扫描队列 释放资源</span></span><br><span class="line"><span class="function">lock_guard&lt;mutex&gt; <span class="title">guard</span><span class="params">(_queueMtx)</span></span>;</span><br><span class="line"><span class="keyword">while</span> (!(_connectionQueue.<span class="built_in">empty</span>()) &amp;&amp; _connectionQueue.<span class="built_in">size</span>()&gt;_initSize) &#123;</span><br><span class="line">Connection* pt = _connectionQueue.<span class="built_in">front</span>();</span><br><span class="line"><span class="keyword">if</span> (pt-&gt;<span class="built_in">getAliveTime</span>() &lt;= _maxIdleTime*<span class="number">1000</span>)<span class="comment">//  靠前的没过期 那么靠后的也一定没过期</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">_connectionQueue.<span class="built_in">pop</span>();<span class="comment">//  弹出</span></span><br><span class="line">--_cntOfconns;<span class="comment">//  队列数量--</span></span><br><span class="line"><span class="keyword">delete</span> pt;<span class="comment">//  关闭连接</span></span><br><span class="line"><span class="built_in">LOG</span>(<span class="string">&quot;delete&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 线程分离</span></span><br><span class="line"><span class="comment">* 线程分离状态：指定该状态，线程主动与主控线程断开关系。线程结束后，其退出状态不由其他线程获取，而</span></span><br><span class="line"><span class="comment">直接自己自动释放。网络、多线程服务器常用。</span></span><br><span class="line"><span class="comment">进程若有该机制，将不会产生僵尸进程。僵尸进程的产生主要由于进程死后，大部分资源被释放，一点残留资</span></span><br><span class="line"><span class="comment">源仍存于系统中，导致内核认为该进程仍存在</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Connection.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _CONNECTION_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CONNECTION_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;public.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库操作类。负责与MySQL数据库进行交互。如连接Server，以及操作数据库文件。</span></span><br><span class="line"><span class="comment">//  Connection封装了MySQL第三方库提供的原生接口.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 初始化数据库连接</span></span><br><span class="line"><span class="built_in">Connection</span>();</span><br><span class="line"><span class="comment">// 释放数据库连接资源</span></span><br><span class="line">~<span class="built_in">Connection</span>();</span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">connect</span><span class="params">(string ip,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">short</span> port, </span></span></span><br><span class="line"><span class="params"><span class="function">string user, </span></span></span><br><span class="line"><span class="params"><span class="function">string password,</span></span></span><br><span class="line"><span class="params"><span class="function">string dbname)</span></span>;</span><br><span class="line"><span class="comment">// 更新操作 insert、delete、update</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">update</span><span class="params">(string sql)</span></span>;</span><br><span class="line"><span class="comment">// 查询操作 select</span></span><br><span class="line"><span class="function">MYSQL_RES* <span class="title">query</span><span class="params">(string sql)</span></span>;</span><br><span class="line"><span class="comment">//  更新起始时间 ms为单位</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">refreshAliveTime</span><span class="params">()</span> </span>&#123; _alivetime = <span class="built_in">clock</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">clock_t</span> <span class="title">getAliveTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">clock</span>() -_alivetime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">MYSQL* _conn;<span class="comment">//  表示和MySQL Server的一条连接</span></span><br><span class="line"><span class="keyword">clock_t</span> _alivetime;<span class="comment">//  记录进入空闲状态后的起始时间</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  mysql.h 里都是函数和结构体、变量的声明</span></span><br><span class="line"><span class="comment">//  函数的实现我们见不到，被封在动态库里了。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li><li><p>Connection.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Connection.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化数据库连接</span></span><br><span class="line">Connection::<span class="built_in">Connection</span>()</span><br><span class="line">&#123;</span><br><span class="line">_conn = <span class="built_in">mysql_init</span>(<span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放数据库连接资源</span></span><br><span class="line">Connection::~<span class="built_in">Connection</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LOG</span>(<span class="string">&quot;~Connection&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (_conn != <span class="literal">nullptr</span>)</span><br><span class="line"><span class="built_in">mysql_close</span>(_conn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line"><span class="comment">//  讲MySQL* _conn连接到MySQL server上</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Connection::connect</span><span class="params">(string ip, <span class="keyword">unsigned</span> <span class="keyword">short</span> port, string user, string password,string dbname)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MYSQL* p = <span class="built_in">mysql_real_connect</span>(_conn, ip.<span class="built_in">c_str</span>(), user.<span class="built_in">c_str</span>(),</span><br><span class="line">password.<span class="built_in">c_str</span>(), dbname.<span class="built_in">c_str</span>(), port, <span class="literal">nullptr</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> p != <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新操作 insert、delete、update</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Connection::update</span><span class="params">(string sql)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_query</span>(_conn, sql.<span class="built_in">c_str</span>()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LOG</span>(<span class="string">&quot;更新失败:&quot;</span> + sql);</span><br><span class="line">cout &lt;&lt; <span class="built_in">mysql_errno</span>(_conn) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">mysql_error</span>(_conn) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查询操作 select</span></span><br><span class="line"><span class="function">MYSQL_RES* <span class="title">Connection::query</span><span class="params">(string sql)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_query</span>(_conn, sql.<span class="built_in">c_str</span>()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LOG</span>(<span class="string">&quot;查询失败:&quot;</span> + sql);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">mysql_use_result</span>(_conn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>main.cpp</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Connection.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;CommonConnectionPool.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn / <span class="number">4</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">Connection conn;</span><br><span class="line"><span class="keyword">char</span> sql[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">sprintf</span>(sql, <span class="string">&quot;insert into user(name,age,sex) values(&#x27;%s&#x27;,%d,&#x27;%s&#x27;)&quot;</span>,</span><br><span class="line"><span class="string">&quot;zhang san&quot;</span>, <span class="number">20</span>, <span class="string">&quot;female&quot;</span>);</span><br><span class="line">conn.<span class="built_in">connect</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">13306</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;C361456shc&quot;</span>, <span class="string">&quot;chat&quot;</span>);</span><br><span class="line">conn.<span class="built_in">update</span>(sql);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//  CommonConnectionPool* p = CommonConnectionPool::getCommonConnectionPool();</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//  添加测试MySQL第三方库接口</span></span><br><span class="line"><span class="comment">Connection conn;</span></span><br><span class="line"><span class="comment">char sql[1024];</span></span><br><span class="line"><span class="comment">sprintf(sql, &quot;insert into user(name,age,sex) values(&#x27;%s&#x27;,%d,&#x27;%s&#x27;)&quot;, </span></span><br><span class="line"><span class="comment">&quot;zhang san&quot;, 20, &quot;female&quot;);</span></span><br><span class="line"><span class="comment">conn.connect(&quot;127.0.0.1&quot;, 13306, &quot;root&quot;, &quot;C361456shc&quot;,&quot;chat&quot;);</span></span><br><span class="line"><span class="comment">conn.update(sql);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="keyword">clock_t</span> bg = <span class="built_in">clock</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">Connection conn;</span><br><span class="line"><span class="keyword">char</span> sql[<span class="number">1024</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">sprintf</span>(sql, <span class="string">&quot;insert into user(name,age,sex) values(&#x27;%s&#x27;,%d,&#x27;%s&#x27;)&quot;</span>,</span><br><span class="line"><span class="string">&quot;zhang san&quot;</span>, <span class="number">20</span>, <span class="string">&quot;female&quot;</span>);</span><br><span class="line">conn.<span class="built_in">connect</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">13306</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;C361456shc&quot;</span>, <span class="string">&quot;chat&quot;</span>);</span><br><span class="line">conn.<span class="built_in">update</span>(sql);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">clock_t</span> ed = <span class="built_in">clock</span>();</span><br><span class="line">cout &lt;&lt; (ed - bg) &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">else</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">clock_t</span> bg = <span class="built_in">clock</span>();</span><br><span class="line"><span class="comment">//  加载配置文件、创建initSize连接、开启生产者线程、开启扫描线程</span></span><br><span class="line">CommonConnectionPool *p = CommonConnectionPool::<span class="built_in">getCommonConnectionPool</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> sql[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">sprintf</span>(sql, <span class="string">&quot;insert into user(name,age,sex) values(&#x27;%s&#x27;,%d,&#x27;%s&#x27;)&quot;</span>,</span><br><span class="line"><span class="string">&quot;zhang san&quot;</span>, <span class="number">20</span>, <span class="string">&quot;female&quot;</span>);</span><br><span class="line"><span class="comment">//  从连接池pool中获取连接connection</span></span><br><span class="line">shared_ptr&lt;Connection&gt; sp = p-&gt;<span class="built_in">getConnection</span>();</span><br><span class="line"><span class="comment">//  对connection进行操作</span></span><br><span class="line">sp-&gt;<span class="built_in">connect</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">13306</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;C361456shc&quot;</span>, <span class="string">&quot;chat&quot;</span>);</span><br><span class="line">sp-&gt;<span class="built_in">update</span>(sql);</span><br><span class="line"><span class="comment">//  一轮结束之后，sp就会调用删除器，把这个Connection*放回pool的queue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">clock_t</span> ed = <span class="built_in">clock</span>();</span><br><span class="line">cout &lt;&lt; (ed - bg) &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"> Connection conn;</span><br><span class="line"> conn.<span class="built_in">connect</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">13306</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;C361456shc&quot;</span>, <span class="string">&quot;chat&quot;</span>);</span><br><span class="line"><span class="keyword">clock_t</span> bg = <span class="built_in">clock</span>();</span><br><span class="line"><span class="function">thread <span class="title">t1</span><span class="params">(work)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">t2</span><span class="params">(work)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">t3</span><span class="params">(work)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">t4</span><span class="params">(work)</span></span>;</span><br><span class="line">t1.<span class="built_in">join</span>();</span><br><span class="line">t2.<span class="built_in">join</span>();</span><br><span class="line">t3.<span class="built_in">join</span>();</span><br><span class="line">t4.<span class="built_in">join</span>();</span><br><span class="line"><span class="keyword">clock_t</span> ed = <span class="built_in">clock</span>();</span><br><span class="line">std::cout &lt;&lt; (ed - bg) &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">clock_t</span> bg = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">CommonConnectionPool* p = CommonConnectionPool::<span class="built_in">getCommonConnectionPool</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10000</span>;</span><br><span class="line"><span class="function">thread <span class="title">t1</span><span class="params">([&amp;]() &#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn / <span class="number">4</span>; ++i)</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">char</span> sql[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span></span></span><br><span class="line"><span class="params"><span class="function">sprintf(sql, <span class="string">&quot;insert into user(name,age,sex) values(&#x27;%s&#x27;,%d,&#x27;%s&#x27;)&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="string">&quot;zhang san&quot;</span>, <span class="number">20</span>, <span class="string">&quot;female&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">shared_ptr&lt;Connection&gt; sp = p-&gt;getConnection();</span></span></span><br><span class="line"><span class="params"><span class="function">sp-&gt;connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">13306</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;C361456shc&quot;</span>, <span class="string">&quot;chat&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">sp-&gt;update(sql);</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t2</span><span class="params">([&amp;]() &#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn / <span class="number">4</span>; ++i)</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">char</span> sql[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span></span></span><br><span class="line"><span class="params"><span class="function">sprintf(sql, <span class="string">&quot;insert into user(name,age,sex) values(&#x27;%s&#x27;,%d,&#x27;%s&#x27;)&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="string">&quot;zhang san&quot;</span>, <span class="number">20</span>, <span class="string">&quot;female&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">shared_ptr&lt;Connection&gt; sp = p-&gt;getConnection();</span></span></span><br><span class="line"><span class="params"><span class="function">sp-&gt;connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">13306</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;C361456shc&quot;</span>, <span class="string">&quot;chat&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">sp-&gt;update(sql);</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t3</span><span class="params">([&amp;]() &#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn / <span class="number">4</span>; ++i)</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">char</span> sql[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span></span></span><br><span class="line"><span class="params"><span class="function">sprintf(sql, <span class="string">&quot;insert into user(name,age,sex) values(&#x27;%s&#x27;,%d,&#x27;%s&#x27;)&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="string">&quot;zhang san&quot;</span>, <span class="number">20</span>, <span class="string">&quot;female&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">shared_ptr&lt;Connection&gt; sp = p-&gt;getConnection();</span></span></span><br><span class="line"><span class="params"><span class="function">sp-&gt;connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">13306</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;C361456shc&quot;</span>, <span class="string">&quot;chat&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">sp-&gt;update(sql);</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t4</span><span class="params">([&amp;]() &#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn / <span class="number">4</span>; ++i)</span></span></span><br><span class="line"><span class="params"><span class="function">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">char</span> sql[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span></span></span><br><span class="line"><span class="params"><span class="function">sprintf(sql, <span class="string">&quot;insert into user(name,age,sex) values(&#x27;%s&#x27;,%d,&#x27;%s&#x27;)&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="string">&quot;zhang san&quot;</span>, <span class="number">20</span>, <span class="string">&quot;female&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">shared_ptr&lt;Connection&gt; sp = p-&gt;getConnection();</span></span></span><br><span class="line"><span class="params"><span class="function">sp-&gt;connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">13306</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;C361456shc&quot;</span>, <span class="string">&quot;chat&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">sp-&gt;update(sql);</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">t1.<span class="built_in">join</span>();</span><br><span class="line">t2.<span class="built_in">join</span>();</span><br><span class="line">t3.<span class="built_in">join</span>();</span><br><span class="line">t4.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">clock_t</span> ed = <span class="built_in">clock</span>();</span><br><span class="line">cout &lt;&lt; (ed - bg) &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;为了提高MySQL数据库（基于C/S设计）的访问瓶颈&lt;ul&gt;
&lt;li&gt;除了在服务器端增加缓存服务器缓（redis）存常用的数据之</summary>
      
    
    
    
    <category term="项目" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="项目" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="数据库编程" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>对象创建模式</title>
    <link href="http://example.com/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-03T14:56:24.000Z</published>
    <updated>2022-05-28T14:54:47.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象创建模式"><a href="#对象创建模式" class="headerlink" title="对象创建模式"></a>对象创建模式</h1><ul><li>通过“对象创建” 模式绕开new，来避免对象创建（new）过程中所导致的紧耦合（依赖具体类），从而支持对象创建的稳定。它是接口抽象之后的第一步工作。</li><li>典型模式<ul><li>Factory Method</li><li>Abstract Factory</li><li>Prototype</li><li>Builder</li></ul></li></ul><h2 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h2><ul><li>简单工厂 Simple Factory : <ul><li>把对象的创建封装在一个接口函数里面，通过传入不同的标识，返回创建的对象</li></ul></li><li>好处（是个工厂都有这好处）：客户不用自己负责new对象，不用了解对象创建的详细过程</li><li>缺点：提供创建对象实例的接口函数不闭合，不能对修改关闭</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">简单工厂 Simple Factory : </span></span><br><span class="line"><span class="comment">把对象的创建封装在一个接口函数里面，通过传入不同的标识，返回创建的对象</span></span><br><span class="line"><span class="comment">客户不用自己负责new对象，不用了解对象创建的详细过程</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">提供创建对象实例的接口函数不闭合，不能对修改关闭</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">工厂方法 Factory Method</span></span><br><span class="line"><span class="comment">Factory基类，提供了一个纯虚函数（创建产品），定义派生类（具体产品的工厂）负责创建对应的</span></span><br><span class="line"><span class="comment">产品，可以做到不同的产品，在不同的工厂里面创建，能够对现有工厂，以及产品的修改关闭</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">实际上，很多产品是有关联关系的，属于一个产品簇，不应该放在不同的工厂里面去创建，这样</span></span><br><span class="line"><span class="comment">一是不符合实际的产品对象创建逻辑，二是工厂类太多了，不好维护</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">抽象工厂 Abstract Factory</span></span><br><span class="line"><span class="comment">把有关联关系的，属于一个产品簇的所有产品创建的接口函数，放在一个抽象工厂里面AbstractFactory</span></span><br><span class="line"><span class="comment">，派生类（具体产品的工厂）应该负责创建该产品簇里面所有的产品</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">工厂模式：主要是封装了对象的创建</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 系列产品1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Car</span>(string name) :_name(name) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">string _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bmw</span> :</span> <span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Bmw</span>(string name) :<span class="built_in">Car</span>(name) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;获取了一辆宝马汽车:&quot;</span> &lt;&lt; _name&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Audi</span> :</span> <span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Audi</span>(string name) :<span class="built_in">Car</span>(name) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;获取了一辆奥迪汽车:&quot;</span> &lt;&lt; _name&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单工厂</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CarType</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">BMW,AUDI</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Car* <span class="title">createCar</span><span class="params">(CarType ct)</span> <span class="comment">// 不符合软件设计 “开-闭”</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (ct)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> BMW:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Bmw</span>(<span class="string">&quot;X1&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> AUDI:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Audi</span>(<span class="string">&quot;A6&quot;</span>);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cerr &lt;&lt; <span class="string">&quot;传入工厂的参数不正确:&quot;</span> &lt;&lt; ct &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_ptr&lt;SimpleFactory&gt; <span class="title">factory</span><span class="params">(<span class="keyword">new</span> SimpleFactory())</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;Car&gt; <span class="title">p1</span><span class="params">(factory-&gt;createCar(BMW))</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;Car&gt; <span class="title">p2</span><span class="params">(factory-&gt;createCar(AUDI))</span></span>;</span><br><span class="line">p1-&gt;<span class="built_in">show</span>();</span><br><span class="line">p2-&gt;<span class="built_in">show</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>这也就是所谓工厂方法模式</p><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><ul><li><p>在软件系统中，经常面临着创建对象的工作；由于需求的变化，需要创建的对象的具体类型<strong>经常变化</strong>。</p></li><li><p>如何应对这种变化？如何绕过常规的对象创建方法(new)，提供一种“封装机制”来避免客户程序和这种“具体对象创建工作”的紧耦合</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3></li><li><p><strong>工厂定义一个用于创建对象的接口，让子类决定实例化哪一个类。<code>Factory Method</code>使得一个类的实例化延迟（目的：解耦，手段：虚函数）到子类。</strong></p><h3 id="过程推演"><a href="#过程推演" class="headerlink" title="过程推演"></a>过程推演</h3></li><li><p><img src="/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F/2022-03-20-16-59-29.png"></p></li><li><p><img src="/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F/2022-03-20-17-13-24.png"></p></li><li><p>virtual：一种延迟，延迟绑定到运行时<br><img src="/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F/2022-03-20-17-18-31.png"></p></li><li><p><img src="/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F/2022-03-20-17-26-57.png"></p></li><li><p>C++语言本身没有提供多态new，但是我们通过virtual和指针，创造出了多态new</p></li><li><p>虽然之后还会在类外面new 具体的 factory，但是 MainForm里面，再也没有对具体Factory的依赖了。</p></li><li><p><strong>设计模式的松耦合设计，很多时候并不是把变化消灭，也即：并不是把依赖具体类的这个事情消灭掉，而是把它们转移到某个局部的地方。</strong></p><ul><li><strong>也就是，把“变化”这只猫关进笼子里，而不是让他在代码里跳来跳去</strong></li></ul></li></ul><h3 id="最终"><a href="#最终" class="headerlink" title="最终"></a>最终</h3><ul><li><p>抽象类和工厂基类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ISplitter</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">ISplitter</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工厂基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SplitterFactory</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">CreateSplitter</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">SplitterFactory</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>具体类和具体工厂</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//具体类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySplitter</span> :</span> <span class="keyword">public</span> ISplitter&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TxtSplitter</span>:</span> <span class="keyword">public</span> ISplitter&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PictureSplitter</span>:</span> <span class="keyword">public</span> ISplitter&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoSplitter</span>:</span> <span class="keyword">public</span> ISplitter&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySplitterFactory</span>:</span> <span class="keyword">public</span> SplitterFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">CreateSplitter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">BinarySplitter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TxtSplitterFactory</span>:</span> <span class="keyword">public</span> SplitterFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">CreateSplitter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TxtSplitter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PictureSplitterFactory</span>:</span> <span class="keyword">public</span> SplitterFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">CreateSplitter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">PictureSplitter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoSplitterFactory</span>:</span> <span class="keyword">public</span> SplitterFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">CreateSplitter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">VideoSplitter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>依赖代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainForm</span> :</span> <span class="keyword">public</span> Form</span><br><span class="line">&#123;</span><br><span class="line">    SplitterFactory*  factory;<span class="comment">//工厂基类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MainForm</span>(SplitterFactory*  factory)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;factory=factory;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Button1_Click</span><span class="params">()</span></span>&#123;</span><br><span class="line">ISplitter * splitter=</span><br><span class="line">            factory-&gt;<span class="built_in">CreateSplitter</span>(); <span class="comment">//多态new</span></span><br><span class="line">        splitter-&gt;<span class="built_in">split</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>为什么要有一个抽象ISplitter基类？因为需要这样一个抽象引用去接收实际的具体对象。</p></li><li><p>为什么要有一个抽象factory基类？因为需要依赖于抽象去动态绑定。</p></li><li><p>原本<br><img src="/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F/2022-03-20-17-43-02.png"></p></li><li><p>工厂模式之后，不再依赖于具体类（<strong>变化）</strong>，而是依赖于抽象类（<strong>稳定）</strong><br><img src="/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F/2022-03-20-17-42-00.png"></p></li></ul><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><img src="/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F/2022-03-20-17-55-24.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>Factory Method模式用于隔离类对象的使用者和具体类型之间的 耦合关系。面对一个经常变化的具体类型，紧耦合关系(new)会导 致软件的脆弱。</li><li>Factory Method模式通过面向对象的手法，将所要创建的具体对象工作<strong>延迟</strong>到子类（virtual函数），从而实现一种<strong>扩展（而非更改）</strong>的策略，较好地解决了这种紧耦合关系。</li><li>Factory Method模式解决“单个对象”的需求变化。缺点在于要 求创建方法/参数相同。</li></ul><h2 id="抽象工厂（家族工厂，这个工厂可以创造一家子相关操作）"><a href="#抽象工厂（家族工厂，这个工厂可以创造一家子相关操作）" class="headerlink" title="抽象工厂（家族工厂，这个工厂可以创造一家子相关操作）"></a>抽象工厂（家族工厂，这个工厂可以创造一家子相关操作）</h2><ul><li>工厂模式的基础上，将有关系的内容都放到一个工厂里，一起生产出来。<h3 id="动机-1"><a href="#动机-1" class="headerlink" title="动机"></a>动机</h3></li><li>在软件系统中，经常面临着“<strong>一系列相互依赖的对象</strong>”的创建工作；同时，由于需求的变化，往往<strong>存在更多系列对象的创建工作</strong>。（一系列：Oracle有一系列数据库访问操作，MySql有一系列数据库访问操作，其他甲数据库又有一系列数据库访问操作）</li><li>如何应对这种变化？如何绕过常规的对象创建方法(new)，提供一种“封装机制”来避免客户程序和这种“多系列具体对象创建工作”的紧耦合？</li></ul><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul><li>提供一个接口，让该接口负责创建<strong>一系列“相关或者相互依赖的对象”</strong>，（如数据库访问的一系列关联操作），无需指定它们具体的类。</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//数据库访问有关的基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IDBConnection</span>&#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IDBCommand</span>&#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IDataReader</span>&#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  （创建数据库访问相关的）基类工厂（可创建一系列数据库访问，如SQL数据库访问，Oracle数据路访问）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IDBFactory</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> IDBConnection* <span class="title">CreateDBConnection</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> IDBCommand* <span class="title">CreateDBCommand</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> IDataReader* <span class="title">CreateDataReader</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//支持SQL Server</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SqlConnection</span>:</span> <span class="keyword">public</span> IDBConnection&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SqlCommand</span>:</span> <span class="keyword">public</span> IDBCommand&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SqlDataReader</span>:</span> <span class="keyword">public</span> IDataReader&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SqlDBFactory</span>:</span><span class="keyword">public</span> IDBFactory&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> IDBConnection* <span class="title">CreateDBConnection</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> IDBCommand* <span class="title">CreateDBCommand</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> IDataReader* <span class="title">CreateDataReader</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//支持Oracle的相关访问操作</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">OracleConnection</span>:</span> <span class="keyword">public</span> IDBConnection&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">OracleCommand</span>:</span> <span class="keyword">public</span> IDBCommand&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">OracleDataReader</span>:</span> <span class="keyword">public</span> IDataReader&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//  负责 创建Oracle数据库访问的一系列操作 的工厂</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">OracleDBFactory</span>:</span><span class="keyword">public</span> IDBFactory&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> IDBConnection* <span class="title">CreateDBConnection</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> IDBCommand* <span class="title">CreateDBCommand</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> IDataReader* <span class="title">CreateDataReader</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeDAO</span>&#123;</span></span><br><span class="line">    <span class="comment">//  只需要一个基类工厂就可以。</span></span><br><span class="line">    IDBFactory* dbFactory;      <span class="comment">//  创建一系列操作的工厂（针对某一数据库的一系列访问操作）</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;EmployeeDO&gt; <span class="title">GetEmployees</span><span class="params">()</span></span>&#123;</span><br><span class="line">        IDBConnection* connection =</span><br><span class="line">            dbFactory-&gt;<span class="built_in">CreateDBConnection</span>();    <span class="comment">//  sql/oracle 工厂创建出 sql/oracle 连接操作 </span></span><br><span class="line">        connection-&gt;<span class="built_in">ConnectionString</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        IDBCommand* command =</span><br><span class="line">            dbFactory-&gt;<span class="built_in">CreateDBCommand</span>();       <span class="comment">//  sql/oracle 工厂创建出 sql/oracle 命令操作</span></span><br><span class="line">        command-&gt;<span class="built_in">CommandText</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">        command-&gt;<span class="built_in">SetConnection</span>(connection);     <span class="comment">//  体现出connection与command的关联性</span></span><br><span class="line"></span><br><span class="line">        IDBDataReader* reader = command-&gt;<span class="built_in">ExecuteReader</span>(); <span class="comment">//  command与reader的关联性</span></span><br><span class="line">        <span class="keyword">while</span> (reader-&gt;<span class="built_in">Read</span>())&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结构总结"><a href="#结构总结" class="headerlink" title="结构总结"></a>结构总结</h3><p><img src="/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F/2022-03-20-18-47-16.png"></p><h3 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h3><ul><li>如果没有应对“多系列对象构建”的需求变化，则没有必要使用Abstract Factory模式，这时候使用简单的工厂完全可以。</li><li><strong>“系列对象”指的是在某一特定系列下的对象之间有相互依赖、或作用的关系。不同系列的对象之间不能相互依赖</strong>。</li><li>Abstract Factory模式主要在于<strong>应对“新系列”的需求</strong>变动。其缺点在于<strong>难以应对“新对象”的需求变动</strong><ul><li>也就是 工厂基类（IDBFactory）不能够增添操作（纯虚函数。）。因为我们假定他是稳定的，也就是这个模式就是在利用那个基类的稳定性，如果变了，那么我们该采用其他模式。</li></ul></li></ul><h3 id="工厂方法到抽象工厂"><a href="#工厂方法到抽象工厂" class="headerlink" title="工厂方法到抽象工厂"></a>工厂方法到抽象工厂</h3><ul><li>工厂模式是抽象工厂的一种特殊情况！（也即，工厂基类里的方法只有一个而非多个，只负责创建一个对象而非一系列相互依赖的对象）<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//数据库访问有关的基类 以及相应基类工厂</span></span><br><span class="line"><span class="comment">//  如果不用抽象工厂，那么，三个相关基类，三个相关工厂。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IDBConnection</span>&#123;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IDBConnectionFactory</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> IDBConnection* <span class="title">CreateDBConnection</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IDBCommand</span>&#123;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IDBCommandFactory</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> IDBCommand* <span class="title">CreateDBCommand</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IDataReader</span>&#123;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IDataReaderFactory</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> IDataReader* <span class="title">CreateDataReader</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//支持SQL Server</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlConnection</span>:</span> <span class="keyword">public</span> IDBConnection&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlConnectionFactory</span>:</span><span class="keyword">public</span> IDBConnectionFactory&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlCommand</span>:</span> <span class="keyword">public</span> IDBCommand&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlCommandFactory</span>:</span><span class="keyword">public</span> IDBCommandFactory&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlDataReader</span>:</span> <span class="keyword">public</span> IDataReader&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlDataReaderFactory</span>:</span><span class="keyword">public</span> IDataReaderFactory&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//支持Oracle</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OracleConnection</span>:</span> <span class="keyword">public</span> IDBConnection&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OracleFactory</span>:</span><span class="keyword">public</span> OralceFactory&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OracleCommand</span>:</span> <span class="keyword">public</span> IDBCommand&#123;&#125;;</span><br><span class="line">OracleCommand工厂</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OracleDataReader</span>:</span> <span class="keyword">public</span> IDataReader&#123;&#125;;</span><br><span class="line">OracleDataReader工厂</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeDAO</span>&#123;</span></span><br><span class="line">    <span class="comment">//  三个基类指针 指向 工厂</span></span><br><span class="line">    IDBConnectionFactory* dbConnectionFactory;</span><br><span class="line">    IDBCommandFactory* dbCommandFactory;</span><br><span class="line">    IDataReaderFactory* dataReaderFactory;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  可以看出这三个工厂所要创作的三个对象相互依赖相互关联。是一系列一系列的操作。因此，可以把他们放入同一工厂。由同一工厂生产。</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;EmployeeDO&gt; <span class="title">GetEmployees</span><span class="params">()</span></span>&#123;</span><br><span class="line">        IDBConnection* connection =</span><br><span class="line">            dbConnectionFactory-&gt;<span class="built_in">CreateDBConnection</span>();</span><br><span class="line">        connection-&gt;<span class="built_in">ConnectionString</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        IDBCommand* command =</span><br><span class="line">            dbCommandFactory-&gt;<span class="built_in">CreateDBCommand</span>();</span><br><span class="line">        command-&gt;<span class="built_in">CommandText</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">        command-&gt;<span class="built_in">SetConnection</span>(connection); <span class="comment">//关联性</span></span><br><span class="line"></span><br><span class="line">        IDBDataReader* reader = command-&gt;<span class="built_in">ExecuteReader</span>(); <span class="comment">//关联性</span></span><br><span class="line">        <span class="keyword">while</span> (reader-&gt;<span class="built_in">Read</span>())&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="最终代码-施磊"><a href="#最终代码-施磊" class="headerlink" title="最终代码(施磊)"></a>最终代码(施磊)</h3><ul><li>子类必须实现父类的纯虚函数，不然无法new<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 系列产品1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Car</span>(string name) :_name(name) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Car</span>()&#123;&#125;        <span class="comment">//  基类的虚构函数写成虚的！</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">string _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bmw</span> :</span> <span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Bmw</span>(string name) :<span class="built_in">Car</span>(name) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;获取了一辆宝马汽车:&quot;</span> &lt;&lt; _name&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Audi</span> :</span> <span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Audi</span>(string name) :<span class="built_in">Car</span>(name) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;获取了一辆奥迪汽车:&quot;</span> &lt;&lt; _name&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系列产品2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Light</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BmwLight</span> :</span> <span class="keyword">public</span> Light</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;BMW light!&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AudiLight</span> :</span> <span class="keyword">public</span> Light</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Audi light!&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂方法 =&gt; 抽象工厂(对有一组关联关系的产品簇提供产品对象的统一创建)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Car* <span class="title">createCar</span><span class="params">(string name)</span> </span>= <span class="number">0</span>; <span class="comment">// 工厂方法 创建汽车</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Light* <span class="title">createCarLight</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">// 工厂方法 创建汽车关联的产品，车灯</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 宝马工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMWFactory</span> :</span> <span class="keyword">public</span> AbstractFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Car* <span class="title">createCar</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Bmw</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Light* <span class="title">createCarLight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">BmwLight</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 奥迪工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AudiFactory</span> :</span> <span class="keyword">public</span> AbstractFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Car* <span class="title">createCar</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Audi</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Light* <span class="title">createCarLight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">AudiLight</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 现在考虑产品  一类产品（有关联关系的系列产品）</span></span><br><span class="line"><span class="function">unique_ptr&lt;AbstractFactory&gt; <span class="title">bmwfty</span><span class="params">(<span class="keyword">new</span> BMWFactory())</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;AbstractFactory&gt; <span class="title">audifty</span><span class="params">(<span class="keyword">new</span> AudiFactory())</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;Car&gt; <span class="title">p1</span><span class="params">(bmwfty-&gt;createCar(<span class="string">&quot;X6&quot;</span>))</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;Car&gt; <span class="title">p2</span><span class="params">(audifty-&gt;createCar(<span class="string">&quot;A8&quot;</span>))</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;Light&gt; <span class="title">l1</span><span class="params">(bmwfty-&gt;createCarLight())</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;Light&gt; <span class="title">l2</span><span class="params">(audifty-&gt;createCarLight())</span></span>;</span><br><span class="line"></span><br><span class="line">p1-&gt;<span class="built_in">show</span>();</span><br><span class="line">l1-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">p2-&gt;<span class="built_in">show</span>();</span><br><span class="line">l2-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>讲给h<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">工厂模式：简要来说就是：一个抽象类（字母），以及诸多具体类（a,b,c,d）。+ 一个工厂基类，以及诸多具体工厂类（对应生产a,b,c,d）。当需要a对象时，在相应代码段处，通过工厂基类指针，使用a工厂来创建a对象，用抽象基类（字母类型来接收）</span><br><span class="line">宗旨：避免依赖具体的类（尽量依赖抽象类），将本要使用具体类的代码段和具体类分离开（通过使用抽象类和工厂）。</span><br><span class="line">情景：假设现在要在一个类的成员函数FUNC（）内使用对象a/b/c/d。但是，由于需求的变化，我们所要创建的对象的具体类型经常变化，所以，我们要找一个机制来避开常规的<span class="keyword">new</span>语句。</span><br><span class="line">因为，如果正常的<span class="keyword">new</span>，就意味着我们必须在这个函数的代码段内明确说出要创建的对象的类型，那么就会造成紧耦合（如 A *p = <span class="keyword">new</span> <span class="built_in">A</span>()，指明了=号左侧的A和右侧的A类型）。</span><br><span class="line">所以，对于a,b,c,d类，我们需要有一个他们的抽象基类：字母类，来接收具体的a、b、c对象。（因为抽象，所以稳定）。</span><br><span class="line">如 字母 *p = <span class="keyword">new</span> <span class="built_in">A</span>()。那么，=号的左边就解决了。使用抽象类来接收具体的对象。</span><br><span class="line">但是，在=号右边。我们还是要指明具体的A类型，也就是说还是依赖一个具体的类。</span><br><span class="line">所以，为了不依赖它，我们得把<span class="keyword">new</span> <span class="built_in">A</span>()这个语句从本函数拿出来。</span><br><span class="line">所以，我们新建一个类，把这个<span class="keyword">new</span>的任务交给那个新类去处理，那个新类就叫做a工厂类，称为AFactory，内有create方法。</span><br><span class="line">那么，现在的语句就变成 字母* p = pointer_to_AFactory-&gt;<span class="built_in">create</span>();</span><br><span class="line">但是，此时我们还是需要指出，这个工厂的名字叫做AFactory。那么对于b，c，d来说，我们还是需要指出使用BFactory，CFactory...这还是需要依赖具体的类，所以还需要继续改进。</span><br><span class="line">所以，我们设置一个抽象基类 BaseFactory 里面有纯虚函数 <span class="built_in">create</span>()，BaseFactory的指针/引用，可以用来接收A/B/CFactory。</span><br><span class="line">那么，这条语句就变成 字母 *p = pointer_to_BaseFactory -&gt; <span class="built_in">create</span>();</span><br><span class="line">create（）函数的调用利用了多态的机制，将本应该编译时绑定的函数延迟到运行时进行绑定。</span><br><span class="line">（这也就是通过面向对象的手法，将所要创建的具体对象延迟到子类中去进行。（延迟到子类中的C++中的<span class="keyword">virtual</span>函数，Java中子类实现父类的函数），从而实现一种扩展（而非更改）的策略，较好地解决了原本的紧耦合关系）</span><br><span class="line">这个pointer_to_BaseFactory，就是调用本语句所在的函数时传入的参数。这样，在FUNC（）内，就不回依赖于具体的类（易变化），只依赖于抽象类（稳定）。</span><br><span class="line">将对具体类的依赖从本成员函数内转移到其他代码处。</span><br><span class="line"></span><br><span class="line">之前讲得工厂模式 是 一个工厂类里只负责一个对象的创建。</span><br><span class="line">抽象工厂，就是一个工厂类负责多个对象的创建。其中，这多个对象有相互依赖、相互影响的关系。</span><br><span class="line">如，我们要做访问数据库，对于每种数据库都会有三个操作，connection连接，read读取以及command发出命令。而connection又会影响read和command。</span><br><span class="line">但是，每种数据库之间的具体操作又不同，如Oracle和mySQL之间的connection，read，command方式不会相同。</span><br><span class="line">所以，我们可以看出，在要访问数据库时，我们需要生成负责connection的对象，负责read的对象和负责command的对象。</span><br><span class="line">而这些对象之间又相互依赖相互影响。也即，我们实际需要connection、read、command对象是一系列一系列的。（也可以说是一组一组的）</span><br><span class="line">所以，对于访问mySQL数据库，我们需要一个mySQLFactory&#123;&#125;，里面负责生成mySQL数据库系列的connection、read、command对象。</span><br><span class="line">对于Oralce数据库，同理，需要一个OracleFactory&#123;&#125;，里面负责生成Oracle数据库系列的connection、read、command对象。</span><br><span class="line"></span><br><span class="line">剩下的还是和工厂模式一样，一个数据库抽象基类，一个工厂的抽象基类，就是抽象工厂类负责一系列相关对象</span><br></pre></td></tr></table></figure></li></ul><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="动机-2"><a href="#动机-2" class="headerlink" title="动机"></a>动机</h3><ul><li>特殊的类，必须保证他们在系统中只存在一个实例，才能保证他们的逻辑正确性、以及良好的效率。</li></ul><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><ul><li>保证一个类仅有一个实例，并提供一个该实例的全局访问点</li></ul><h3 id="懒汉-推演"><a href="#懒汉-推演" class="headerlink" title="懒汉 推演"></a>懒汉 推演</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>();</span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="keyword">const</span> Singleton&amp; other);</span><br><span class="line">    <span class="keyword">static</span> Singleton* m_instance;   </span><br><span class="line"><span class="comment">//  注意必须是静态！ 定义一个唯一的类的实例对象（不然就会依赖于对象）</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//  必须是静态！不然要调用非静态方法需要通过对象调用，但是对象还没有。</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::m_instance=<span class="literal">nullptr</span>;</span><br></pre></td></tr></table></figure><ul><li>单线程用这个即可。线程不安全<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程非安全版本</span></span><br><span class="line"><span class="function">Singleton* <span class="title">Singleton::getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_instance == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        m_instance = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m_instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>多线程最初：线程安全但性能差<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程安全版本，但锁的代价过高</span></span><br><span class="line"><span class="function">Singleton* <span class="title">Singleton::getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Lock lock;          <span class="comment">//  当对象已经创建出来、多个线程都只需要读时，会付出不必要的代价来等待锁</span></span><br><span class="line">    <span class="keyword">if</span> (m_instance == <span class="literal">nullptr</span>) &#123;    </span><br><span class="line">        m_instance = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m_instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>多线程改进：<strong>双检查锁</strong>。看似正确，很有可能出<strong>reorder问题</strong>。<strong>不能用！！</strong><ul><li><strong>锁前检查</strong>：避免当两个线程都是读取操作时，发生不必要的上锁解锁以及等待来提高效率</li><li><strong>锁后检查</strong>：避免重复new对象。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双检查锁，但由于内存读写reorder不安全</span></span><br><span class="line"><span class="function">Singleton* <span class="title">Singleton::getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(m_instance==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        Lock lock;</span><br><span class="line">        <span class="keyword">if</span> (m_instance == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            m_instance = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m_instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F/2022-03-22-13-36-54.png"></li></ul></li><li><strong>漏洞：</strong><ul><li>正常应该是 <ul><li>先malloc 再 构造 再返回地址给 m_instance，</li></ul></li><li>但是，编译器出于优化，可能会发生这样：<ul><li>先malloc，然后返回地址，之后再构造</li></ul></li><li>就会造成，假设有2个线程，一个进入 <code>m_instance = new Singleton</code>。但是编译器优化，返回了地址却没调用构造函数，就会出<strong>现<code>m_instance!=nullptr</code> 但是 <code>m_instance</code>指向的对象还没被构造</strong>，而另一个线程在锁前检查发现不是<code>nullptr</code>，就直接返回<code>m_instance</code>，也即<strong>返回了一个不能使用的对象</strong></li></ul></li><li>C++11之后支持<strong>volatile</strong><ul><li>volatile（vaoleitou） 易变的；无定性的；不稳定的</li><li>volatile是一个特征修饰符（type specifier）.volatile的作用是作为指令关键字，确保本条指令不会因编译器的优化而省略，且要求每次直接读值。volatile是说这变量可能会被意想不到地改变，这样，编译器就不会去假设这个变量的值了。也即，编译器在用到这个变量时必须每次都小心地重新读取这个变量的值，而不是使用保存在寄存器里的备份。编译器会逐一地进行编译并产生相应的机器代码。</li><li><a href="https://www.runoob.com/w3cnote/c-volatile-keyword.html">volatile</a></li></ul></li></ul><ul><li><p>volatile在多线程的作用。也是因为这个让编译器从内存读取变量的值而非寄存器/缓存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">volatile作用在变量上。不把变量存储在寄存器中，每次使用该变量都从内存中读取。这样做的目的是告诉编译器该变量的值可能会随时改变，因此需要从内存中而非寄存器中读取以确保变量的值准确。</span><br><span class="line">在一些多线程的程序里一些全局变量可能会被其他线程修改，这时候要用volatile确保这个变量的值正确。(但是光用volatile也不够，但这就是另一个topic了)</span><br></pre></td></tr></table></figure></li><li><p>我总结：volatile的作用就是防止编译器对指令进行优化</p><ul><li>从而防止编译器从寄存器而非内存中读值（避免多线程情况下发生错误）</li><li>从而防止单例模式中new对象时改变指令顺序返回空对象</li></ul></li><li><p><strong>好博客：<a href="https://cloud.tencent.com/developer/article/1177406">博客</a></strong></p></li></ul><h3 id="懒汉最终：懒汉模式线程安全-有效率-无reorder"><a href="#懒汉最终：懒汉模式线程安全-有效率-无reorder" class="headerlink" title="懒汉最终：懒汉模式线程安全+有效率+无reorder"></a><strong>懒汉最终：懒汉模式线程安全+有效率+无reorder</strong></h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Singleton* <span class="title">getSingleton</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m_instance==<span class="literal">nullptr</span>) <span class="comment">//  提高效率</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">guard</span><span class="params">(mtx)</span></span>;</span><br><span class="line">            <span class="keyword">if</span>(m_instance==<span class="literal">nullptr</span>)     <span class="comment">//  防止重复new</span></span><br><span class="line">            &#123;</span><br><span class="line">                m_instance =  <span class="keyword">new</span> <span class="built_in">Singleton</span>();  <span class="comment">// 访问volatile变量 汇编指令顺序不变。保证先malloc，然后构造，最后返回。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m_instance;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> Singleton * <span class="keyword">volatile</span> m_instance;</span><br><span class="line">    <span class="comment">//  volatile：使得编译器在编译访问m_instance代码时，对指令（的顺序）就不再优化。也即m_instance = new Singleton()的汇编顺序不会改变</span></span><br><span class="line">    <span class="built_in">Singleton</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="keyword">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    Singleton&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="comment">//  构造函数、拷贝构造、复制重载私有化或删除</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton* <span class="keyword">volatile</span> Singleton:: m_instance = <span class="literal">nullptr</span>;  <span class="comment">//  static变量需要在类外初始化</span></span><br></pre></td></tr></table></figure><h4 id="2（通过static局部变量）"><a href="#2（通过static局部变量）" class="headerlink" title="2（通过static局部变量）"></a>2（通过static局部变量）</h4><ul><li>对于static静态局部变量的初始化，编译器会自动对它的初始化进行加锁lock和解锁unlock控制，使静态局部变量的初始化成为线程安全的操作，不用担心多个线程都会初始化静态局部变量，因此如下的懒汉单例模式是线程安全的单例模式</li><li><a href="https://blog.csdn.net/QIANGWEIYUAN/article/details/88544524?spm=1001.2014.3001.5502">shilei</a></li><li>static instance：C++11在static局部变量初始化时自动进行加锁和解锁控制</li><li>static 函数：为了在没有对象时就可调用<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  懒汉式单例模式另一种写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Singleton* <span class="title">getSingleton</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//  static局部变量</span></span><br><span class="line">        <span class="comment">//  static：生命周期为全局</span></span><br><span class="line">        <span class="comment">//  static + 局部 ：汇编层面已经自动添加线程互斥指令</span></span><br><span class="line">        <span class="keyword">static</span> Singleton instance;</span><br><span class="line">        <span class="keyword">return</span> &amp;instance;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="keyword">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    Single&amp; <span class="keyword">operator</span>=(Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="饿汉"><a href="#饿汉" class="headerlink" title="饿汉"></a>饿汉</h3><ul><li>饿汉不用考虑线程安全问题，天生线程安全。因为单例对象在线程产生时就已经创建出来了。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Singleton* <span class="title">getSingleton</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;m_instance;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> Singleton m_instance;</span><br><span class="line">    <span class="built_in">Singleton</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="keyword">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    Singleton&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Singleton Singleton:: m_instance;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F/2022-03-23-20-03-29.png"></li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul><li><ol><li>构造函数私有化</li></ol></li><li>2/3. 定义一个唯一的类的实例对象</li><li>3/2. 获取类的唯一实例对象的接口方法</li></ul><p>可重入：可以在多线程下运行，且不会发生静态条件。</p><h2 id="原型模式-Prototype"><a href="#原型模式-Prototype" class="headerlink" title="原型模式 Prototype"></a>原型模式 Prototype</h2><p>一个小模式，不常用，是factory的变体</p><ul><li>为了获取相同状态的对象。</li><li>当对象的创建复杂繁琐时。</li></ul><h3 id="动机-3"><a href="#动机-3" class="headerlink" title="动机"></a>动机</h3><p><img src="/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F/2022-04-01-20-46-38.png"></p><h3 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h3><p><img src="/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F/2022-04-01-20-47-05.png"></p><h3 id="要点总结-1"><a href="#要点总结-1" class="headerlink" title="要点总结"></a>要点总结</h3><p><img src="/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F/2022-04-01-20-44-28.png"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//  抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ISplitter</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">clone</span><span class="params">()</span></span>=<span class="number">0</span>; <span class="comment">//通过克隆自己来创建对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">ISplitter</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  具体类</span></span><br><span class="line"><span class="comment">//  调用父类克隆函数</span></span><br><span class="line"><span class="comment">//  每回调用clone就是返回了一个clone欸到对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySplitter</span> :</span> <span class="keyword">public</span> ISplitter&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">BinarySplitter</span>(*<span class="keyword">this</span>);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TxtSplitter</span>:</span> <span class="keyword">public</span> ISplitter&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TxtSplitter</span>(*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PictureSplitter</span>:</span> <span class="keyword">public</span> ISplitter&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">PictureSplitter</span>(*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoSplitter</span>:</span> <span class="keyword">public</span> ISplitter&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">VideoSplitter</span>(*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  用户代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainForm</span> :</span> <span class="keyword">public</span> Form</span><br><span class="line">&#123;</span><br><span class="line">    ISplitter*  prototype;<span class="comment">//原型对象</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MainForm</span>(ISplitter*  prototype)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;prototype=prototype;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Button1_Click</span><span class="params">()</span></span>&#123;</span><br><span class="line">ISplitter * splitter=</span><br><span class="line">            prototype-&gt;<span class="built_in">clone</span>(); <span class="comment">//克隆原型</span></span><br><span class="line">        splitter-&gt;<span class="built_in">split</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;对象创建模式&quot;&gt;&lt;a href=&quot;#对象创建模式&quot; class=&quot;headerlink&quot; title=&quot;对象创建模式&quot;&gt;&lt;/a&gt;对象创建模式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;通过“对象创建” 模式绕开new，来避免对象创建（new）过程中所导致的紧耦合（依赖具体类），从</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="计算机基础" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>单一职责模式</title>
    <link href="http://example.com/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-03T14:53:55.000Z</published>
    <updated>2022-05-28T14:43:49.993Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单一职责模式"><a href="#单一职责模式" class="headerlink" title="单一职责模式"></a>单一职责模式</h1><ul><li>在软件组件的设计中，如果<strong>责任划分的不清晰</strong>，使用<strong>继承</strong>得到的结果往往是随着需求的变化，子类急剧膨胀，同时<strong>充斥着重复代码</strong>，这时候的关键是<strong>划清责任。</strong><h2 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h2>把编译时的事情延迟到运行时去做<br>设计模式真谛：编译时让他复用；需求，变化都放到运行时。</li></ul><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><ul><li>在某些情况下我们可能会“过度地使用继承来扩展对象的功能”，由于<strong>继承为类型引入的静态特质</strong>（写死的语句），使得这种扩展方式缺乏灵活性；并且随着子类的增多（扩展功能的增多），各种子类的组合（扩展功能的组合）会导致更多子类的膨胀。</li><li>如何使“对象功能的扩展”能够根据需要来动态地实现？同时避免“扩展功能的增多”带来的子类膨胀问题？从而使得任何“功能扩展变化”所导致的影响将为最低？</li></ul><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>动态（组合）地给一个对象增加一些额外的职责。就增加功能而言，Decorator模式比生成子类（继承）更为灵活（消除重复代码 &amp; 减少子类个数）</li></ul><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><img src="/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E6%A8%A1%E5%BC%8F/2022-03-28-09-04-00.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>通过<strong>采用组合而非继承的</strong>手法， Decorator模式实现了在运行时<strong>动态扩展对象功能</strong>的能力，而且可以根据需要扩展多个功能。避免了使用继承带来的“灵活性差”和“多子类衍生问题”。</li><li>Decorator类在<strong>接口上</strong>表现为is-a Component的<strong>继承</strong>关系，即 Decorator类继承了Component类所具有的接口。但在<strong>实现上又 表现为</strong>has-a Component的<strong>组合</strong>关系，即Decorator类又使用了另外一个Component类。</li><li>Decorator模式的目的并非解决“多子类衍生的多继承”问题， <strong>Decorator模式应用的要点在于解决“主体类在多个方向上的扩展功能”——是为“装饰”的含义</strong></li></ul><p><img src="/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E6%A8%A1%E5%BC%8F/2022-03-28-09-13-46.png"></p><ul><li>装饰者的继承：为了完善接口规范<ul><li><code>class Deractor : public Base&#123;&#125;</code> </li></ul></li><li>装饰者的组合：为了实现支持将来实现类的调用<ul><li><code>&#123;Base * b&#125;</code></li></ul></li><li>看到一个class A 他既继承自父类Base，又有父类Base*成员，那么，基本上就是装饰者模式了。</li><li>同时继承和组合，基本上就是装饰者模式。</li></ul><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><ul><li>最开始 总共有 <code>1 + n + n*m!</code> 个类<br><img src="/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E6%A8%A1%E5%BC%8F/2022-03-28-09-01-38.png">、</li><li>有最普通的读，有加密的读，有缓存的读，有缓存+加密的读<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//业务操作</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stream</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>：</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Stream</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主体类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileStream</span>:</span> <span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkStream</span> :</span><span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemoryStream</span> :</span><span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  重复代码</span></span><br><span class="line"><span class="comment">//  加密操作是一样的</span></span><br><span class="line"><span class="comment">//  缓冲操作是一样的</span></span><br><span class="line"><span class="comment">//  read seek write操作不同类不同，但是都继承自Stream</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展操作</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CryptoFileStream</span> :</span><span class="keyword">public</span> FileStream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        FileStream::<span class="built_in">Read</span>(number);<span class="comment">//读文件流     //  继承引入的静态机制！</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        FileStream::<span class="built_in">Seek</span>(position);<span class="comment">//定位文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(byte data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        FileStream::<span class="built_in">Write</span>(data);<span class="comment">//写文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CryptoNetworkStream</span> :</span> :<span class="keyword">public</span> NetworkStream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        NetworkStream::<span class="built_in">Read</span>(number);<span class="comment">//读网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        NetworkStream::<span class="built_in">Seek</span>(position);<span class="comment">//定位网络流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(byte data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        NetworkStream::<span class="built_in">Write</span>(data);<span class="comment">//写网络流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CryptoMemoryStream</span> :</span> <span class="keyword">public</span> MemoryStream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        MemoryStream::<span class="built_in">Read</span>(number);<span class="comment">//读内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        MemoryStream::<span class="built_in">Seek</span>(position);<span class="comment">//定位内存流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(byte data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        MemoryStream::<span class="built_in">Write</span>(data);<span class="comment">//写内存流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferedFileStream</span> :</span> <span class="keyword">public</span> FileStream&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferedNetworkStream</span> :</span> <span class="keyword">public</span> NetworkStream&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferedMemoryStream</span> :</span> <span class="keyword">public</span> MemoryStream&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CryptoBufferedFileStream</span> :</span><span class="keyword">public</span> FileStream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        <span class="comment">//额外的缓冲操作...</span></span><br><span class="line">        FileStream::<span class="built_in">Read</span>(number);<span class="comment">//读文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        <span class="comment">//额外的缓冲操作...</span></span><br><span class="line">        FileStream::<span class="built_in">Seek</span>(position);<span class="comment">//定位文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        <span class="comment">//额外的缓冲操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(byte data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        <span class="comment">//额外的缓冲操作...</span></span><br><span class="line">        FileStream::<span class="built_in">Write</span>(data);<span class="comment">//写文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        <span class="comment">//额外的缓冲操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Process</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//编译时装配</span></span><br><span class="line">    CryptoFileStream *fs1 = <span class="keyword">new</span> <span class="built_in">CryptoFileStream</span>();</span><br><span class="line">    BufferedFileStream *fs2 = <span class="keyword">new</span> <span class="built_in">BufferedFileStream</span>();</span><br><span class="line">    CryptoBufferedFileStream *fs3 =<span class="keyword">new</span> <span class="built_in">CryptoBufferedFileStream</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li>一个类 继承自Stream 且与Stream类组合</li><li><code>class CryptoStream :public Stream &#123; Stream* stream ...&#125;</code></li><li>继承原因：为了实现基类的接口规范</li><li>组合原因：为了实现功能<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//业务操作</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stream</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>：</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span></span>=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Stream</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主体类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileStream</span>:</span> <span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写文件流</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkStream</span> :</span><span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemoryStream</span> :</span><span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  【2】继承自Stream ，为了继承Stream的接口 (virtual Read...)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CryptoStream</span>:</span> <span class="keyword">public</span> Stream &#123;     </span><br><span class="line">    <span class="comment">//  FileStream / NetworkStream / MemoryStream</span></span><br><span class="line">    <span class="comment">//  运行时依赖</span></span><br><span class="line">    <span class="comment">//  【1】与Stream类组合，实现功能</span></span><br><span class="line">    Stream* stream;<span class="comment">//...    </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CryptoStream</span>(Stream* stm):<span class="built_in">stream</span>(stm)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        stream-&gt;<span class="built_in">Read</span>(number);<span class="comment">//读文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        stream::<span class="built_in">Seek</span>(position);<span class="comment">//定位文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(byte data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        stream::<span class="built_in">Write</span>(data);<span class="comment">//写文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferedStream</span> :</span> <span class="keyword">public</span> Stream&#123;</span><br><span class="line">    Stream* stream;<span class="comment">//...</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BufferedStream</span>(Stream* stm):<span class="built_in">stream</span>(stm)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Process</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//运行时装配 即编译时依赖优化成运行时依赖</span></span><br><span class="line">    FileStream* s1=<span class="keyword">new</span> <span class="built_in">FileStream</span>();</span><br><span class="line">    CryptoStream* s2=<span class="keyword">new</span> <span class="built_in">CryptoStream</span>(s1);      <span class="comment">//  加密    Stream* 接收 FileStream*</span></span><br><span class="line">    BufferedStream* s3=<span class="keyword">new</span> <span class="built_in">BufferedStream</span>(s1);  <span class="comment">//  缓冲</span></span><br><span class="line">    BufferedStream* s4=<span class="keyword">new</span> <span class="built_in">BufferedStream</span>(s2);  <span class="comment">//  加密 + 缓冲 Stream* 接收 CryptoStream*</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  如果多个子类有相同字段时，那么要将这个字段往上（往父类或者新建一个这种字段的中间类）提。 --马丁</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="最终"><a href="#最终" class="headerlink" title="最终"></a>最终</h3><p><img src="/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E6%A8%A1%E5%BC%8F/2022-03-28-08-55-22.png"></p><ul><li>Decorator装饰类</li><li>如果多个子类有相同字段时，那么要将这个字段往上（往父类或者新建一个这种字段的中间类）提。 –马丁</li><li><code>class Decorator : public Stream&#123;Stream *stream&#125;</code><ul><li><code>stream*</code>：用组合来代替继承实现多态<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//业务操作</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stream</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>：</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Stream</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主体类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileStream</span>:</span> <span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkStream</span> :</span><span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemoryStream</span> :</span><span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展操作类</span></span><br><span class="line"><span class="comment">//  DacoratorStream：要将CryptoStream以及BufferedStream的相同字段Stream*提出来。而放在Stream基类中发现不合适（主题类不需要Stream*字段）。因此，构造一个中间类。</span></span><br><span class="line"><span class="comment">//  用组合的方式，引出对多态的支持</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoratorStream</span>:</span> <span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Stream* stream; <span class="comment">//核心！！！</span></span><br><span class="line">    <span class="built_in">DecoratorStream</span>(Stream * stm):<span class="built_in">stream</span>(stm)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CryptoStream</span>:</span> <span class="keyword">public</span> DecoratorStream &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CryptoStream</span>(Stream* stm):<span class="built_in">DecoratorStream</span>(stm)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        stream-&gt;<span class="built_in">Read</span>(number);<span class="comment">//读文件流     组合的动态特质</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        stream::<span class="built_in">Seek</span>(position);<span class="comment">//定位文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(byte data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        stream::<span class="built_in">Write</span>(data);<span class="comment">//写文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferedStream</span> :</span> <span class="keyword">public</span> DecoratorStream&#123;</span><br><span class="line">    Stream* stream;<span class="comment">//...</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BufferedStream</span>(Stream* stm):<span class="built_in">DecoratorStream</span>(stm)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Process</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//运行时装配</span></span><br><span class="line">    FileStream* s1=<span class="keyword">new</span> <span class="built_in">FileStream</span>();</span><br><span class="line">    CryptoStream* s2=<span class="keyword">new</span> <span class="built_in">CryptoStream</span>(s1);</span><br><span class="line">    BufferedStream* s3=<span class="keyword">new</span> <span class="built_in">BufferedStream</span>(s1);</span><br><span class="line">    BufferedStream* s4=<span class="keyword">new</span> <span class="built_in">BufferedStream</span>(s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="代码例子"><a href="#代码例子" class="headerlink" title="代码例子"></a>代码例子</h3><ul><li>装饰器模式 <code>Decorator</code><ul><li>通过子类实现功能增强的问题：为了增强现有类的功能，通过实现子类的方式，</li><li>重写接口，是可以完成功能扩展的，但是代码中有太多的子类添加进来了</li></ul></li><li> 车 A ,B ,C</li><li> 这些车，有的功能只有<code>base</code> ， 有的有<code>brake ， hasten ， boom</code> 以及他们的组合<br><img src="/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E6%A8%A1%E5%BC%8F/2022-03-28-10-17-24.png"></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by dell on 2022-03-28.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  车 A ,B ,C</span></span><br><span class="line"><span class="comment">//  这些车，有的功能只有base ， 有的有brake ， hasten ， boom 以及他们的组合</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ACar</span> :</span> <span class="keyword">public</span> Car&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;A car : base , &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BCar</span> :</span> <span class="keyword">public</span> Car&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;B car : base , &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCar</span> :</span> <span class="keyword">public</span> Car&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;C car : base , &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span>:</span><span class="keyword">public</span> Car&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">Decorator</span>(Car *p):<span class="built_in">p_car</span>(p)&#123;&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Car *p_car;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecorator1</span> :</span> <span class="keyword">public</span> Decorator&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConcreteDecorator1</span>(Car* p_car):<span class="built_in">Decorator</span>(p_car)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        p_car-&gt;<span class="built_in">show</span>();  <span class="comment">//  父类的show (原先就有的功能)</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;hasten , &quot;</span>;  <span class="comment">//  添加功能</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecorator2</span> :</span> <span class="keyword">public</span> Decorator&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConcreteDecorator2</span>(Car *p): <span class="built_in">Decorator</span>(p)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span>    <span class="comment">//  添加功能</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        p_car-&gt;<span class="built_in">show</span>();  <span class="comment">//  父类的show</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;brake , &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecorator3</span> :</span> <span class="keyword">public</span> Decorator&#123;</span><br><span class="line">    <span class="built_in">ConcreteDecorator3</span>(Car *p): <span class="built_in">Decorator</span>(p)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span>    <span class="comment">//  添加功能</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        p_car-&gt;<span class="built_in">show</span>();</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;boom , &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//  一个ACar 加上了装饰器1的功能hasten 之后就可以通过pA来调用这个加上了装饰器1功能的Acar对象</span></span><br><span class="line">    ConcreteDecorator1 *pA =  <span class="keyword">new</span> <span class="built_in">ConcreteDecorator1</span>(<span class="keyword">new</span> <span class="built_in">ACar</span>());</span><br><span class="line">    pA-&gt;<span class="built_in">show</span>();</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  一个BCar pB-&gt; &#123;装饰器1功能 + 装饰器2功能 + BCar对象&#125;</span></span><br><span class="line">    ConcreteDecorator2 *pB = <span class="keyword">new</span> <span class="built_in">ConcreteDecorator2</span>(<span class="keyword">new</span> <span class="built_in">ConcreteDecorator1</span>(<span class="keyword">new</span> <span class="built_in">BCar</span>()));</span><br><span class="line">    pB-&gt;<span class="built_in">show</span>();</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  不添加装饰器功能</span></span><br><span class="line">    CCar *pC = <span class="keyword">new</span> <span class="built_in">CCar</span>();</span><br><span class="line">    pC-&gt;<span class="built_in">show</span>();</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A car : base , hasten ,</span><br><span class="line">B car : base , hasten , brake ,</span><br><span class="line">C car : base ,</span><br></pre></td></tr></table></figure><h2 id="桥模式"><a href="#桥模式" class="headerlink" title="桥模式"></a>桥模式</h2><ul><li>一个类中要实现两种不同维度的功能，就把这个类分成两个类，把两个不同维度的功能分开。</li><li>把继承变组合实现多态</li><li>几个子类中有公共字段，那么要把这个字段向上提。<h3 id="动机-1"><a href="#动机-1" class="headerlink" title="动机"></a>动机</h3></li><li>由于某些类型的固有的实现逻辑，使得它们具有两个变化的维度乃至多个纬度的变化。</li><li>如何应对这种“多维度的变化”？如何利用面向对象技术来使得类型可以轻松地沿着两个乃至多个方向变化，而不引入额外的复杂度？</li></ul><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul><li>将<strong>抽象部分(业务功能)<strong>与</strong>实现部分(平台实现)<strong>分离，使它们都可以</strong>独立</strong>地变化。</li></ul><h3 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h3><p><img src="/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E6%A8%A1%E5%BC%8F/2022-03-29-15-10-49.png"></p><h3 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h3><ul><li><p>Bridge模式使用<strong>s“对象间的组合关系”s</strong>解耦了抽象和实现之间固 有的绑定关系，使得抽象和实现可以沿着各自的维度来变化。所谓抽象和实现沿着各自纬度的变化，即“子类化”他们。</p></li><li><p>Bridge模式有时候类似于多继承方案，但是多继承方案往往违背 单一职责原则（即一个类只有一个变化的原因），复用性比较差。<strong>Bridge模式是比多继承方案更好的解决方法。</strong></p></li><li><p>Bridge模式的应用一般在“<strong>两个非常强的变化维度</strong>”，有时一个 类也有多于两个的变化维度，这时可以使用Bridge的扩展模式。</p><h3 id="重构-1"><a href="#重构-1" class="headerlink" title="重构"></a>重构</h3></li><li><p>初始</p></li><li><p>要实现的类：<code>1+n+n*m</code><br><img src="/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E6%A8%A1%E5%BC%8F/2022-03-29-15-04-36.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Messager</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Login</span><span class="params">(string username, string password)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(string message)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendPicture</span><span class="params">(Image image)</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PlaySound</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DrawShape</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">WriteText</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Connect</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Messager</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//平台实现</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PCMessagerBase</span> :</span> <span class="keyword">public</span> Messager&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PlaySound</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//**********</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DrawShape</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//**********</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">WriteText</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//**********</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Connect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//**********</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MobileMessagerBase</span> :</span> <span class="keyword">public</span> Messager&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PlaySound</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//==========</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DrawShape</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//==========</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">WriteText</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//==========</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Connect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//==========</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//业务抽象</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PCMessagerLite</span> :</span> <span class="keyword">public</span> PCMessagerBase &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Login</span><span class="params">(string username, string password)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        PCMessagerBase::<span class="built_in">Connect</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(string message)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        PCMessagerBase::<span class="built_in">WriteText</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendPicture</span><span class="params">(Image image)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        PCMessagerBase::<span class="built_in">DrawShape</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PCMessagerPerfect</span> :</span> <span class="keyword">public</span> PCMessagerBase &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Login</span><span class="params">(string username, string password)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        PCMessagerBase::<span class="built_in">PlaySound</span>();</span><br><span class="line">        <span class="comment">//********</span></span><br><span class="line">        PCMessagerBase::<span class="built_in">Connect</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(string message)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        PCMessagerBase::<span class="built_in">PlaySound</span>();</span><br><span class="line">        <span class="comment">//********</span></span><br><span class="line">        PCMessagerBase::<span class="built_in">WriteText</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendPicture</span><span class="params">(Image image)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        PCMessagerBase::<span class="built_in">PlaySound</span>();</span><br><span class="line">        <span class="comment">//********</span></span><br><span class="line">        PCMessagerBase::<span class="built_in">DrawShape</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MobileMessagerLite</span> :</span> <span class="keyword">public</span> MobileMessagerBase &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Login</span><span class="params">(string username, string password)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        MobileMessagerBase::<span class="built_in">Connect</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(string message)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        MobileMessagerBase::<span class="built_in">WriteText</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendPicture</span><span class="params">(Image image)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        MobileMessagerBase::<span class="built_in">DrawShape</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MobileMessagerPerfect</span> :</span> <span class="keyword">public</span> MobileMessagerBase &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Login</span><span class="params">(string username, string password)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        MobileMessagerBase::<span class="built_in">PlaySound</span>();</span><br><span class="line">        <span class="comment">//********</span></span><br><span class="line">        MobileMessagerBase::<span class="built_in">Connect</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(string message)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        MobileMessagerBase::<span class="built_in">PlaySound</span>();</span><br><span class="line">        <span class="comment">//********</span></span><br><span class="line">        MobileMessagerBase::<span class="built_in">WriteText</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendPicture</span><span class="params">(Image image)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        MobileMessagerBase::<span class="built_in">PlaySound</span>();</span><br><span class="line">        <span class="comment">//********</span></span><br><span class="line">        MobileMessagerBase::<span class="built_in">DrawShape</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Process</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//编译时装配</span></span><br><span class="line">        Messager *m =</span><br><span class="line">            <span class="keyword">new</span> <span class="built_in">MobileMessagerPerfect</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>重构后</p></li><li><p>1+n+m</p></li></ul><p><img src="/2022/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E6%A8%A1%E5%BC%8F/2022-03-29-15-04-13.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Messager</span>&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">     MessagerImp* messagerImp;<span class="comment">//...</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Login</span><span class="params">(string username, string password)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(string message)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendPicture</span><span class="params">(Image image)</span></span>=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Messager</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessagerImp</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PlaySound</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DrawShape</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">WriteText</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Connect</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">MessagerImp</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//平台实现 n</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PCMessagerImp</span> :</span> <span class="keyword">public</span> MessagerImp&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PlaySound</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//**********</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DrawShape</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//**********</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">WriteText</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//**********</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Connect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//**********</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MobileMessagerImp</span> :</span> <span class="keyword">public</span> MessagerImp&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PlaySound</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//==========</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DrawShape</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//==========</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">WriteText</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//==========</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Connect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//==========</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//业务抽象 m</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类的数目：1+n+m</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessagerLite</span> :</span><span class="keyword">public</span> Messager &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Login</span><span class="params">(string username, string password)</span></span>&#123;</span><br><span class="line">        messagerImp-&gt;<span class="built_in">Connect</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(string message)</span></span>&#123;</span><br><span class="line">        messagerImp-&gt;<span class="built_in">WriteText</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendPicture</span><span class="params">(Image image)</span></span>&#123;</span><br><span class="line">        messagerImp-&gt;<span class="built_in">DrawShape</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessagerPerfect</span>  :</span><span class="keyword">public</span> Messager &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Login</span><span class="params">(string username, string password)</span></span>&#123;</span><br><span class="line">        messagerImp-&gt;<span class="built_in">PlaySound</span>();</span><br><span class="line">        <span class="comment">//********</span></span><br><span class="line">        messagerImp-&gt;<span class="built_in">Connect</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(string message)</span></span>&#123;</span><br><span class="line">        messagerImp-&gt;<span class="built_in">PlaySound</span>();</span><br><span class="line">        <span class="comment">//********</span></span><br><span class="line">        messagerImp-&gt;<span class="built_in">WriteText</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendPicture</span><span class="params">(Image image)</span></span>&#123;</span><br><span class="line">        messagerImp-&gt;<span class="built_in">PlaySound</span>();</span><br><span class="line">        <span class="comment">//********</span></span><br><span class="line">        messagerImp-&gt;<span class="built_in">DrawShape</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Process</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//运行时装配</span></span><br><span class="line">    MessagerImp* mImp=<span class="keyword">new</span> <span class="built_in">PCMessagerImp</span>();</span><br><span class="line">    Messager *m =<span class="keyword">new</span> <span class="built_in">MessagerLite</span>(mImp);    <span class="comment">//  实现 PCMessageImp平台 + MessagerLite业务 组合   </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单一职责模式&quot;&gt;&lt;a href=&quot;#单一职责模式&quot; class=&quot;headerlink&quot; title=&quot;单一职责模式&quot;&gt;&lt;/a&gt;单一职责模式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在软件组件的设计中，如果&lt;strong&gt;责任划分的不清晰&lt;/strong&gt;，使用&lt;strong&gt;</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="计算机基础" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>别人问题</title>
    <link href="http://example.com/2022/05/02/%E5%88%AB%E4%BA%BA%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/05/02/%E5%88%AB%E4%BA%BA%E9%97%AE%E9%A2%98/</id>
    <published>2022-05-02T00:27:40.000Z</published>
    <updated>2022-05-28T14:48:07.730Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>可以继承vector吗？</p><ul><li>尽量不要，因为vector的虚构函数不是virtual。构造函数顺序：先父后子；析构函数顺序：先子后父。继承的常见用法是父类vector指针指向子类对象。那么如果这样的话，构造函数无问题，先父后子。<strong>在析构时，父类指针不会调用到子类析构函数</strong>，那么当子类有指针指向外部资源时，子类并没有释放它，造成内存泄漏。</li><li>如果非要继承vector，那么不要用父类指针指向子类对象！否则子类对象的部分无法被释放！（我认为子类对象连栈上的内存（成员变量）都无法释放）<ul><li>系统隐式调用析构函数的时候，会加入释放栈内存的动作（而堆内存则由用户手工的释放）</li><li>用户显式调用析构函数的时候，只是单纯执行析构函数内的语句，不会释放栈内存，摧毁对象</li></ul></li><li>我认为可以采用聚合的方式，vector对象作为类的成员变量。<ul><li>聚合是整体与部分的关系，且部分可以离开整体而单独存在。如车和轮胎是整体和部分的关系，轮胎离开车仍然可以存在。</li></ul></li></ul></li><li><p>virtual析构函数复习</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Base</span>(<span class="keyword">int</span> x) :<span class="built_in">pa</span>(<span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(x)) </span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Base *pa= &quot;</span> &lt;&lt; *pa &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"> ~<span class="built_in">Base</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~Base&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> pa;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span>* pa;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  子类指针指向父类对象</span></span><br><span class="line"><span class="comment">// Derive* p = new Base(1); 编译不过</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  父类指针指向子类对象</span></span><br><span class="line">Base* p = <span class="keyword">new</span> <span class="built_in">Derive</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"><span class="comment">// ++++++++++++++++++++</span></span><br><span class="line"><span class="comment">// Base *pa= 1</span></span><br><span class="line"><span class="comment">// Derive *pb= 2</span></span><br><span class="line"><span class="comment">// ~Base</span></span><br><span class="line"><span class="comment">// ++++++++++++++++++++</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;++++++++++++++++++++&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类引用子类对象  ok</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Derive <span class="title">d</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    Base&amp; r = d;<span class="comment">//  引用就是个别名。对对象类型、生命周期啥的不起作用。这两句就相当于Derive d(1,2);</span></span><br><span class="line"><span class="comment">// ++++++++++++++++++++</span></span><br><span class="line"><span class="comment">// Base *pa= 1</span></span><br><span class="line"><span class="comment">// Derive *pb= 2</span></span><br><span class="line"><span class="comment">// ~Derive</span></span><br><span class="line"><span class="comment">// ~Base</span></span><br><span class="line"><span class="comment">// ++++++++++++++++++++</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;++++++++++++++++++++&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类指针指向子类对象  ok</span></span><br><span class="line">&#123;</span><br><span class="line">    Derive* p = <span class="keyword">new</span> <span class="built_in">Derive</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line"><span class="comment">// ++++++++++++++++++++</span></span><br><span class="line"><span class="comment">// Base *pa= 1</span></span><br><span class="line"><span class="comment">// Derive *pb= 2</span></span><br><span class="line"><span class="comment">// ~Derive</span></span><br><span class="line"><span class="comment">// ~Base</span></span><br><span class="line"><span class="comment">// ++++++++++++++++++++</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;++++++++++++++++++++&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  子类对象  ok</span></span><br><span class="line">&#123;</span><br><span class="line">    Derive d = <span class="built_in">Derive</span>(<span class="number">1</span>, <span class="number">2</span>);<span class="comment">//  相当于 Derive d(1,2);</span></span><br><span class="line"><span class="comment">// ++++++++++++++++++++</span></span><br><span class="line"><span class="comment">// Base *pa= 1</span></span><br><span class="line"><span class="comment">// Derive *pb= 2</span></span><br><span class="line"><span class="comment">// ~Derive</span></span><br><span class="line"><span class="comment">// ~Base</span></span><br><span class="line"><span class="comment">// ++++++++++++++++++++</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;++++++++++++++++++++&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> Base &amp;r = <span class="built_in">Derive</span>(<span class="number">1</span>, <span class="number">2</span>);   <span class="comment">//  ?</span></span><br><span class="line"><span class="comment">// ++++++++++++++++++++</span></span><br><span class="line"><span class="comment">// Base *pa= 1</span></span><br><span class="line"><span class="comment">// Derive *pb= 2</span></span><br><span class="line"><span class="comment">// ~Derive</span></span><br><span class="line"><span class="comment">// ~Base</span></span><br><span class="line"><span class="comment">// ++++++++++++++++++++</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;++++++++++++++++++++&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    Base r = <span class="built_in">Derive</span>(<span class="number">1</span>, <span class="number">2</span>);<span class="comment">//  触发异常 </span></span><br><span class="line"><span class="comment">// ++++++++++++++++++++</span></span><br><span class="line"><span class="comment">// Base *pa= 1</span></span><br><span class="line"><span class="comment">// Derive *pb= 2</span></span><br><span class="line"><span class="comment">// ~Derive</span></span><br><span class="line"><span class="comment">// ~Base</span></span><br><span class="line"><span class="comment">// ~Base</span></span><br><span class="line"><span class="comment">// ++++++++++++++++++++</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>为什么即使父类析构不屑virtual：父类引用变量引用子类对象、子类指针指向子类对象、和子类对象也都ok呢？</p><ul><li>因为构造函数时，<code>Derive():Base()...&#123;&#125;</code>已经写出了会先调用子类构造（即使不写，c++编译器编译之后也会在这个位置隐式生成这句<code>Base()</code>）</li><li>析构时，根据对象析构规则，在子类析构函数结束时，子类会自动去找父类的析构函数进行析构。</li></ul></li><li><p>为什么父类指针指向子类对象，析构不ok呢？</p><ul><li>构造ok是必然。因为构造时是new Derive()。会先Base()再Derive()。</li><li>析构不ok也是必然！因为父类析构没写virtual，父类指针只会执行那个父类的析构函数。</li><li>只有父类析构写了virtual，父类才会向下去找子类重写的析构函数，执行子类重写的析构函数。而子类重写的析构函数的机制就是，执行完函数体之后，自动执行父类的析构函数。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可以继承vector吗？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽量不要，因为vector的虚构函数不是virtual。构造函数顺序：先父后子；析构函数顺序：先子后父。继承的常见用法是父类vector指针指向子类对象。那么如果这样的话，构造函数无问题，先父后子。&lt;st</summary>
      
    
    
    
    
    <category term="杂记" scheme="http://example.com/tags/%E6%9D%82%E8%AE%B0/"/>
    
    <category term="别人问题" scheme="http://example.com/tags/%E5%88%AB%E4%BA%BA%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
</feed>
